import {
  A,
  C,
  E,
  IEvents,
  Po,
  Qe,
  Qo,
  concat,
  detect,
  esm_default,
  esm_exports,
  f,
  f2,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  fromString,
  getBigIntRpcId,
  h,
  i,
  import_pino,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  k,
  o,
  payloadId,
  r,
  require_cjs,
  require_cjs2,
  require_cjs3,
  safeJsonParse,
  safeJsonStringify,
  sn,
  toString,
  y
} from "./chunk-NFFDWF2D.js";
import {
  LruMap,
  checksumAddress,
  defineFormatter,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  toHex
} from "./chunk-JYXRLVTE.js";
import {
  css,
  unsafeCSS
} from "./chunk-S6EXHY4W.js";
import {
  HashMD
} from "./chunk-2DKGBYQN.js";
import {
  rotl,
  wrapConstructor
} from "./chunk-SP76EASD.js";
import {
  require_events
} from "./chunk-NPY75PGV.js";
import {
  formatUnits
} from "./chunk-W6WRK2EY.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t2, e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (t2 = "undefined" != typeof globalThis ? globalThis : t2 || self).dayjs = e2();
    }(exports, function() {
      "use strict";
      var t2 = 1e3, e2 = 6e4, n2 = 36e5, r2 = "millisecond", i4 = "second", s2 = "minute", u4 = "hour", a2 = "day", o2 = "week", c4 = "month", f7 = "quarter", h5 = "year", d3 = "date", l4 = "Invalid Date", $4 = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y6 = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M4 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(t3) {
        var e3 = ["th", "st", "nd", "rd"], n3 = t3 % 100;
        return "[" + t3 + (e3[(n3 - 20) % 10] || e3[n3] || e3[0]) + "]";
      } }, m2 = function(t3, e3, n3) {
        var r3 = String(t3);
        return !r3 || r3.length >= e3 ? t3 : "" + Array(e3 + 1 - r3.length).join(n3) + t3;
      }, v4 = { s: m2, z: function(t3) {
        var e3 = -t3.utcOffset(), n3 = Math.abs(e3), r3 = Math.floor(n3 / 60), i5 = n3 % 60;
        return (e3 <= 0 ? "+" : "-") + m2(r3, 2, "0") + ":" + m2(i5, 2, "0");
      }, m: function t3(e3, n3) {
        if (e3.date() < n3.date()) return -t3(n3, e3);
        var r3 = 12 * (n3.year() - e3.year()) + (n3.month() - e3.month()), i5 = e3.clone().add(r3, c4), s3 = n3 - i5 < 0, u5 = e3.clone().add(r3 + (s3 ? -1 : 1), c4);
        return +(-(r3 + (n3 - i5) / (s3 ? i5 - u5 : u5 - i5)) || 0);
      }, a: function(t3) {
        return t3 < 0 ? Math.ceil(t3) || 0 : Math.floor(t3);
      }, p: function(t3) {
        return { M: c4, y: h5, w: o2, d: a2, D: d3, h: u4, m: s2, s: i4, ms: r2, Q: f7 }[t3] || String(t3 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t3) {
        return void 0 === t3;
      } }, g = "en", D2 = {};
      D2[g] = M4;
      var p3 = "$isDayjsObject", S4 = function(t3) {
        return t3 instanceof _ || !(!t3 || !t3[p3]);
      }, w2 = function t3(e3, n3, r3) {
        var i5;
        if (!e3) return g;
        if ("string" == typeof e3) {
          var s3 = e3.toLowerCase();
          D2[s3] && (i5 = s3), n3 && (D2[s3] = n3, i5 = s3);
          var u5 = e3.split("-");
          if (!i5 && u5.length > 1) return t3(u5[0]);
        } else {
          var a3 = e3.name;
          D2[a3] = e3, i5 = a3;
        }
        return !r3 && i5 && (g = i5), i5 || !r3 && g;
      }, O4 = function(t3, e3) {
        if (S4(t3)) return t3.clone();
        var n3 = "object" == typeof e3 ? e3 : {};
        return n3.date = t3, n3.args = arguments, new _(n3);
      }, b4 = v4;
      b4.l = w2, b4.i = S4, b4.w = function(t3, e3) {
        return O4(t3, { locale: e3.$L, utc: e3.$u, x: e3.$x, $offset: e3.$offset });
      };
      var _ = function() {
        function M5(t3) {
          this.$L = w2(t3.locale, null, true), this.parse(t3), this.$x = this.$x || t3.x || {}, this[p3] = true;
        }
        var m3 = M5.prototype;
        return m3.parse = function(t3) {
          this.$d = function(t4) {
            var e3 = t4.date, n3 = t4.utc;
            if (null === e3) return /* @__PURE__ */ new Date(NaN);
            if (b4.u(e3)) return /* @__PURE__ */ new Date();
            if (e3 instanceof Date) return new Date(e3);
            if ("string" == typeof e3 && !/Z$/i.test(e3)) {
              var r3 = e3.match($4);
              if (r3) {
                var i5 = r3[2] - 1 || 0, s3 = (r3[7] || "0").substring(0, 3);
                return n3 ? new Date(Date.UTC(r3[1], i5, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3)) : new Date(r3[1], i5, r3[3] || 1, r3[4] || 0, r3[5] || 0, r3[6] || 0, s3);
              }
            }
            return new Date(e3);
          }(t3), this.init();
        }, m3.init = function() {
          var t3 = this.$d;
          this.$y = t3.getFullYear(), this.$M = t3.getMonth(), this.$D = t3.getDate(), this.$W = t3.getDay(), this.$H = t3.getHours(), this.$m = t3.getMinutes(), this.$s = t3.getSeconds(), this.$ms = t3.getMilliseconds();
        }, m3.$utils = function() {
          return b4;
        }, m3.isValid = function() {
          return !(this.$d.toString() === l4);
        }, m3.isSame = function(t3, e3) {
          var n3 = O4(t3);
          return this.startOf(e3) <= n3 && n3 <= this.endOf(e3);
        }, m3.isAfter = function(t3, e3) {
          return O4(t3) < this.startOf(e3);
        }, m3.isBefore = function(t3, e3) {
          return this.endOf(e3) < O4(t3);
        }, m3.$g = function(t3, e3, n3) {
          return b4.u(t3) ? this[e3] : this.set(n3, t3);
        }, m3.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m3.valueOf = function() {
          return this.$d.getTime();
        }, m3.startOf = function(t3, e3) {
          var n3 = this, r3 = !!b4.u(e3) || e3, f8 = b4.p(t3), l5 = function(t4, e4) {
            var i5 = b4.w(n3.$u ? Date.UTC(n3.$y, e4, t4) : new Date(n3.$y, e4, t4), n3);
            return r3 ? i5 : i5.endOf(a2);
          }, $5 = function(t4, e4) {
            return b4.w(n3.toDate()[t4].apply(n3.toDate("s"), (r3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e4)), n3);
          }, y7 = this.$W, M6 = this.$M, m4 = this.$D, v5 = "set" + (this.$u ? "UTC" : "");
          switch (f8) {
            case h5:
              return r3 ? l5(1, 0) : l5(31, 11);
            case c4:
              return r3 ? l5(1, M6) : l5(0, M6 + 1);
            case o2:
              var g2 = this.$locale().weekStart || 0, D3 = (y7 < g2 ? y7 + 7 : y7) - g2;
              return l5(r3 ? m4 - D3 : m4 + (6 - D3), M6);
            case a2:
            case d3:
              return $5(v5 + "Hours", 0);
            case u4:
              return $5(v5 + "Minutes", 1);
            case s2:
              return $5(v5 + "Seconds", 2);
            case i4:
              return $5(v5 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m3.endOf = function(t3) {
          return this.startOf(t3, false);
        }, m3.$set = function(t3, e3) {
          var n3, o3 = b4.p(t3), f8 = "set" + (this.$u ? "UTC" : ""), l5 = (n3 = {}, n3[a2] = f8 + "Date", n3[d3] = f8 + "Date", n3[c4] = f8 + "Month", n3[h5] = f8 + "FullYear", n3[u4] = f8 + "Hours", n3[s2] = f8 + "Minutes", n3[i4] = f8 + "Seconds", n3[r2] = f8 + "Milliseconds", n3)[o3], $5 = o3 === a2 ? this.$D + (e3 - this.$W) : e3;
          if (o3 === c4 || o3 === h5) {
            var y7 = this.clone().set(d3, 1);
            y7.$d[l5]($5), y7.init(), this.$d = y7.set(d3, Math.min(this.$D, y7.daysInMonth())).$d;
          } else l5 && this.$d[l5]($5);
          return this.init(), this;
        }, m3.set = function(t3, e3) {
          return this.clone().$set(t3, e3);
        }, m3.get = function(t3) {
          return this[b4.p(t3)]();
        }, m3.add = function(r3, f8) {
          var d4, l5 = this;
          r3 = Number(r3);
          var $5 = b4.p(f8), y7 = function(t3) {
            var e3 = O4(l5);
            return b4.w(e3.date(e3.date() + Math.round(t3 * r3)), l5);
          };
          if ($5 === c4) return this.set(c4, this.$M + r3);
          if ($5 === h5) return this.set(h5, this.$y + r3);
          if ($5 === a2) return y7(1);
          if ($5 === o2) return y7(7);
          var M6 = (d4 = {}, d4[s2] = e2, d4[u4] = n2, d4[i4] = t2, d4)[$5] || 1, m4 = this.$d.getTime() + r3 * M6;
          return b4.w(m4, this);
        }, m3.subtract = function(t3, e3) {
          return this.add(-1 * t3, e3);
        }, m3.format = function(t3) {
          var e3 = this, n3 = this.$locale();
          if (!this.isValid()) return n3.invalidDate || l4;
          var r3 = t3 || "YYYY-MM-DDTHH:mm:ssZ", i5 = b4.z(this), s3 = this.$H, u5 = this.$m, a3 = this.$M, o3 = n3.weekdays, c5 = n3.months, f8 = n3.meridiem, h6 = function(t4, n4, i6, s4) {
            return t4 && (t4[n4] || t4(e3, r3)) || i6[n4].slice(0, s4);
          }, d4 = function(t4) {
            return b4.s(s3 % 12 || 12, t4, "0");
          }, $5 = f8 || function(t4, e4, n4) {
            var r4 = t4 < 12 ? "AM" : "PM";
            return n4 ? r4.toLowerCase() : r4;
          };
          return r3.replace(y6, function(t4, r4) {
            return r4 || function(t5) {
              switch (t5) {
                case "YY":
                  return String(e3.$y).slice(-2);
                case "YYYY":
                  return b4.s(e3.$y, 4, "0");
                case "M":
                  return a3 + 1;
                case "MM":
                  return b4.s(a3 + 1, 2, "0");
                case "MMM":
                  return h6(n3.monthsShort, a3, c5, 3);
                case "MMMM":
                  return h6(c5, a3);
                case "D":
                  return e3.$D;
                case "DD":
                  return b4.s(e3.$D, 2, "0");
                case "d":
                  return String(e3.$W);
                case "dd":
                  return h6(n3.weekdaysMin, e3.$W, o3, 2);
                case "ddd":
                  return h6(n3.weekdaysShort, e3.$W, o3, 3);
                case "dddd":
                  return o3[e3.$W];
                case "H":
                  return String(s3);
                case "HH":
                  return b4.s(s3, 2, "0");
                case "h":
                  return d4(1);
                case "hh":
                  return d4(2);
                case "a":
                  return $5(s3, u5, true);
                case "A":
                  return $5(s3, u5, false);
                case "m":
                  return String(u5);
                case "mm":
                  return b4.s(u5, 2, "0");
                case "s":
                  return String(e3.$s);
                case "ss":
                  return b4.s(e3.$s, 2, "0");
                case "SSS":
                  return b4.s(e3.$ms, 3, "0");
                case "Z":
                  return i5;
              }
              return null;
            }(t4) || i5.replace(":", "");
          });
        }, m3.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m3.diff = function(r3, d4, l5) {
          var $5, y7 = this, M6 = b4.p(d4), m4 = O4(r3), v5 = (m4.utcOffset() - this.utcOffset()) * e2, g2 = this - m4, D3 = function() {
            return b4.m(y7, m4);
          };
          switch (M6) {
            case h5:
              $5 = D3() / 12;
              break;
            case c4:
              $5 = D3();
              break;
            case f7:
              $5 = D3() / 3;
              break;
            case o2:
              $5 = (g2 - v5) / 6048e5;
              break;
            case a2:
              $5 = (g2 - v5) / 864e5;
              break;
            case u4:
              $5 = g2 / n2;
              break;
            case s2:
              $5 = g2 / e2;
              break;
            case i4:
              $5 = g2 / t2;
              break;
            default:
              $5 = g2;
          }
          return l5 ? $5 : b4.a($5);
        }, m3.daysInMonth = function() {
          return this.endOf(c4).$D;
        }, m3.$locale = function() {
          return D2[this.$L];
        }, m3.locale = function(t3, e3) {
          if (!t3) return this.$L;
          var n3 = this.clone(), r3 = w2(t3, e3, true);
          return r3 && (n3.$L = r3), n3;
        }, m3.clone = function() {
          return b4.w(this.$d, this);
        }, m3.toDate = function() {
          return new Date(this.valueOf());
        }, m3.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m3.toISOString = function() {
          return this.$d.toISOString();
        }, m3.toString = function() {
          return this.$d.toUTCString();
        }, M5;
      }(), k5 = _.prototype;
      return O4.prototype = k5, [["$ms", r2], ["$s", i4], ["$m", s2], ["$H", u4], ["$W", a2], ["$M", c4], ["$y", h5], ["$D", d3]].forEach(function(t3) {
        k5[t3[1]] = function(e3) {
          return this.$g(e3, t3[0], t3[1]);
        };
      }), O4.extend = function(t3, e3) {
        return t3.$i || (t3(e3, _, O4), t3.$i = true), O4;
      }, O4.locale = w2, O4.isDayjs = S4, O4.unix = function(t3) {
        return O4(1e3 * t3);
      }, O4.en = D2[g], O4.Ls = D2, O4.p = {}, O4;
    });
  }
});

// node_modules/dayjs/locale/en.js
var require_en = __commonJS({
  "node_modules/dayjs/locale/en.js"(exports, module) {
    !function(e2, n2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n2() : "function" == typeof define && define.amd ? define(n2) : (e2 = "undefined" != typeof globalThis ? globalThis : e2 || self).dayjs_locale_en = n2();
    }(exports, function() {
      "use strict";
      return { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(e2) {
        var n2 = ["th", "st", "nd", "rd"], t2 = e2 % 100;
        return "[" + e2 + (n2[(t2 - 20) % 10] || n2[t2] || n2[0]) + "]";
      } };
    });
  }
});

// node_modules/dayjs/plugin/relativeTime.js
var require_relativeTime = __commonJS({
  "node_modules/dayjs/plugin/relativeTime.js"(exports, module) {
    !function(r2, e2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e2() : "function" == typeof define && define.amd ? define(e2) : (r2 = "undefined" != typeof globalThis ? globalThis : r2 || self).dayjs_plugin_relativeTime = e2();
    }(exports, function() {
      "use strict";
      return function(r2, e2, t2) {
        r2 = r2 || {};
        var n2 = e2.prototype, o2 = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" };
        function i4(r3, e3, t3, o3) {
          return n2.fromToBase(r3, e3, t3, o3);
        }
        t2.en.relativeTime = o2, n2.fromToBase = function(e3, n3, i5, d4, u4) {
          for (var f7, a2, s2, l4 = i5.$locale().relativeTime || o2, h5 = r2.thresholds || [{ l: "s", r: 44, d: "second" }, { l: "m", r: 89 }, { l: "mm", r: 44, d: "minute" }, { l: "h", r: 89 }, { l: "hh", r: 21, d: "hour" }, { l: "d", r: 35 }, { l: "dd", r: 25, d: "day" }, { l: "M", r: 45 }, { l: "MM", r: 10, d: "month" }, { l: "y", r: 17 }, { l: "yy", d: "year" }], m2 = h5.length, c4 = 0; c4 < m2; c4 += 1) {
            var y6 = h5[c4];
            y6.d && (f7 = d4 ? t2(e3).diff(i5, y6.d, true) : i5.diff(e3, y6.d, true));
            var p3 = (r2.rounding || Math.round)(Math.abs(f7));
            if (s2 = f7 > 0, p3 <= y6.r || !y6.r) {
              p3 <= 1 && c4 > 0 && (y6 = h5[c4 - 1]);
              var v4 = l4[y6.l];
              u4 && (p3 = u4("" + p3)), a2 = "string" == typeof v4 ? v4.replace("%d", p3) : v4(p3, n3, y6.l, s2);
              break;
            }
          }
          if (n3) return a2;
          var M4 = s2 ? l4.future : l4.past;
          return "function" == typeof M4 ? M4(a2) : M4.replace("%s", a2);
        }, n2.to = function(r3, e3) {
          return i4(r3, e3, this, true);
        }, n2.from = function(r3, e3) {
          return i4(r3, e3, this);
        };
        var d3 = function(r3) {
          return r3.$u ? t2.utc() : t2();
        };
        n2.toNow = function(r3) {
          return this.to(d3(this), r3);
        }, n2.fromNow = function(r3) {
          return this.from(d3(this), r3);
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/updateLocale.js
var require_updateLocale = __commonJS({
  "node_modules/dayjs/plugin/updateLocale.js"(exports, module) {
    !function(e2, n2) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n2() : "function" == typeof define && define.amd ? define(n2) : (e2 = "undefined" != typeof globalThis ? globalThis : e2 || self).dayjs_plugin_updateLocale = n2();
    }(exports, function() {
      "use strict";
      return function(e2, n2, t2) {
        t2.updateLocale = function(e3, n3) {
          var o2 = t2.Ls[e3];
          if (o2) return (n3 ? Object.keys(n3) : []).forEach(function(e4) {
            o2[e4] = n3[e4];
          }), o2;
        };
      };
    });
  }
});

// node_modules/@reown/appkit-common/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil = {
  WC_NAME_SUFFIX: ".reown.id",
  WC_NAME_SUFFIX_LEGACY: ".wcn.id",
  BLOCKCHAIN_API_RPC_URL: "https://rpc.walletconnect.org",
  PULSE_API_URL: "https://pulse.walletconnect.org",
  W3M_API_URL: "https://api.web3modal.org",
  CONNECTOR_ID: {
    WALLET_CONNECT: "walletConnect",
    INJECTED: "injected",
    WALLET_STANDARD: "announced",
    COINBASE: "coinbaseWallet",
    COINBASE_SDK: "coinbaseWalletSDK",
    SAFE: "safe",
    LEDGER: "ledger",
    OKX: "okx",
    EIP6963: "eip6963",
    AUTH: "ID_AUTH"
  },
  CONNECTOR_NAMES: {
    AUTH: "Auth"
  },
  AUTH_CONNECTOR_SUPPORTED_CHAINS: ["eip155", "solana"],
  LIMITS: {
    PENDING_TRANSACTIONS: 99
  },
  CHAIN: {
    EVM: "eip155",
    SOLANA: "solana",
    POLKADOT: "polkadot",
    BITCOIN: "bip122"
  },
  CHAIN_NAME_MAP: {
    eip155: "EVM Networks",
    solana: "Solana",
    polkadot: "Polkadot",
    bip122: "Bitcoin",
    cosmos: "Cosmos"
  },
  ADAPTER_TYPES: {
    BITCOIN: "bitcoin",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5"
  },
  USDT_CONTRACT_ADDRESSES: [
    "0xdac17f958d2ee523a2206206994597c13d831ec7",
    "0xc2132d05d31c914a87c6611c10748aeb04b58e8f",
    "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7",
    "0x919C1c267BC06a7039e03fcc2eF738525769109c",
    "0x48065fbBE25f71C9282ddf5e1cD6D6A887483D5e",
    "0x55d398326f99059fF775485246999027B3197955",
    "0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9"
  ],
  HTTP_STATUS_CODES: {
    SERVICE_UNAVAILABLE: 503,
    FORBIDDEN: 403
  },
  UNSUPPORTED_NETWORK_NAME: "Unknown Network",
  SECURE_SITE_SDK_ORIGIN: (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org"
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/DateUtil.js
var import_dayjs = __toESM(require_dayjs_min(), 1);
var import_en = __toESM(require_en(), 1);
var import_relativeTime = __toESM(require_relativeTime(), 1);
var import_updateLocale = __toESM(require_updateLocale(), 1);
import_dayjs.default.extend(import_relativeTime.default);
import_dayjs.default.extend(import_updateLocale.default);
var localeObject = {
  ...import_en.default,
  name: "en-web3-modal",
  relativeTime: {
    future: "in %s",
    past: "%s ago",
    s: "%d sec",
    m: "1 min",
    mm: "%d min",
    h: "1 hr",
    hh: "%d hrs",
    d: "1 d",
    dd: "%d d",
    M: "1 mo",
    MM: "%d mo",
    y: "1 yr",
    yy: "%d yr"
  }
};
import_dayjs.default.locale("en-web3-modal", localeObject);

// node_modules/@reown/appkit-common/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil = {
  caipNetworkIdToNumber(caipnetworkId) {
    return caipnetworkId ? Number(caipnetworkId.split(":")[1]) : void 0;
  },
  parseEvmChainId(chainId) {
    return typeof chainId === "string" ? this.caipNetworkIdToNumber(chainId) : chainId;
  },
  getNetworksByNamespace(networks, namespace) {
    return (networks == null ? void 0 : networks.filter((network) => network.chainNamespace === namespace)) || [];
  },
  getFirstNetworkByNamespace(networks, namespace) {
    return this.getNetworksByNamespace(networks, namespace)[0];
  },
  getNetworkNameByCaipNetworkId(caipNetworks, caipNetworkId) {
    var _a;
    if (!caipNetworkId) {
      return void 0;
    }
    const caipNetwork = caipNetworks.find((network) => network.caipNetworkId === caipNetworkId);
    if (caipNetwork) {
      return caipNetwork.name;
    }
    const [namespace] = caipNetworkId.split(":");
    return ((_a = ConstantsUtil.CHAIN_NAME_MAP) == null ? void 0 : _a[namespace]) || void 0;
  }
};

// node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = "[big.js] ";
var INVALID = NAME + "Invalid ";
var INVALID_DP = INVALID + "decimal places";
var INVALID_RM = INVALID + "rounding mode";
var DIV_BY_ZERO = NAME + "Division by zero";
var P = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
  function Big2(n2) {
    var x2 = this;
    if (!(x2 instanceof Big2)) return n2 === UNDEFINED ? _Big_() : new Big2(n2);
    if (n2 instanceof Big2) {
      x2.s = n2.s;
      x2.e = n2.e;
      x2.c = n2.c.slice();
    } else {
      if (typeof n2 !== "string") {
        if (Big2.strict === true && typeof n2 !== "bigint") {
          throw TypeError(INVALID + "value");
        }
        n2 = n2 === 0 && 1 / n2 < 0 ? "-0" : String(n2);
      }
      parse(x2, n2);
    }
    x2.constructor = Big2;
  }
  Big2.prototype = P;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.strict = STRICT;
  Big2.roundDown = 0;
  Big2.roundHalfUp = 1;
  Big2.roundHalfEven = 2;
  Big2.roundUp = 3;
  return Big2;
}
function parse(x2, n2) {
  var e2, i4, nl;
  if (!NUMERIC.test(n2)) {
    throw Error(INVALID + "number");
  }
  x2.s = n2.charAt(0) == "-" ? (n2 = n2.slice(1), -1) : 1;
  if ((e2 = n2.indexOf(".")) > -1) n2 = n2.replace(".", "");
  if ((i4 = n2.search(/e/i)) > 0) {
    if (e2 < 0) e2 = i4;
    e2 += +n2.slice(i4 + 1);
    n2 = n2.substring(0, i4);
  } else if (e2 < 0) {
    e2 = n2.length;
  }
  nl = n2.length;
  for (i4 = 0; i4 < nl && n2.charAt(i4) == "0"; ) ++i4;
  if (i4 == nl) {
    x2.c = [x2.e = 0];
  } else {
    for (; nl > 0 && n2.charAt(--nl) == "0"; ) ;
    x2.e = e2 - i4 - 1;
    x2.c = [];
    for (e2 = 0; i4 <= nl; ) x2.c[e2++] = +n2.charAt(i4++);
  }
  return x2;
}
function round(x2, sd, rm, more) {
  var xc2 = x2.c;
  if (rm === UNDEFINED) rm = x2.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }
  if (sd < 1) {
    more = rm === 3 && (more || !!xc2[0]) || sd === 0 && (rm === 1 && xc2[0] >= 5 || rm === 2 && (xc2[0] > 5 || xc2[0] === 5 && (more || xc2[1] !== UNDEFINED)));
    xc2.length = 1;
    if (more) {
      x2.e = x2.e - sd + 1;
      xc2[0] = 1;
    } else {
      xc2[0] = x2.e = 0;
    }
  } else if (sd < xc2.length) {
    more = rm === 1 && xc2[sd] >= 5 || rm === 2 && (xc2[sd] > 5 || xc2[sd] === 5 && (more || xc2[sd + 1] !== UNDEFINED || xc2[sd - 1] & 1)) || rm === 3 && (more || !!xc2[0]);
    xc2.length = sd;
    if (more) {
      for (; ++xc2[--sd] > 9; ) {
        xc2[sd] = 0;
        if (sd === 0) {
          ++x2.e;
          xc2.unshift(1);
          break;
        }
      }
    }
    for (sd = xc2.length; !xc2[--sd]; ) xc2.pop();
  }
  return x2;
}
function stringify(x2, doExponential, isNonzero) {
  var e2 = x2.e, s2 = x2.c.join(""), n2 = s2.length;
  if (doExponential) {
    s2 = s2.charAt(0) + (n2 > 1 ? "." + s2.slice(1) : "") + (e2 < 0 ? "e" : "e+") + e2;
  } else if (e2 < 0) {
    for (; ++e2; ) s2 = "0" + s2;
    s2 = "0." + s2;
  } else if (e2 > 0) {
    if (++e2 > n2) {
      for (e2 -= n2; e2--; ) s2 += "0";
    } else if (e2 < n2) {
      s2 = s2.slice(0, e2) + "." + s2.slice(e2);
    }
  } else if (n2 > 1) {
    s2 = s2.charAt(0) + "." + s2.slice(1);
  }
  return x2.s < 0 && isNonzero ? "-" + s2 : s2;
}
P.abs = function() {
  var x2 = new this.constructor(this);
  x2.s = 1;
  return x2;
};
P.cmp = function(y6) {
  var isneg, x2 = this, xc2 = x2.c, yc2 = (y6 = new x2.constructor(y6)).c, i4 = x2.s, j2 = y6.s, k5 = x2.e, l4 = y6.e;
  if (!xc2[0] || !yc2[0]) return !xc2[0] ? !yc2[0] ? 0 : -j2 : i4;
  if (i4 != j2) return i4;
  isneg = i4 < 0;
  if (k5 != l4) return k5 > l4 ^ isneg ? 1 : -1;
  j2 = (k5 = xc2.length) < (l4 = yc2.length) ? k5 : l4;
  for (i4 = -1; ++i4 < j2; ) {
    if (xc2[i4] != yc2[i4]) return xc2[i4] > yc2[i4] ^ isneg ? 1 : -1;
  }
  return k5 == l4 ? 0 : k5 > l4 ^ isneg ? 1 : -1;
};
P.div = function(y6) {
  var x2 = this, Big2 = x2.constructor, a2 = x2.c, b4 = (y6 = new Big2(y6)).c, k5 = x2.s == y6.s ? 1 : -1, dp = Big2.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  if (!b4[0]) {
    throw Error(DIV_BY_ZERO);
  }
  if (!a2[0]) {
    y6.s = k5;
    y6.c = [y6.e = 0];
    return y6;
  }
  var bl, bt3, n2, cmp, ri3, bz = b4.slice(), ai2 = bl = b4.length, al = a2.length, r2 = a2.slice(0, bl), rl = r2.length, q3 = y6, qc2 = q3.c = [], qi3 = 0, p3 = dp + (q3.e = x2.e - y6.e) + 1;
  q3.s = k5;
  k5 = p3 < 0 ? 0 : p3;
  bz.unshift(0);
  for (; rl++ < bl; ) r2.push(0);
  do {
    for (n2 = 0; n2 < 10; n2++) {
      if (bl != (rl = r2.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri3 = -1, cmp = 0; ++ri3 < bl; ) {
          if (b4[ri3] != r2[ri3]) {
            cmp = b4[ri3] > r2[ri3] ? 1 : -1;
            break;
          }
        }
      }
      if (cmp < 0) {
        for (bt3 = rl == bl ? b4 : bz; rl; ) {
          if (r2[--rl] < bt3[rl]) {
            ri3 = rl;
            for (; ri3 && !r2[--ri3]; ) r2[ri3] = 9;
            --r2[ri3];
            r2[rl] += 10;
          }
          r2[rl] -= bt3[rl];
        }
        for (; !r2[0]; ) r2.shift();
      } else {
        break;
      }
    }
    qc2[qi3++] = cmp ? n2 : ++n2;
    if (r2[0] && cmp) r2[rl] = a2[ai2] || 0;
    else r2 = [a2[ai2]];
  } while ((ai2++ < al || r2[0] !== UNDEFINED) && k5--);
  if (!qc2[0] && qi3 != 1) {
    qc2.shift();
    q3.e--;
    p3--;
  }
  if (qi3 > p3) round(q3, p3, Big2.RM, r2[0] !== UNDEFINED);
  return q3;
};
P.eq = function(y6) {
  return this.cmp(y6) === 0;
};
P.gt = function(y6) {
  return this.cmp(y6) > 0;
};
P.gte = function(y6) {
  return this.cmp(y6) > -1;
};
P.lt = function(y6) {
  return this.cmp(y6) < 0;
};
P.lte = function(y6) {
  return this.cmp(y6) < 1;
};
P.minus = P.sub = function(y6) {
  var i4, j2, t2, xlty, x2 = this, Big2 = x2.constructor, a2 = x2.s, b4 = (y6 = new Big2(y6)).s;
  if (a2 != b4) {
    y6.s = -b4;
    return x2.plus(y6);
  }
  var xc2 = x2.c.slice(), xe3 = x2.e, yc2 = y6.c, ye4 = y6.e;
  if (!xc2[0] || !yc2[0]) {
    if (yc2[0]) {
      y6.s = -b4;
    } else if (xc2[0]) {
      y6 = new Big2(x2);
    } else {
      y6.s = 1;
    }
    return y6;
  }
  if (a2 = xe3 - ye4) {
    if (xlty = a2 < 0) {
      a2 = -a2;
      t2 = xc2;
    } else {
      ye4 = xe3;
      t2 = yc2;
    }
    t2.reverse();
    for (b4 = a2; b4--; ) t2.push(0);
    t2.reverse();
  } else {
    j2 = ((xlty = xc2.length < yc2.length) ? xc2 : yc2).length;
    for (a2 = b4 = 0; b4 < j2; b4++) {
      if (xc2[b4] != yc2[b4]) {
        xlty = xc2[b4] < yc2[b4];
        break;
      }
    }
  }
  if (xlty) {
    t2 = xc2;
    xc2 = yc2;
    yc2 = t2;
    y6.s = -y6.s;
  }
  if ((b4 = (j2 = yc2.length) - (i4 = xc2.length)) > 0) for (; b4--; ) xc2[i4++] = 0;
  for (b4 = i4; j2 > a2; ) {
    if (xc2[--j2] < yc2[j2]) {
      for (i4 = j2; i4 && !xc2[--i4]; ) xc2[i4] = 9;
      --xc2[i4];
      xc2[j2] += 10;
    }
    xc2[j2] -= yc2[j2];
  }
  for (; xc2[--b4] === 0; ) xc2.pop();
  for (; xc2[0] === 0; ) {
    xc2.shift();
    --ye4;
  }
  if (!xc2[0]) {
    y6.s = 1;
    xc2 = [ye4 = 0];
  }
  y6.c = xc2;
  y6.e = ye4;
  return y6;
};
P.mod = function(y6) {
  var ygtx, x2 = this, Big2 = x2.constructor, a2 = x2.s, b4 = (y6 = new Big2(y6)).s;
  if (!y6.c[0]) {
    throw Error(DIV_BY_ZERO);
  }
  x2.s = y6.s = 1;
  ygtx = y6.cmp(x2) == 1;
  x2.s = a2;
  y6.s = b4;
  if (ygtx) return new Big2(x2);
  a2 = Big2.DP;
  b4 = Big2.RM;
  Big2.DP = Big2.RM = 0;
  x2 = x2.div(y6);
  Big2.DP = a2;
  Big2.RM = b4;
  return this.minus(x2.times(y6));
};
P.neg = function() {
  var x2 = new this.constructor(this);
  x2.s = -x2.s;
  return x2;
};
P.plus = P.add = function(y6) {
  var e2, k5, t2, x2 = this, Big2 = x2.constructor;
  y6 = new Big2(y6);
  if (x2.s != y6.s) {
    y6.s = -y6.s;
    return x2.minus(y6);
  }
  var xe3 = x2.e, xc2 = x2.c, ye4 = y6.e, yc2 = y6.c;
  if (!xc2[0] || !yc2[0]) {
    if (!yc2[0]) {
      if (xc2[0]) {
        y6 = new Big2(x2);
      } else {
        y6.s = x2.s;
      }
    }
    return y6;
  }
  xc2 = xc2.slice();
  if (e2 = xe3 - ye4) {
    if (e2 > 0) {
      ye4 = xe3;
      t2 = yc2;
    } else {
      e2 = -e2;
      t2 = xc2;
    }
    t2.reverse();
    for (; e2--; ) t2.push(0);
    t2.reverse();
  }
  if (xc2.length - yc2.length < 0) {
    t2 = yc2;
    yc2 = xc2;
    xc2 = t2;
  }
  e2 = yc2.length;
  for (k5 = 0; e2; xc2[e2] %= 10) k5 = (xc2[--e2] = xc2[e2] + yc2[e2] + k5) / 10 | 0;
  if (k5) {
    xc2.unshift(k5);
    ++ye4;
  }
  for (e2 = xc2.length; xc2[--e2] === 0; ) xc2.pop();
  y6.c = xc2;
  y6.e = ye4;
  return y6;
};
P.pow = function(n2) {
  var x2 = this, one = new x2.constructor("1"), y6 = one, isneg = n2 < 0;
  if (n2 !== ~~n2 || n2 < -MAX_POWER || n2 > MAX_POWER) {
    throw Error(INVALID + "exponent");
  }
  if (isneg) n2 = -n2;
  for (; ; ) {
    if (n2 & 1) y6 = y6.times(x2);
    n2 >>= 1;
    if (!n2) break;
    x2 = x2.times(x2);
  }
  return isneg ? one.div(y6) : y6;
};
P.prec = function(sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + "precision");
  }
  return round(new this.constructor(this), sd, rm);
};
P.round = function(dp, rm) {
  if (dp === UNDEFINED) dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round(new this.constructor(this), dp + this.e + 1, rm);
};
P.sqrt = function() {
  var r2, c4, t2, x2 = this, Big2 = x2.constructor, s2 = x2.s, e2 = x2.e, half = new Big2("0.5");
  if (!x2.c[0]) return new Big2(x2);
  if (s2 < 0) {
    throw Error(NAME + "No square root");
  }
  s2 = Math.sqrt(+stringify(x2, true, true));
  if (s2 === 0 || s2 === 1 / 0) {
    c4 = x2.c.join("");
    if (!(c4.length + e2 & 1)) c4 += "0";
    s2 = Math.sqrt(c4);
    e2 = ((e2 + 1) / 2 | 0) - (e2 < 0 || e2 & 1);
    r2 = new Big2((s2 == 1 / 0 ? "5e" : (s2 = s2.toExponential()).slice(0, s2.indexOf("e") + 1)) + e2);
  } else {
    r2 = new Big2(s2 + "");
  }
  e2 = r2.e + (Big2.DP += 4);
  do {
    t2 = r2;
    r2 = half.times(t2.plus(x2.div(t2)));
  } while (t2.c.slice(0, e2).join("") !== r2.c.slice(0, e2).join(""));
  return round(r2, (Big2.DP -= 4) + r2.e + 1, Big2.RM);
};
P.times = P.mul = function(y6) {
  var c4, x2 = this, Big2 = x2.constructor, xc2 = x2.c, yc2 = (y6 = new Big2(y6)).c, a2 = xc2.length, b4 = yc2.length, i4 = x2.e, j2 = y6.e;
  y6.s = x2.s == y6.s ? 1 : -1;
  if (!xc2[0] || !yc2[0]) {
    y6.c = [y6.e = 0];
    return y6;
  }
  y6.e = i4 + j2;
  if (a2 < b4) {
    c4 = xc2;
    xc2 = yc2;
    yc2 = c4;
    j2 = a2;
    a2 = b4;
    b4 = j2;
  }
  for (c4 = new Array(j2 = a2 + b4); j2--; ) c4[j2] = 0;
  for (i4 = b4; i4--; ) {
    b4 = 0;
    for (j2 = a2 + i4; j2 > i4; ) {
      b4 = c4[j2] + yc2[i4] * xc2[j2 - i4 - 1] + b4;
      c4[j2--] = b4 % 10;
      b4 = b4 / 10 | 0;
    }
    c4[j2] = b4;
  }
  if (b4) ++y6.e;
  else c4.shift();
  for (i4 = c4.length; !c4[--i4]; ) c4.pop();
  y6.c = c4;
  return y6;
};
P.toExponential = function(dp, rm) {
  var x2 = this, n2 = x2.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x2 = round(new x2.constructor(x2), ++dp, rm);
    for (; x2.c.length < dp; ) x2.c.push(0);
  }
  return stringify(x2, true, !!n2);
};
P.toFixed = function(dp, rm) {
  var x2 = this, n2 = x2.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x2 = round(new x2.constructor(x2), dp + x2.e + 1, rm);
    for (dp = dp + x2.e + 1; x2.c.length < dp; ) x2.c.push(0);
  }
  return stringify(x2, false, !!n2);
};
P[Symbol.for("nodejs.util.inspect.custom")] = P.toJSON = P.toString = function() {
  var x2 = this, Big2 = x2.constructor;
  return stringify(x2, x2.e <= Big2.NE || x2.e >= Big2.PE, !!x2.c[0]);
};
P.toNumber = function() {
  var n2 = +stringify(this, true, true);
  if (this.constructor.strict === true && !this.eq(n2.toString())) {
    throw Error(NAME + "Imprecise conversion");
  }
  return n2;
};
P.toPrecision = function(sd, rm) {
  var x2 = this, Big2 = x2.constructor, n2 = x2.c[0];
  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + "precision");
    }
    x2 = round(new Big2(x2), sd, rm);
    for (; x2.c.length < sd; ) x2.c.push(0);
  }
  return stringify(x2, sd <= x2.e || x2.e <= Big2.NE || x2.e >= Big2.PE, !!n2);
};
P.valueOf = function() {
  var x2 = this, Big2 = x2.constructor;
  if (Big2.strict === true) {
    throw Error(NAME + "valueOf disallowed");
  }
  return stringify(x2, x2.e <= Big2.NE || x2.e >= Big2.PE, true);
};
var Big = _Big_();
var big_default = Big;

// node_modules/@reown/appkit-common/dist/esm/src/utils/NumberUtil.js
var NumberUtil = {
  bigNumber(value) {
    if (!value) {
      return new big_default(0);
    }
    return new big_default(value);
  },
  multiply(a2, b4) {
    if (a2 === void 0 || b4 === void 0) {
      return new big_default(0);
    }
    const aBigNumber = new big_default(a2);
    const bBigNumber = new big_default(b4);
    return aBigNumber.times(bBigNumber);
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  },
  parseLocalStringToNumber(value) {
    if (value === void 0) {
      return 0;
    }
    return parseFloat(value.replace(/,/gu, ""));
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/contracts/erc20.js
var erc20ABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "_from",
        type: "address"
      },
      {
        name: "_to",
        type: "address"
      },
      {
        name: "_value",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/contracts/swap.js
var swapABI = [
  {
    type: "function",
    name: "approve",
    stateMutability: "nonpayable",
    inputs: [
      { name: "spender", type: "address" },
      { name: "amount", type: "uint256" }
    ],
    outputs: [{ type: "bool" }]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/contracts/usdt.js
var usdtABI = [
  {
    type: "function",
    name: "transfer",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: []
  },
  {
    type: "function",
    name: "transferFrom",
    stateMutability: "nonpayable",
    inputs: [
      {
        name: "sender",
        type: "address"
      },
      {
        name: "recipient",
        type: "address"
      },
      {
        name: "amount",
        type: "uint256"
      }
    ],
    outputs: [
      {
        name: "",
        type: "bool"
      }
    ]
  }
];

// node_modules/@reown/appkit-common/dist/esm/src/utils/ContractUtil.js
var ContractUtil = {
  getERC20Abi: (tokenAddress) => {
    if (ConstantsUtil.USDT_CONTRACT_ADDRESSES.includes(tokenAddress)) {
      return usdtABI;
    }
    return erc20ABI;
  },
  getSwapAbi: () => swapABI
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/EmitterUtil.js
var Emitter = class _Emitter {
  on(eventName, callback) {
    var _a;
    if (!_Emitter.eventListeners.has(eventName)) {
      _Emitter.eventListeners.set(eventName, /* @__PURE__ */ new Set());
    }
    (_a = _Emitter.eventListeners.get(eventName)) == null ? void 0 : _a.add(callback);
  }
  off(eventName, callback) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.delete(callback);
    }
  }
  emit(eventName, data) {
    const listeners = _Emitter.eventListeners.get(eventName);
    if (listeners) {
      listeners.forEach((callback) => callback(data));
    }
  }
  clear(eventName) {
    _Emitter.eventListeners.delete(eventName);
  }
  clearAll() {
    _Emitter.eventListeners.clear();
  }
};
Emitter.eventListeners = /* @__PURE__ */ new Map();

// node_modules/@reown/appkit-common/dist/esm/src/utils/ParseUtil.js
var ParseUtil = {
  validateCaipAddress(address) {
    var _a;
    if (((_a = address.split(":")) == null ? void 0 : _a.length) !== 3) {
      throw new Error("Invalid CAIP Address");
    }
    return address;
  },
  parseCaipAddress(caipAddress) {
    const parts = caipAddress.split(":");
    if (parts.length !== 3) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    const [chainNamespace, chainId, address] = parts;
    if (!chainNamespace || !chainId || !address) {
      throw new Error(`Invalid CAIP-10 address: ${caipAddress}`);
    }
    return {
      chainNamespace,
      chainId,
      address
    };
  },
  parseCaipNetworkId(caipNetworkId) {
    const parts = caipNetworkId.split(":");
    if (parts.length !== 2) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    const [chainNamespace, chainId] = parts;
    if (!chainNamespace || !chainId) {
      throw new Error(`Invalid CAIP-2 network id: ${caipNetworkId}`);
    }
    return {
      chainNamespace,
      chainId
    };
  }
};

// node_modules/@reown/appkit-common/dist/esm/src/utils/SafeLocalStorage.js
var SafeLocalStorageKeys = {
  WALLET_ID: "@appkit/wallet_id",
  WALLET_NAME: "@appkit/wallet_name",
  SOLANA_WALLET: "@appkit/solana_wallet",
  SOLANA_CAIP_CHAIN: "@appkit/solana_caip_chain",
  ACTIVE_CAIP_NETWORK_ID: "@appkit/active_caip_network_id",
  CONNECTED_SOCIAL: "@appkit/connected_social",
  CONNECTED_SOCIAL_USERNAME: "@appkit-wallet/SOCIAL_USERNAME",
  RECENT_WALLETS: "@appkit/recent_wallets",
  DEEPLINK_CHOICE: "WALLETCONNECT_DEEPLINK_CHOICE",
  ACTIVE_NAMESPACE: "@appkit/active_namespace",
  CONNECTED_NAMESPACES: "@appkit/connected_namespaces",
  CONNECTION_STATUS: "@appkit/connection_status",
  SIWX_AUTH_TOKEN: "@appkit/siwx-auth-token",
  SIWX_NONCE_TOKEN: "@appkit/siwx-nonce-token",
  TELEGRAM_SOCIAL_PROVIDER: "@appkit/social_provider",
  NATIVE_BALANCE_CACHE: "@appkit/native_balance_cache",
  PORTFOLIO_CACHE: "@appkit/portfolio_cache",
  ENS_CACHE: "@appkit/ens_cache",
  IDENTITY_CACHE: "@appkit/identity_cache",
  PREFERRED_ACCOUNT_TYPES: "@appkit/preferred_account_types",
  CONNECTIONS: "@appkit/connections"
};
function getSafeConnectorIdKey(namespace) {
  if (!namespace) {
    throw new Error("Namespace is required for CONNECTED_CONNECTOR_ID");
  }
  return `@appkit/${namespace}:connected_connector_id`;
}
var SafeLocalStorage = {
  setItem(key, value) {
    if (isSafe() && value !== void 0) {
      localStorage.setItem(key, value);
    }
  },
  getItem(key) {
    if (isSafe()) {
      return localStorage.getItem(key) || void 0;
    }
    return void 0;
  },
  removeItem(key) {
    if (isSafe()) {
      localStorage.removeItem(key);
    }
  },
  clear() {
    if (isSafe()) {
      localStorage.clear();
    }
  }
};
function isSafe() {
  return typeof window !== "undefined" && typeof localStorage !== "undefined";
}

// node_modules/@reown/appkit-common/dist/esm/src/utils/ThemeUtil.js
function getW3mThemeVariables(themeVariables, themeType) {
  if (themeType === "light") {
    return {
      "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(231, 100%, 70%, 1)",
      "--w3m-background": "#fff"
    };
  }
  return {
    "--w3m-accent": (themeVariables == null ? void 0 : themeVariables["--w3m-accent"]) || "hsla(230, 100%, 67%, 1)",
    "--w3m-background": "#121313"
  };
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/StorageUtil.js
var StorageUtil = {
  // Cache expiry in milliseconds
  cacheExpiry: {
    portfolio: 3e4,
    nativeBalance: 3e4,
    ens: 3e5,
    identity: 3e5
  },
  isCacheExpired(timestamp, cacheExpiry) {
    return Date.now() - timestamp > cacheExpiry;
  },
  getActiveNetworkProps() {
    const namespace = StorageUtil.getActiveNamespace();
    const caipNetworkId = StorageUtil.getActiveCaipNetworkId();
    const stringChainId = caipNetworkId ? caipNetworkId.split(":")[1] : void 0;
    const chainId = stringChainId ? isNaN(Number(stringChainId)) ? stringChainId : Number(stringChainId) : void 0;
    return {
      namespace,
      caipNetworkId,
      chainId
    };
  },
  setWalletConnectDeepLink({ name, href }) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.DEEPLINK_CHOICE, JSON.stringify({ href, name }));
    } catch {
      console.info("Unable to set WalletConnect deep link");
    }
  },
  getWalletConnectDeepLink() {
    try {
      const deepLink = SafeLocalStorage.getItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
      if (deepLink) {
        return JSON.parse(deepLink);
      }
    } catch {
      console.info("Unable to get WalletConnect deep link");
    }
    return void 0;
  },
  deleteWalletConnectDeepLink() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.DEEPLINK_CHOICE);
    } catch {
      console.info("Unable to delete WalletConnect deep link");
    }
  },
  setActiveNamespace(namespace) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE, namespace);
    } catch {
      console.info("Unable to set active namespace");
    }
  },
  setActiveCaipNetworkId(caipNetworkId) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID, caipNetworkId);
      StorageUtil.setActiveNamespace(caipNetworkId.split(":")[0]);
    } catch {
      console.info("Unable to set active caip network id");
    }
  },
  getActiveCaipNetworkId() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to get active caip network id");
      return void 0;
    }
  },
  deleteActiveCaipNetworkId() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    } catch {
      console.info("Unable to delete active caip network id");
    }
  },
  deleteConnectedConnectorId(namespace) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.removeItem(key);
    } catch {
      console.info("Unable to delete connected connector id");
    }
  },
  setAppKitRecent(wallet) {
    try {
      const recentWallets = StorageUtil.getRecentWallets();
      const exists = recentWallets.find((w2) => w2.id === wallet.id);
      if (!exists) {
        recentWallets.unshift(wallet);
        if (recentWallets.length > 2) {
          recentWallets.pop();
        }
        SafeLocalStorage.setItem(SafeLocalStorageKeys.RECENT_WALLETS, JSON.stringify(recentWallets));
      }
    } catch {
      console.info("Unable to set AppKit recent");
    }
  },
  getRecentWallets() {
    try {
      const recent = SafeLocalStorage.getItem(SafeLocalStorageKeys.RECENT_WALLETS);
      return recent ? JSON.parse(recent) : [];
    } catch {
      console.info("Unable to get AppKit recent");
    }
    return [];
  },
  setConnectedConnectorId(namespace, connectorId) {
    try {
      const key = getSafeConnectorIdKey(namespace);
      SafeLocalStorage.setItem(key, connectorId);
    } catch {
      console.info("Unable to set Connected Connector Id");
    }
  },
  getActiveNamespace() {
    try {
      const activeNamespace = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_NAMESPACE);
      return activeNamespace;
    } catch {
      console.info("Unable to get active namespace");
    }
    return void 0;
  },
  getConnectedConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    try {
      const key = getSafeConnectorIdKey(namespace);
      return SafeLocalStorage.getItem(key);
    } catch (e2) {
      console.info("Unable to get connected connector id in namespace ", namespace);
    }
    return void 0;
  },
  setConnectedSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_SOCIAL, socialProvider);
    } catch {
      console.info("Unable to set connected social provider");
    }
  },
  getConnectedSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to get connected social provider");
    }
    return void 0;
  },
  deleteConnectedSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.CONNECTED_SOCIAL);
    } catch {
      console.info("Unable to delete connected social provider");
    }
  },
  getConnectedSocialUsername() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_SOCIAL_USERNAME);
    } catch {
      console.info("Unable to get connected social username");
    }
    return void 0;
  },
  getStoredActiveCaipNetworkId() {
    var _a;
    const storedCaipNetworkId = SafeLocalStorage.getItem(SafeLocalStorageKeys.ACTIVE_CAIP_NETWORK_ID);
    const networkId = (_a = storedCaipNetworkId == null ? void 0 : storedCaipNetworkId.split(":")) == null ? void 0 : _a[1];
    return networkId;
  },
  setConnectionStatus(status) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTION_STATUS, status);
    } catch {
      console.info("Unable to set connection status");
    }
  },
  getConnectionStatus() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTION_STATUS);
    } catch {
      return void 0;
    }
  },
  getConnectedNamespaces() {
    try {
      const namespaces = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES);
      if (!(namespaces == null ? void 0 : namespaces.length)) {
        return [];
      }
      return namespaces.split(",");
    } catch {
      return [];
    }
  },
  setConnectedNamespaces(namespaces) {
    try {
      const uniqueNamespaces = Array.from(new Set(namespaces));
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTED_NAMESPACES, uniqueNamespaces.join(","));
    } catch {
      console.info("Unable to set namespaces in storage");
    }
  },
  addConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      if (!namespaces.includes(namespace)) {
        namespaces.push(namespace);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to add connected namespace");
    }
  },
  removeConnectedNamespace(namespace) {
    try {
      const namespaces = StorageUtil.getConnectedNamespaces();
      const index = namespaces.indexOf(namespace);
      if (index > -1) {
        namespaces.splice(index, 1);
        StorageUtil.setConnectedNamespaces(namespaces);
      }
    } catch {
      console.info("Unable to remove connected namespace");
    }
  },
  getTelegramSocialProvider() {
    try {
      return SafeLocalStorage.getItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to get telegram social provider");
      return null;
    }
  },
  setTelegramSocialProvider(socialProvider) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER, socialProvider);
    } catch {
      console.info("Unable to set telegram social provider");
    }
  },
  removeTelegramSocialProvider() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.TELEGRAM_SOCIAL_PROVIDER);
    } catch {
      console.info("Unable to remove telegram social provider");
    }
  },
  getBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      const balanceCache = cache[caipAddress];
      if (balanceCache && !this.isCacheExpired(balanceCache.timestamp, this.cacheExpiry.portfolio)) {
        return balanceCache.balance;
      }
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateBalanceCache(params) {
    try {
      const cache = StorageUtil.getBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PORTFOLIO_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getNativeBalanceCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get balance cache");
    }
    return cache;
  },
  removeAddressFromNativeBalanceCache(caipAddress) {
    try {
      const cache = StorageUtil.getBalanceCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify({ ...cache, [caipAddress]: void 0 }));
    } catch {
      console.info("Unable to remove address from balance cache", caipAddress);
    }
  },
  getNativeBalanceCacheForCaipAddress(caipAddress) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      const nativeBalanceCache = cache[caipAddress];
      if (nativeBalanceCache && !this.isCacheExpired(nativeBalanceCache.timestamp, this.cacheExpiry.nativeBalance)) {
        return nativeBalanceCache;
      }
      console.info("Discarding cache for address", caipAddress);
      StorageUtil.removeAddressFromBalanceCache(caipAddress);
    } catch {
      console.info("Unable to get balance cache for address", caipAddress);
    }
    return void 0;
  },
  updateNativeBalanceCache(params) {
    try {
      const cache = StorageUtil.getNativeBalanceCache();
      cache[params.caipAddress] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update balance cache", params);
    }
  },
  getEnsCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.ENS_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get ens name cache");
    }
    return cache;
  },
  getEnsFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      const ensCache = cache[address];
      if (ensCache && !this.isCacheExpired(ensCache.timestamp, this.cacheExpiry.ens)) {
        return ensCache.ens;
      }
      StorageUtil.removeEnsFromCache(address);
    } catch {
      console.info("Unable to get ens name from cache", address);
    }
    return void 0;
  },
  updateEnsCache(params) {
    try {
      const cache = StorageUtil.getEnsCache();
      cache[params.address] = params;
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update ens name cache", params);
    }
  },
  removeEnsFromCache(address) {
    try {
      const cache = StorageUtil.getEnsCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.ENS_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove ens name from cache", address);
    }
  },
  getIdentityCache() {
    let cache = {};
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.IDENTITY_CACHE);
      cache = result ? JSON.parse(result) : {};
    } catch {
      console.info("Unable to get identity cache");
    }
    return cache;
  },
  getIdentityFromCacheForAddress(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      const identityCache = cache[address];
      if (identityCache && !this.isCacheExpired(identityCache.timestamp, this.cacheExpiry.identity)) {
        return identityCache.identity;
      }
      StorageUtil.removeIdentityFromCache(address);
    } catch {
      console.info("Unable to get identity from cache", address);
    }
    return void 0;
  },
  updateIdentityCache(params) {
    try {
      const cache = StorageUtil.getIdentityCache();
      cache[params.address] = {
        identity: params.identity,
        timestamp: params.timestamp
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify(cache));
    } catch {
      console.info("Unable to update identity cache", params);
    }
  },
  removeIdentityFromCache(address) {
    try {
      const cache = StorageUtil.getIdentityCache();
      SafeLocalStorage.setItem(SafeLocalStorageKeys.IDENTITY_CACHE, JSON.stringify({ ...cache, [address]: void 0 }));
    } catch {
      console.info("Unable to remove identity from cache", address);
    }
  },
  clearAddressCache() {
    try {
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.PORTFOLIO_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.NATIVE_BALANCE_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.ENS_CACHE);
      SafeLocalStorage.removeItem(SafeLocalStorageKeys.IDENTITY_CACHE);
    } catch {
      console.info("Unable to clear address cache");
    }
  },
  setPreferredAccountTypes(accountTypes) {
    try {
      SafeLocalStorage.setItem(SafeLocalStorageKeys.PREFERRED_ACCOUNT_TYPES, JSON.stringify(accountTypes));
    } catch {
      console.info("Unable to set preferred account types", accountTypes);
    }
  },
  getPreferredAccountTypes() {
    try {
      const result = SafeLocalStorage.getItem(SafeLocalStorageKeys.PREFERRED_ACCOUNT_TYPES);
      if (!result) {
        return {};
      }
      return JSON.parse(result);
    } catch {
      console.info("Unable to get preferred account types");
    }
    return {};
  },
  setConnections(connections, chainNamespace) {
    try {
      const newConnections = {
        ...StorageUtil.getConnections(),
        [chainNamespace]: connections
      };
      SafeLocalStorage.setItem(SafeLocalStorageKeys.CONNECTIONS, JSON.stringify(newConnections));
    } catch (error) {
      console.error("Unable to sync connections to storage", error);
    }
  },
  getConnections() {
    try {
      const connectionsStorage = SafeLocalStorage.getItem(SafeLocalStorageKeys.CONNECTIONS);
      if (!connectionsStorage) {
        return {};
      }
      return JSON.parse(connectionsStorage);
    } catch (error) {
      console.error("Unable to get connections from storage", error);
      return {};
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ConstantsUtil.js
var SECURE_SITE = (
  // eslint-disable-next-line @typescript-eslint/prefer-optional-chain
  (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org"
);
var ONRAMP_PROVIDERS = [
  {
    label: "Coinbase",
    name: "coinbase",
    feeRange: "1-2%",
    url: "",
    supportedChains: ["eip155"]
  },
  {
    label: "Meld.io",
    name: "meld",
    feeRange: "1-2%",
    url: "https://meldcrypto.com",
    supportedChains: ["eip155", "solana"]
  }
];
var MELD_PUBLIC_KEY = "WXETMuFUQmqqybHuRkSgxv:25B8LJHSfpG6LVjR2ytU5Cwh7Z4Sch2ocoU";
var ConstantsUtil2 = {
  FOUR_MINUTES_MS: 24e4,
  TEN_SEC_MS: 1e4,
  FIVE_SEC_MS: 5e3,
  THREE_SEC_MS: 3e3,
  ONE_SEC_MS: 1e3,
  SECURE_SITE,
  SECURE_SITE_DASHBOARD: `${SECURE_SITE}/dashboard`,
  SECURE_SITE_FAVICON: `${SECURE_SITE}/images/favicon.png`,
  RESTRICTED_TIMEZONES: [
    "ASIA/SHANGHAI",
    "ASIA/URUMQI",
    "ASIA/CHONGQING",
    "ASIA/HARBIN",
    "ASIA/KASHGAR",
    "ASIA/MACAU",
    "ASIA/HONG_KONG",
    "ASIA/MACAO",
    "ASIA/BEIJING",
    "ASIA/HARBIN"
  ],
  /**
   * Network name to Coinbase Pay SDK chain name map object
   * @see supported chain names on Coinbase for Pay SDK: https://github.com/coinbase/cbpay-js/blob/d4bda2c05c4d5917c8db6a05476b603546046394/src/types/onramp.ts
   */
  WC_COINBASE_PAY_SDK_CHAINS: [
    "ethereum",
    "arbitrum",
    "polygon",
    "berachain",
    "avalanche-c-chain",
    "optimism",
    "celo",
    "base"
  ],
  WC_COINBASE_PAY_SDK_FALLBACK_CHAIN: "ethereum",
  WC_COINBASE_PAY_SDK_CHAIN_NAME_MAP: {
    Ethereum: "ethereum",
    "Arbitrum One": "arbitrum",
    Polygon: "polygon",
    Berachain: "berachain",
    Avalanche: "avalanche-c-chain",
    "OP Mainnet": "optimism",
    Celo: "celo",
    Base: "base"
  },
  WC_COINBASE_ONRAMP_APP_ID: "bf18c88d-495a-463b-b249-0b9d3656cf5e",
  SWAP_SUGGESTED_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP"
  ],
  SWAP_POPULAR_TOKENS: [
    "ETH",
    "UNI",
    "1INCH",
    "AAVE",
    "SOL",
    "ADA",
    "AVAX",
    "DOT",
    "LINK",
    "NITRO",
    "GAIA",
    "MILK",
    "TRX",
    "NEAR",
    "GNO",
    "WBTC",
    "DAI",
    "WETH",
    "USDC",
    "USDT",
    "ARB",
    "BAL",
    "BICO",
    "CRV",
    "ENS",
    "MATIC",
    "OP",
    "METAL",
    "DAI",
    "CHAMP",
    "WOLF",
    "SALE",
    "BAL",
    "BUSD",
    "MUST",
    "BTCpx",
    "ROUTE",
    "HEX",
    "WELT",
    "amDAI",
    "VSQ",
    "VISION",
    "AURUM",
    "pSP",
    "SNX",
    "VC",
    "LINK",
    "CHP",
    "amUSDT",
    "SPHERE",
    "FOX",
    "GIDDY",
    "GFC",
    "OMEN",
    "OX_OLD",
    "DE",
    "WNT"
  ],
  BALANCE_SUPPORTED_CHAINS: ["eip155", "solana"],
  SWAP_SUPPORTED_NETWORKS: [
    // Ethereum'
    "eip155:1",
    // Arbitrum One'
    "eip155:42161",
    // Optimism'
    "eip155:10",
    // ZKSync Era'
    "eip155:324",
    // Base'
    "eip155:8453",
    // BNB Smart Chain'
    "eip155:56",
    // Polygon'
    "eip155:137",
    // Gnosis'
    "eip155:100",
    // Avalanche'
    "eip155:43114",
    // Fantom'
    "eip155:250",
    // Klaytn'
    "eip155:8217",
    // Aurora
    "eip155:1313161554"
  ],
  NAMES_SUPPORTED_CHAIN_NAMESPACES: ["eip155"],
  ONRAMP_SUPPORTED_CHAIN_NAMESPACES: ["eip155", "solana"],
  ACTIVITY_ENABLED_CHAIN_NAMESPACES: ["eip155"],
  NATIVE_TOKEN_ADDRESS: {
    eip155: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    solana: "So11111111111111111111111111111111111111111",
    polkadot: "0x",
    bip122: "0x",
    cosmos: "0x"
  },
  CONVERT_SLIPPAGE_TOLERANCE: 1,
  CONNECT_LABELS: {
    MOBILE: "Open and continue in the wallet app",
    WEB: "Open and continue in the wallet app"
  },
  SEND_SUPPORTED_NAMESPACES: ["eip155", "solana"],
  DEFAULT_REMOTE_FEATURES: {
    swaps: ["1inch"],
    onramp: ["coinbase", "meld"],
    email: true,
    socials: [
      "google",
      "x",
      "discord",
      "farcaster",
      "github",
      "apple",
      "facebook"
    ],
    activity: true,
    reownBranding: true
  },
  DEFAULT_REMOTE_FEATURES_DISABLED: {
    email: false,
    socials: false,
    swaps: false,
    onramp: false,
    activity: false,
    reownBranding: false
  },
  DEFAULT_FEATURES: {
    receive: true,
    send: true,
    emailShowWallets: true,
    connectorTypeOrder: [
      "walletConnect",
      "recent",
      "injected",
      "featured",
      "custom",
      "external",
      "recommended"
    ],
    analytics: true,
    allWallets: true,
    legalCheckbox: false,
    smartSessions: false,
    collapseWallets: false,
    walletFeaturesOrder: ["onramp", "swaps", "receive", "send"],
    connectMethodsOrder: void 0,
    pay: false
  },
  DEFAULT_SOCIALS: [
    "google",
    "x",
    "farcaster",
    "discord",
    "apple",
    "github",
    "facebook"
  ],
  DEFAULT_ACCOUNT_TYPES: {
    bip122: "payment",
    eip155: "smartAccount",
    polkadot: "eoa",
    solana: "eoa"
  },
  ADAPTER_TYPES: {
    UNIVERSAL: "universal",
    SOLANA: "solana",
    WAGMI: "wagmi",
    ETHERS: "ethers",
    ETHERS5: "ethers5",
    BITCOIN: "bitcoin"
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/CoreHelperUtil.js
var CoreHelperUtil = {
  isMobile() {
    var _a;
    if (this.isClient()) {
      return Boolean(typeof (window == null ? void 0 : window.matchMedia) === "function" && ((_a = window == null ? void 0 : window.matchMedia("(pointer:coarse)")) == null ? void 0 : _a.matches) || /Android|webOS|iPhone|iPad|iPod|BlackBerry|Opera Mini/u.test(navigator.userAgent));
    }
    return false;
  },
  checkCaipNetwork(network, networkName = "") {
    return network == null ? void 0 : network.caipNetworkId.toLocaleLowerCase().includes(networkName.toLowerCase());
  },
  isAndroid() {
    if (!this.isMobile()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return CoreHelperUtil.isMobile() && ua2.includes("android");
  },
  isIos() {
    if (!this.isMobile()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("iphone") || ua2.includes("ipad");
  },
  isSafari() {
    if (!this.isClient()) {
      return false;
    }
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("safari");
  },
  isClient() {
    return typeof window !== "undefined";
  },
  isPairingExpired(expiry) {
    return expiry ? expiry - Date.now() <= ConstantsUtil2.TEN_SEC_MS : true;
  },
  isAllowedRetry(lastRetry, differenceMs = ConstantsUtil2.ONE_SEC_MS) {
    return Date.now() - lastRetry >= differenceMs;
  },
  copyToClopboard(text) {
    navigator.clipboard.writeText(text);
  },
  isIframe() {
    try {
      return (window == null ? void 0 : window.self) !== (window == null ? void 0 : window.top);
    } catch (e2) {
      return false;
    }
  },
  isSafeApp() {
    var _a, _b;
    if (CoreHelperUtil.isClient() && window.self !== window.top) {
      try {
        const ancestor = (_b = (_a = window == null ? void 0 : window.location) == null ? void 0 : _a.ancestorOrigins) == null ? void 0 : _b[0];
        const safeAppUrl = "https://app.safe.global";
        if (ancestor) {
          const ancestorUrl = new URL(ancestor);
          const safeUrl = new URL(safeAppUrl);
          return ancestorUrl.hostname === safeUrl.hostname;
        }
      } catch {
        return false;
      }
    }
    return false;
  },
  getPairingExpiry() {
    return Date.now() + ConstantsUtil2.FOUR_MINUTES_MS;
  },
  getNetworkId(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[1];
  },
  getPlainAddress(caipAddress) {
    return caipAddress == null ? void 0 : caipAddress.split(":")[2];
  },
  async wait(milliseconds) {
    return new Promise((resolve) => {
      setTimeout(resolve, milliseconds);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  debounce(func, timeout = 500) {
    let timer = void 0;
    return (...args) => {
      function next() {
        func(...args);
      }
      if (timer) {
        clearTimeout(timer);
      }
      timer = setTimeout(next, timeout);
    };
  },
  isHttpUrl(url) {
    return url.startsWith("http://") || url.startsWith("https://");
  },
  formatNativeUrl(appUrl, wcUri, universalLink = null) {
    if (CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatUniversalUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    let safeUniversalLink = universalLink;
    if (!safeAppUrl.includes("://")) {
      safeAppUrl = appUrl.replaceAll("/", "").replaceAll(":", "");
      safeAppUrl = `${safeAppUrl}://`;
    }
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    if (safeUniversalLink && !(safeUniversalLink == null ? void 0 : safeUniversalLink.endsWith("/"))) {
      safeUniversalLink = `${safeUniversalLink}/`;
    }
    if (this.isTelegram() && this.isAndroid()) {
      wcUri = encodeURIComponent(wcUri);
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      redirectUniversalLink: safeUniversalLink ? `${safeUniversalLink}wc?uri=${encodedWcUrl}` : void 0,
      href: safeAppUrl
    };
  },
  formatUniversalUrl(appUrl, wcUri) {
    if (!CoreHelperUtil.isHttpUrl(appUrl)) {
      return this.formatNativeUrl(appUrl, wcUri);
    }
    let safeAppUrl = appUrl;
    if (!safeAppUrl.endsWith("/")) {
      safeAppUrl = `${safeAppUrl}/`;
    }
    const encodedWcUrl = encodeURIComponent(wcUri);
    return {
      redirect: `${safeAppUrl}wc?uri=${encodedWcUrl}`,
      href: safeAppUrl
    };
  },
  getOpenTargetForPlatform(target) {
    if (target === "popupWindow") {
      return target;
    }
    if (this.isTelegram()) {
      if (StorageUtil.getTelegramSocialProvider()) {
        return "_top";
      }
      return "_blank";
    }
    return target;
  },
  openHref(href, target, features) {
    window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  returnOpenHref(href, target, features) {
    return window == null ? void 0 : window.open(href, this.getOpenTargetForPlatform(target), features || "noreferrer noopener");
  },
  isTelegram() {
    return typeof window !== "undefined" && // eslint-disable-next-line @typescript-eslint/no-explicit-any
    (Boolean(window.TelegramWebviewProxy) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.Telegram) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Boolean(window.TelegramWebviewProxyProto));
  },
  isPWA() {
    var _a, _b, _c2;
    if (typeof window === "undefined") {
      return false;
    }
    const isStandaloneDisplayMode = (_b = (_a = window.matchMedia) == null ? void 0 : _a.call(window, "(display-mode: standalone)")) == null ? void 0 : _b.matches;
    const isIOSStandalone = (_c2 = window == null ? void 0 : window.navigator) == null ? void 0 : _c2.standalone;
    return Boolean(isStandaloneDisplayMode || isIOSStandalone);
  },
  async preloadImage(src) {
    const imagePromise = new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = resolve;
      image.onerror = reject;
      image.crossOrigin = "anonymous";
      image.src = src;
    });
    return Promise.race([imagePromise, CoreHelperUtil.wait(2e3)]);
  },
  formatBalance(balance, symbol) {
    let formattedBalance = "0.000";
    if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        const formattedValue = Math.floor(number * 1e3) / 1e3;
        if (formattedValue) {
          formattedBalance = formattedValue.toString();
        }
      }
    }
    return `${formattedBalance}${symbol ? ` ${symbol}` : ""}`;
  },
  formatBalance2(balance, symbol) {
    var _a;
    let formattedBalance = void 0;
    if (balance === "0") {
      formattedBalance = "0";
    } else if (typeof balance === "string") {
      const number = Number(balance);
      if (number) {
        formattedBalance = (_a = number.toString().match(/^-?\d+(?:\.\d{0,3})?/u)) == null ? void 0 : _a[0];
      }
    }
    return {
      value: formattedBalance ?? "0",
      rest: formattedBalance === "0" ? "000" : "",
      symbol
    };
  },
  getApiUrl() {
    return ConstantsUtil.W3M_API_URL;
  },
  getBlockchainApiUrl() {
    return ConstantsUtil.BLOCKCHAIN_API_RPC_URL;
  },
  getAnalyticsUrl() {
    return ConstantsUtil.PULSE_API_URL;
  },
  getUUID() {
    if (crypto == null ? void 0 : crypto.randomUUID) {
      return crypto.randomUUID();
    }
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (c4) => {
      const r2 = Math.random() * 16 | 0;
      const v4 = c4 === "x" ? r2 : r2 & 3 | 8;
      return v4.toString(16);
    });
  },
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  parseError(error) {
    var _a, _b;
    if (typeof error === "string") {
      return error;
    } else if (typeof ((_b = (_a = error == null ? void 0 : error.issues) == null ? void 0 : _a[0]) == null ? void 0 : _b.message) === "string") {
      return error.issues[0].message;
    } else if (error instanceof Error) {
      return error.message;
    }
    return "Unknown error";
  },
  sortRequestedNetworks(approvedIds, requestedNetworks = []) {
    const approvedIndexMap = {};
    if (requestedNetworks && approvedIds) {
      approvedIds.forEach((id, index) => {
        approvedIndexMap[id] = index;
      });
      requestedNetworks.sort((a2, b4) => {
        const indexA = approvedIndexMap[a2.id];
        const indexB = approvedIndexMap[b4.id];
        if (indexA !== void 0 && indexB !== void 0) {
          return indexA - indexB;
        } else if (indexA !== void 0) {
          return -1;
        } else if (indexB !== void 0) {
          return 1;
        }
        return 0;
      });
    }
    return requestedNetworks;
  },
  calculateBalance(array) {
    let sum = 0;
    for (const item of array) {
      sum += item.value ?? 0;
    }
    return sum;
  },
  formatTokenBalance(number) {
    const roundedNumber = number.toFixed(2);
    const [dollars, pennies] = roundedNumber.split(".");
    return { dollars, pennies };
  },
  isAddress(address, chain = "eip155") {
    switch (chain) {
      case "eip155":
        if (!/^(?:0x)?[0-9a-f]{40}$/iu.test(address)) {
          return false;
        } else if (/^(?:0x)?[0-9a-f]{40}$/iu.test(address) || /^(?:0x)?[0-9A-F]{40}$/iu.test(address)) {
          return true;
        }
        return false;
      case "solana":
        return /[1-9A-HJ-NP-Za-km-z]{32,44}$/iu.test(address);
      default:
        return false;
    }
  },
  uniqueBy(arr, key) {
    const set = /* @__PURE__ */ new Set();
    return arr.filter((item) => {
      const keyValue = item[key];
      if (set.has(keyValue)) {
        return false;
      }
      set.add(keyValue);
      return true;
    });
  },
  generateSdkVersion(adapters, platform, version3) {
    const hasNoAdapters = adapters.length === 0;
    const adapterNames = hasNoAdapters ? ConstantsUtil2.ADAPTER_TYPES.UNIVERSAL : adapters.map((adapter) => adapter.adapterType).join(",");
    return `${platform}-${adapterNames}-${version3}`;
  },
  // eslint-disable-next-line max-params
  createAccount(namespace, address, type, publicKey, path) {
    return {
      namespace,
      address,
      type,
      publicKey,
      path
    };
  },
  isCaipAddress(address) {
    if (typeof address !== "string") {
      return false;
    }
    const sections = address.split(":");
    const namespace = sections[0];
    return sections.filter(Boolean).length === 3 && namespace in ConstantsUtil.CHAIN_NAME_MAP;
  },
  isMac() {
    const ua2 = window == null ? void 0 : window.navigator.userAgent.toLowerCase();
    return ua2.includes("macintosh") && !ua2.includes("safari");
  },
  formatTelegramSocialLoginUrl(url) {
    const valueToInject = `--${encodeURIComponent(window == null ? void 0 : window.location.href)}`;
    const paramToInject = "state=";
    const parsedUrl = new URL(url);
    if (parsedUrl.host === "auth.magic.link") {
      const providerParam = "provider_authorization_url=";
      const providerUrl = url.substring(url.indexOf(providerParam) + providerParam.length);
      const resultUrl = this.injectIntoUrl(decodeURIComponent(providerUrl), paramToInject, valueToInject);
      return url.replace(providerUrl, encodeURIComponent(resultUrl));
    }
    return this.injectIntoUrl(url, paramToInject, valueToInject);
  },
  injectIntoUrl(url, key, appendString) {
    const keyIndex = url.indexOf(key);
    if (keyIndex === -1) {
      throw new Error(`${key} parameter not found in the URL: ${url}`);
    }
    const keyEndIndex = url.indexOf("&", keyIndex);
    const keyLength = key.length;
    const keyParamEnd = keyEndIndex !== -1 ? keyEndIndex : url.length;
    const beforeKeyValue = url.substring(0, keyIndex + keyLength);
    const currentKeyValue = url.substring(keyIndex + keyLength, keyParamEnd);
    const afterKeyValue = url.substring(keyEndIndex);
    const newKeyValue = currentKeyValue + appendString;
    const newUrl = beforeKeyValue + newKeyValue + afterKeyValue;
    return newUrl;
  }
};

// node_modules/proxy-compare/dist/index.modern.js
var e = Symbol();
var t = Symbol();
var s = Object.getPrototypeOf;
var c = /* @__PURE__ */ new WeakMap();
var l = (e2) => e2 && (c.has(e2) ? c.get(e2) : s(e2) === Object.prototype || s(e2) === Array.prototype);
var y2 = (e2) => l(e2) && e2[t] || null;
var h2 = (e2, t2 = true) => {
  c.set(e2, t2);
};

// node_modules/valtio/esm/vanilla.mjs
var isObject = (x2) => typeof x2 === "object" && x2 !== null;
var proxyStateMap = /* @__PURE__ */ new WeakMap();
var refSet = /* @__PURE__ */ new WeakSet();
var buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler) => new Proxy(target, handler), canProxy = (x2) => isObject(x2) && !refSet.has(x2) && (Array.isArray(x2) || !(Symbol.iterator in x2)) && !(x2 instanceof WeakMap) && !(x2 instanceof WeakSet) && !(x2 instanceof Error) && !(x2 instanceof Number) && !(x2 instanceof Date) && !(x2 instanceof String) && !(x2 instanceof RegExp) && !(x2 instanceof ArrayBuffer), defaultHandlePromise = (promise) => {
  switch (promise.status) {
    case "fulfilled":
      return promise.value;
    case "rejected":
      throw promise.reason;
    default:
      throw promise;
  }
}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version3, handlePromise = defaultHandlePromise) => {
  const cache = snapCache.get(target);
  if ((cache == null ? void 0 : cache[0]) === version3) {
    return cache[1];
  }
  const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));
  h2(snap, true);
  snapCache.set(target, [version3, snap]);
  Reflect.ownKeys(target).forEach((key) => {
    if (Object.getOwnPropertyDescriptor(snap, key)) {
      return;
    }
    const value = Reflect.get(target, key);
    const { enumerable } = Reflect.getOwnPropertyDescriptor(
      target,
      key
    );
    const desc = {
      value,
      enumerable,
      // This is intentional to avoid copying with proxy-compare.
      // It's still non-writable, so it avoids assigning a value.
      configurable: true
    };
    if (refSet.has(value)) {
      h2(value, false);
    } else if (value instanceof Promise) {
      delete desc.value;
      desc.get = () => handlePromise(value);
    } else if (proxyStateMap.has(value)) {
      const [target2, ensureVersion] = proxyStateMap.get(
        value
      );
      desc.value = createSnapshot(
        target2,
        ensureVersion(),
        handlePromise
      );
    }
    Object.defineProperty(snap, key, desc);
  });
  return Object.preventExtensions(snap);
}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [1, 1], proxyFunction = (initialObject) => {
  if (!isObject(initialObject)) {
    throw new Error("object required");
  }
  const found = proxyCache.get(initialObject);
  if (found) {
    return found;
  }
  let version3 = versionHolder[0];
  const listeners = /* @__PURE__ */ new Set();
  const notifyUpdate = (op, nextVersion = ++versionHolder[0]) => {
    if (version3 !== nextVersion) {
      version3 = nextVersion;
      listeners.forEach((listener) => listener(op, nextVersion));
    }
  };
  let checkVersion = versionHolder[1];
  const ensureVersion = (nextCheckVersion = ++versionHolder[1]) => {
    if (checkVersion !== nextCheckVersion && !listeners.size) {
      checkVersion = nextCheckVersion;
      propProxyStates.forEach(([propProxyState]) => {
        const propVersion = propProxyState[1](nextCheckVersion);
        if (propVersion > version3) {
          version3 = propVersion;
        }
      });
    }
    return version3;
  };
  const createPropListener = (prop) => (op, nextVersion) => {
    const newOp = [...op];
    newOp[1] = [prop, ...newOp[1]];
    notifyUpdate(newOp, nextVersion);
  };
  const propProxyStates = /* @__PURE__ */ new Map();
  const addPropListener = (prop, propProxyState) => {
    if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && propProxyStates.has(prop)) {
      throw new Error("prop listener already exists");
    }
    if (listeners.size) {
      const remove = propProxyState[3](createPropListener(prop));
      propProxyStates.set(prop, [propProxyState, remove]);
    } else {
      propProxyStates.set(prop, [propProxyState]);
    }
  };
  const removePropListener = (prop) => {
    var _a;
    const entry = propProxyStates.get(prop);
    if (entry) {
      propProxyStates.delete(prop);
      (_a = entry[1]) == null ? void 0 : _a.call(entry);
    }
  };
  const addListener = (listener) => {
    listeners.add(listener);
    if (listeners.size === 1) {
      propProxyStates.forEach(([propProxyState, prevRemove], prop) => {
        if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && prevRemove) {
          throw new Error("remove already exists");
        }
        const remove = propProxyState[3](createPropListener(prop));
        propProxyStates.set(prop, [propProxyState, remove]);
      });
    }
    const removeListener = () => {
      listeners.delete(listener);
      if (listeners.size === 0) {
        propProxyStates.forEach(([propProxyState, remove], prop) => {
          if (remove) {
            remove();
            propProxyStates.set(prop, [propProxyState]);
          }
        });
      }
    };
    return removeListener;
  };
  const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));
  const handler = {
    deleteProperty(target, prop) {
      const prevValue = Reflect.get(target, prop);
      removePropListener(prop);
      const deleted = Reflect.deleteProperty(target, prop);
      if (deleted) {
        notifyUpdate(["delete", [prop], prevValue]);
      }
      return deleted;
    },
    set(target, prop, value, receiver) {
      const hasPrevValue = Reflect.has(target, prop);
      const prevValue = Reflect.get(target, prop, receiver);
      if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {
        return true;
      }
      removePropListener(prop);
      if (isObject(value)) {
        value = y2(value) || value;
      }
      let nextValue = value;
      if (value instanceof Promise) {
        value.then((v4) => {
          value.status = "fulfilled";
          value.value = v4;
          notifyUpdate(["resolve", [prop], v4]);
        }).catch((e2) => {
          value.status = "rejected";
          value.reason = e2;
          notifyUpdate(["reject", [prop], e2]);
        });
      } else {
        if (!proxyStateMap.has(value) && canProxy(value)) {
          nextValue = proxyFunction(value);
        }
        const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);
        if (childProxyState) {
          addPropListener(prop, childProxyState);
        }
      }
      Reflect.set(target, prop, nextValue, receiver);
      notifyUpdate(["set", [prop], value, prevValue]);
      return true;
    }
  };
  const proxyObject = newProxy(baseObject, handler);
  proxyCache.set(initialObject, proxyObject);
  const proxyState = [
    baseObject,
    ensureVersion,
    createSnapshot,
    addListener
  ];
  proxyStateMap.set(proxyObject, proxyState);
  Reflect.ownKeys(initialObject).forEach((key) => {
    const desc = Object.getOwnPropertyDescriptor(
      initialObject,
      key
    );
    if ("value" in desc) {
      proxyObject[key] = initialObject[key];
      delete desc.value;
      delete desc.writable;
    }
    Object.defineProperty(baseObject, key, desc);
  });
  return proxyObject;
}) => [
  // public functions
  proxyFunction,
  // shared state
  proxyStateMap,
  refSet,
  // internal things
  objectIs,
  newProxy,
  canProxy,
  defaultHandlePromise,
  snapCache,
  createSnapshot,
  proxyCache,
  versionHolder
];
var [defaultProxyFunction] = buildProxyFunction();
function proxy(initialObject = {}) {
  return defaultProxyFunction(initialObject);
}
function subscribe(proxyObject, callback, notifyInSync) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  let promise;
  const ops = [];
  const addListener = proxyState[3];
  let isListenerActive = false;
  const listener = (op) => {
    ops.push(op);
    if (notifyInSync) {
      callback(ops.splice(0));
      return;
    }
    if (!promise) {
      promise = Promise.resolve().then(() => {
        promise = void 0;
        if (isListenerActive) {
          callback(ops.splice(0));
        }
      });
    }
  };
  const removeListener = addListener(listener);
  isListenerActive = true;
  return () => {
    isListenerActive = false;
    removeListener();
  };
}
function snapshot(proxyObject, handlePromise) {
  const proxyState = proxyStateMap.get(proxyObject);
  if ((import.meta.env ? import.meta.env.MODE : void 0) !== "production" && !proxyState) {
    console.warn("Please use proxy object");
  }
  const [target, ensureVersion, createSnapshot] = proxyState;
  return createSnapshot(target, ensureVersion(), handlePromise);
}
function ref(obj) {
  refSet.add(obj);
  return obj;
}

// node_modules/valtio/esm/vanilla/utils.mjs
function subscribeKey(proxyObject, key, callback, notifyInSync) {
  let prevValue = proxyObject[key];
  return subscribe(
    proxyObject,
    () => {
      const nextValue = proxyObject[key];
      if (!Object.is(prevValue, nextValue)) {
        callback(prevValue = nextValue);
      }
    },
    notifyInSync
  );
}
var DEVTOOLS = Symbol();
function proxyMap(entries2) {
  const map = proxy({
    data: Array.from(entries2 || []),
    has(key) {
      return this.data.some((p3) => p3[0] === key);
    },
    set(key, value) {
      const record = this.data.find((p3) => p3[0] === key);
      if (record) {
        record[1] = value;
      } else {
        this.data.push([key, value]);
      }
      return this;
    },
    get(key) {
      var _a;
      return (_a = this.data.find((p3) => p3[0] === key)) == null ? void 0 : _a[1];
    },
    delete(key) {
      const index = this.data.findIndex((p3) => p3[0] === key);
      if (index === -1) {
        return false;
      }
      this.data.splice(index, 1);
      return true;
    },
    clear() {
      this.data.splice(0);
    },
    get size() {
      return this.data.length;
    },
    toJSON() {
      return new Map(this.data);
    },
    forEach(cb) {
      this.data.forEach((p3) => {
        cb(p3[1], p3[0], this);
      });
    },
    keys() {
      return this.data.map((p3) => p3[0]).values();
    },
    values() {
      return this.data.map((p3) => p3[1]).values();
    },
    entries() {
      return new Map(this.data).entries();
    },
    get [Symbol.toStringTag]() {
      return "Map";
    },
    [Symbol.iterator]() {
      return this.entries();
    }
  });
  Object.defineProperties(map, {
    data: {
      enumerable: false
    },
    size: {
      enumerable: false
    },
    toJSON: {
      enumerable: false
    }
  });
  Object.seal(map);
  return map;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/OptionsUtil.js
var OptionsUtil = {
  getFeatureValue(key, features) {
    const optionValue = features == null ? void 0 : features[key];
    if (optionValue === void 0) {
      return ConstantsUtil2.DEFAULT_FEATURES[key];
    }
    return optionValue;
  },
  filterSocialsByPlatform(socials) {
    if (!socials || !socials.length) {
      return socials;
    }
    if (CoreHelperUtil.isTelegram()) {
      if (CoreHelperUtil.isIos()) {
        return socials.filter((s2) => s2 !== "google");
      }
      if (CoreHelperUtil.isMac()) {
        return socials.filter((s2) => s2 !== "x");
      }
      if (CoreHelperUtil.isAndroid()) {
        return socials.filter((s2) => !["facebook", "x"].includes(s2));
      }
    }
    return socials;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsController.js
var state = proxy({
  features: ConstantsUtil2.DEFAULT_FEATURES,
  projectId: "",
  sdkType: "appkit",
  sdkVersion: "html-wagmi-undefined",
  defaultAccountTypes: ConstantsUtil2.DEFAULT_ACCOUNT_TYPES,
  enableNetworkSwitch: true,
  experimental_preferUniversalLinks: false,
  remoteFeatures: {}
});
var OptionsController = {
  state,
  subscribeKey(key, callback) {
    return subscribeKey(state, key, callback);
  },
  setOptions(options) {
    Object.assign(state, options);
  },
  setRemoteFeatures(remoteFeatures) {
    var _a;
    if (!remoteFeatures) {
      return;
    }
    const newRemoteFeatures = { ...state.remoteFeatures, ...remoteFeatures };
    state.remoteFeatures = newRemoteFeatures;
    if ((_a = state.remoteFeatures) == null ? void 0 : _a.socials) {
      state.remoteFeatures.socials = OptionsUtil.filterSocialsByPlatform(state.remoteFeatures.socials);
    }
  },
  setFeatures(features) {
    if (!features) {
      return;
    }
    if (!state.features) {
      state.features = ConstantsUtil2.DEFAULT_FEATURES;
    }
    const newFeatures = { ...state.features, ...features };
    state.features = newFeatures;
  },
  setProjectId(projectId) {
    state.projectId = projectId;
  },
  setCustomRpcUrls(customRpcUrls) {
    state.customRpcUrls = customRpcUrls;
  },
  setAllWallets(allWallets) {
    state.allWallets = allWallets;
  },
  setIncludeWalletIds(includeWalletIds) {
    state.includeWalletIds = includeWalletIds;
  },
  setExcludeWalletIds(excludeWalletIds) {
    state.excludeWalletIds = excludeWalletIds;
  },
  setFeaturedWalletIds(featuredWalletIds) {
    state.featuredWalletIds = featuredWalletIds;
  },
  setTokens(tokens) {
    state.tokens = tokens;
  },
  setTermsConditionsUrl(termsConditionsUrl) {
    state.termsConditionsUrl = termsConditionsUrl;
  },
  setPrivacyPolicyUrl(privacyPolicyUrl) {
    state.privacyPolicyUrl = privacyPolicyUrl;
  },
  setCustomWallets(customWallets) {
    state.customWallets = customWallets;
  },
  setIsSiweEnabled(isSiweEnabled) {
    state.isSiweEnabled = isSiweEnabled;
  },
  setIsUniversalProvider(isUniversalProvider) {
    state.isUniversalProvider = isUniversalProvider;
  },
  setSdkVersion(sdkVersion) {
    state.sdkVersion = sdkVersion;
  },
  setMetadata(metadata) {
    state.metadata = metadata;
  },
  setDisableAppend(disableAppend) {
    state.disableAppend = disableAppend;
  },
  setEIP6963Enabled(enableEIP6963) {
    state.enableEIP6963 = enableEIP6963;
  },
  setDebug(debug) {
    state.debug = debug;
  },
  setEnableWalletConnect(enableWalletConnect) {
    state.enableWalletConnect = enableWalletConnect;
  },
  setEnableWalletGuide(enableWalletGuide) {
    state.enableWalletGuide = enableWalletGuide;
  },
  setEnableAuthLogger(enableAuthLogger) {
    state.enableAuthLogger = enableAuthLogger;
  },
  setEnableWallets(enableWallets) {
    state.enableWallets = enableWallets;
  },
  setPreferUniversalLinks(preferUniversalLinks) {
    state.experimental_preferUniversalLinks = preferUniversalLinks;
  },
  setHasMultipleAddresses(hasMultipleAddresses) {
    state.hasMultipleAddresses = hasMultipleAddresses;
  },
  setSIWX(siwx) {
    state.siwx = siwx;
  },
  setConnectMethodsOrder(connectMethodsOrder) {
    state.features = {
      ...state.features,
      connectMethodsOrder
    };
  },
  setWalletFeaturesOrder(walletFeaturesOrder) {
    state.features = {
      ...state.features,
      walletFeaturesOrder
    };
  },
  setSocialsOrder(socialsOrder) {
    state.remoteFeatures = {
      ...state.remoteFeatures,
      socials: socialsOrder
    };
  },
  setCollapseWallets(collapseWallets) {
    state.features = {
      ...state.features,
      collapseWallets
    };
  },
  setEnableEmbedded(enableEmbedded) {
    state.enableEmbedded = enableEmbedded;
  },
  setAllowUnsupportedChain(allowUnsupportedChain) {
    state.allowUnsupportedChain = allowUnsupportedChain;
  },
  setManualWCControl(manualWCControl) {
    state.manualWCControl = manualWCControl;
  },
  setEnableNetworkSwitch(enableNetworkSwitch) {
    state.enableNetworkSwitch = enableNetworkSwitch;
  },
  setDefaultAccountTypes(defaultAccountType = {}) {
    Object.entries(defaultAccountType).forEach(([namespace, accountType]) => {
      if (accountType) {
        state.defaultAccountTypes[namespace] = accountType;
      }
    });
  },
  setUniversalProviderConfigOverride(universalProviderConfigOverride) {
    state.universalProviderConfigOverride = universalProviderConfigOverride;
  },
  getUniversalProviderConfigOverride() {
    return state.universalProviderConfigOverride;
  },
  getSnapshot() {
    return snapshot(state);
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/FetchUtil.js
async function fetchData(...args) {
  const response = await fetch(...args);
  if (!response.ok) {
    const err = new Error(`HTTP status code: ${response.status}`, {
      cause: response
    });
    throw err;
  }
  return response;
}
var FetchUtil = class {
  constructor({ baseUrl: baseUrl4, clientId }) {
    this.baseUrl = baseUrl4;
    this.clientId = clientId;
  }
  async get({ headers, signal, cache, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal, cache });
    return response.json();
  }
  async getBlob({ headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, { method: "GET", headers, signal });
    return response.blob();
  }
  async post({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "POST",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async put({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "PUT",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  async delete({ body, headers, signal, ...args }) {
    const url = this.createUrl(args);
    const response = await fetchData(url, {
      method: "DELETE",
      headers,
      body: body ? JSON.stringify(body) : void 0,
      signal
    });
    return response.json();
  }
  createUrl({ path, params }) {
    const url = new URL(path, this.baseUrl);
    if (params) {
      Object.entries(params).forEach(([key, value]) => {
        if (value) {
          url.searchParams.append(key, value);
        }
      });
    }
    if (this.clientId) {
      url.searchParams.append("clientId", this.clientId);
    }
    return url;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TelemetryController.js
var DEFAULT_STATE = Object.freeze({
  enabled: true,
  events: []
});
var api = new FetchUtil({ baseUrl: CoreHelperUtil.getAnalyticsUrl(), clientId: null });
var MAX_ERRORS_PER_MINUTE = 5;
var ONE_MINUTE_MS = 60 * 1e3;
var state2 = proxy({
  ...DEFAULT_STATE
});
var TelemetryController = {
  state: state2,
  subscribeKey(key, callback) {
    return subscribeKey(state2, key, callback);
  },
  async sendError(error, category) {
    if (!state2.enabled) {
      return;
    }
    const now = Date.now();
    const recentErrors = state2.events.filter((event) => {
      const eventTime = new Date(event.properties.timestamp || "").getTime();
      return now - eventTime < ONE_MINUTE_MS;
    });
    if (recentErrors.length >= MAX_ERRORS_PER_MINUTE) {
      return;
    }
    const errorEvent = {
      type: "error",
      event: category,
      properties: {
        errorType: error.name,
        errorMessage: error.message,
        stackTrace: error.stack,
        timestamp: (/* @__PURE__ */ new Date()).toISOString()
      }
    };
    state2.events.push(errorEvent);
    try {
      if (typeof window === "undefined") {
        return;
      }
      const { projectId, sdkType, sdkVersion } = OptionsController.state;
      await api.post({
        path: "/e",
        params: {
          projectId,
          st: sdkType,
          sv: sdkVersion || "html-wagmi-4.2.2"
        },
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
          props: {
            type: "error",
            event: category,
            errorType: error.name,
            errorMessage: error.message,
            stackTrace: error.stack
          }
        }
      });
    } catch {
    }
  },
  enable() {
    state2.enabled = true;
  },
  disable() {
    state2.enabled = false;
  },
  clearEvents() {
    state2.events = [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/withErrorBoundary.js
var AppKitError = class _AppKitError extends Error {
  constructor(message, category, originalError) {
    super(message);
    this.name = "AppKitError";
    this.category = category;
    this.originalError = originalError;
    Object.setPrototypeOf(this, _AppKitError.prototype);
    let isStackConstructedFromOriginal = false;
    if (originalError instanceof Error && typeof originalError.stack === "string" && originalError.stack) {
      const originalErrorStack = originalError.stack;
      const firstNewlineIndex = originalErrorStack.indexOf("\n");
      if (firstNewlineIndex > -1) {
        const originalFrames = originalErrorStack.substring(firstNewlineIndex + 1);
        this.stack = `${this.name}: ${this.message}
${originalFrames}`;
        isStackConstructedFromOriginal = true;
      }
    }
    if (!isStackConstructedFromOriginal) {
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, _AppKitError);
      } else if (!this.stack) {
        this.stack = `${this.name}: ${this.message}`;
      }
    }
  }
};
function errorHandler(err, defaultCategory) {
  const error = err instanceof AppKitError ? err : new AppKitError(err instanceof Error ? err.message : String(err), defaultCategory, err);
  TelemetryController.sendError(error, error.category);
  throw error;
}
function withErrorBoundary(controller17, defaultCategory = "INTERNAL_SDK_ERROR") {
  const newController = {};
  Object.keys(controller17).forEach((key) => {
    const original = controller17[key];
    if (typeof original === "function") {
      let wrapped = original;
      if (original.constructor.name === "AsyncFunction") {
        wrapped = async (...args) => {
          try {
            return await original(...args);
          } catch (err) {
            return errorHandler(err, defaultCategory);
          }
        };
      } else {
        wrapped = (...args) => {
          try {
            return original(...args);
          } catch (err) {
            return errorHandler(err, defaultCategory);
          }
        };
      }
      newController[key] = wrapped;
    } else {
      newController[key] = original;
    }
  });
  return newController;
}

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AssetController.js
var state3 = proxy({
  walletImages: {},
  networkImages: {},
  chainImages: {},
  connectorImages: {},
  tokenImages: {},
  currencyImages: {}
});
var controller = {
  state: state3,
  subscribeNetworkImages(callback) {
    return subscribe(state3.networkImages, () => callback(state3.networkImages));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state3, key, callback);
  },
  subscribe(callback) {
    return subscribe(state3, () => callback(state3));
  },
  setWalletImage(key, value) {
    state3.walletImages[key] = value;
  },
  setNetworkImage(key, value) {
    state3.networkImages[key] = value;
  },
  setChainImage(key, value) {
    state3.chainImages[key] = value;
  },
  setConnectorImage(key, value) {
    state3.connectorImages = { ...state3.connectorImages, [key]: value };
  },
  setTokenImage(key, value) {
    state3.tokenImages[key] = value;
  },
  setCurrencyImage(key, value) {
    state3.currencyImages[key] = value;
  }
};
var AssetController = withErrorBoundary(controller);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/AssetUtil.js
var namespaceImageIds = {
  // Ethereum
  eip155: "ba0ba0cd-17c6-4806-ad93-f9d174f17900",
  // Solana
  solana: "a1b58899-f671-4276-6a5e-56ca5bd59700",
  // Polkadot
  polkadot: "",
  // Bitcoin
  bip122: "0b4838db-0161-4ffe-022d-532bf03dba00",
  // Cosmos
  cosmos: ""
};
var state4 = proxy({
  networkImagePromises: {}
});
var AssetUtil = {
  async fetchWalletImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    await ApiController._fetchWalletImage(imageId);
    return this.getWalletImageById(imageId);
  },
  async fetchNetworkImage(imageId) {
    if (!imageId) {
      return void 0;
    }
    const existingImage = this.getNetworkImageById(imageId);
    if (existingImage) {
      return existingImage;
    }
    if (!state4.networkImagePromises[imageId]) {
      state4.networkImagePromises[imageId] = ApiController._fetchNetworkImage(imageId);
    }
    await state4.networkImagePromises[imageId];
    return this.getNetworkImageById(imageId);
  },
  getWalletImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.walletImages[imageId];
  },
  getWalletImage(wallet) {
    if (wallet == null ? void 0 : wallet.image_url) {
      return wallet == null ? void 0 : wallet.image_url;
    }
    if (wallet == null ? void 0 : wallet.image_id) {
      return AssetController.state.walletImages[wallet.image_id];
    }
    return void 0;
  },
  getNetworkImage(network) {
    var _a, _b, _c2;
    if ((_a = network == null ? void 0 : network.assets) == null ? void 0 : _a.imageUrl) {
      return (_b = network == null ? void 0 : network.assets) == null ? void 0 : _b.imageUrl;
    }
    if ((_c2 = network == null ? void 0 : network.assets) == null ? void 0 : _c2.imageId) {
      return AssetController.state.networkImages[network.assets.imageId];
    }
    return void 0;
  },
  getNetworkImageById(imageId) {
    if (!imageId) {
      return void 0;
    }
    return AssetController.state.networkImages[imageId];
  },
  getConnectorImage(connector) {
    if (connector == null ? void 0 : connector.imageUrl) {
      return connector.imageUrl;
    }
    if (connector == null ? void 0 : connector.imageId) {
      return AssetController.state.connectorImages[connector.imageId];
    }
    return void 0;
  },
  getChainImage(chain) {
    return AssetController.state.networkImages[namespaceImageIds[chain]];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/MobileWallet.js
var CUSTOM_DEEPLINK_WALLETS = {
  PHANTOM: {
    id: "a797aa35c0fadbfc1a53e7f675162ed5226968b44a19ee3d24385c64d1d3c393",
    url: "https://phantom.app"
  },
  SOLFLARE: {
    id: "1ca0bdd4747578705b1939af023d120677c64fe6ca76add81fda36e350605e79",
    url: "https://solflare.com"
  },
  COINBASE: {
    id: "fd20dc426fb37566d803205b19bbc1d4096b248ac04548e3cfb6b3a38bd033aa",
    url: "https://go.cb-w.com"
  }
};
var MobileWalletUtil = {
  /**
   * Handles mobile wallet redirection for wallets that have Universal Links and doesn't support WalletConnect Deep Links.
   *
   * @param {string} id - The id of the wallet.
   * @param {ChainNamespace} namespace - The namespace of the chain.
   */
  handleMobileDeeplinkRedirect(id, namespace) {
    const href = window.location.href;
    const encodedHref = encodeURIComponent(href);
    if (id === CUSTOM_DEEPLINK_WALLETS.PHANTOM.id && !("phantom" in window)) {
      const protocol = href.startsWith("https") ? "https" : "http";
      const host = href.split("/")[2];
      const encodedRef = encodeURIComponent(`${protocol}://${host}`);
      window.location.href = `${CUSTOM_DEEPLINK_WALLETS.PHANTOM.url}/ul/browse/${encodedHref}?ref=${encodedRef}`;
    }
    if (id === CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id && !("solflare" in window)) {
      window.location.href = `${CUSTOM_DEEPLINK_WALLETS.SOLFLARE.url}/ul/v1/browse/${encodedHref}?ref=${encodedHref}`;
    }
    if (namespace === ConstantsUtil.CHAIN.SOLANA) {
      if (id === CUSTOM_DEEPLINK_WALLETS.COINBASE.id && !("coinbaseSolana" in window)) {
        window.location.href = `${CUSTOM_DEEPLINK_WALLETS.COINBASE.url}/dapp?cb_url=${encodedHref}`;
      }
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SnackController.js
var DEFAULT_STATE2 = Object.freeze({
  message: "",
  variant: "success",
  svg: void 0,
  open: false,
  autoClose: true
});
var state5 = proxy({
  ...DEFAULT_STATE2
});
var controller2 = {
  state: state5,
  subscribeKey(key, callback) {
    return subscribeKey(state5, key, callback);
  },
  showLoading(message, options = {}) {
    this._showMessage({ message, variant: "loading", ...options });
  },
  showSuccess(message) {
    this._showMessage({ message, variant: "success" });
  },
  showSvg(message, svg) {
    this._showMessage({ message, svg });
  },
  showError(message) {
    const errorMessage = CoreHelperUtil.parseError(message);
    this._showMessage({ message: errorMessage, variant: "error" });
  },
  hide() {
    state5.message = DEFAULT_STATE2.message;
    state5.variant = DEFAULT_STATE2.variant;
    state5.svg = DEFAULT_STATE2.svg;
    state5.open = DEFAULT_STATE2.open;
    state5.autoClose = DEFAULT_STATE2.autoClose;
  },
  _showMessage({ message, svg, variant = "success", autoClose = DEFAULT_STATE2.autoClose }) {
    if (state5.open) {
      state5.open = false;
      setTimeout(() => {
        state5.message = message;
        state5.variant = variant;
        state5.svg = svg;
        state5.open = true;
        state5.autoClose = autoClose;
      }, 150);
    } else {
      state5.message = message;
      state5.variant = variant;
      state5.svg = svg;
      state5.open = true;
      state5.autoClose = autoClose;
    }
  }
};
var SnackController = controller2;

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/BlockchainApiController.js
var DEFAULT_OPTIONS = {
  purchaseCurrencies: [
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "USD Coin",
      symbol: "USDC",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    },
    {
      id: "2b92315d-eab7-5bef-84fa-089a131333f5",
      name: "Ether",
      symbol: "ETH",
      networks: [
        {
          name: "ethereum-mainnet",
          display_name: "Ethereum",
          chain_id: "1",
          contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
        },
        {
          name: "polygon-mainnet",
          display_name: "Polygon",
          chain_id: "137",
          contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
        }
      ]
    }
  ],
  paymentCurrencies: [
    {
      id: "USD",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    },
    {
      id: "EUR",
      payment_method_limits: [
        {
          id: "card",
          min: "10.00",
          max: "7500.00"
        },
        {
          id: "ach_bank_account",
          min: "10.00",
          max: "25000.00"
        }
      ]
    }
  ]
};
var baseUrl = CoreHelperUtil.getBlockchainApiUrl();
var state6 = proxy({
  clientId: null,
  api: new FetchUtil({ baseUrl, clientId: null }),
  supportedChains: { http: [], ws: [] }
});
var BlockchainApiController = {
  state: state6,
  async get(request) {
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const projectId = OptionsController.state.projectId;
    const params = {
      ...request.params || {},
      st: st2,
      sv,
      projectId
    };
    return state6.api.get({
      ...request,
      params
    });
  },
  getSdkProperties() {
    const { sdkType, sdkVersion } = OptionsController.state;
    return {
      st: sdkType || "unknown",
      sv: sdkVersion || "unknown"
    };
  },
  async isNetworkSupported(networkId) {
    if (!networkId) {
      return false;
    }
    try {
      if (!state6.supportedChains.http.length) {
        await BlockchainApiController.getSupportedNetworks();
      }
    } catch (e2) {
      return false;
    }
    return state6.supportedChains.http.includes(networkId);
  },
  async getSupportedNetworks() {
    try {
      const supportedChains = await BlockchainApiController.get({
        path: "v1/supported-chains"
      });
      state6.supportedChains = supportedChains;
      return supportedChains;
    } catch {
      return state6.supportedChains;
    }
  },
  async fetchIdentity({ address, caipNetworkId }) {
    const isSupported = await BlockchainApiController.isNetworkSupported(caipNetworkId);
    if (!isSupported) {
      return { avatar: "", name: "" };
    }
    const identityCache = StorageUtil.getIdentityFromCacheForAddress(address);
    if (identityCache) {
      return identityCache;
    }
    const result = await BlockchainApiController.get({
      path: `/v1/identity/${address}`,
      params: {
        sender: ChainController.state.activeCaipAddress ? CoreHelperUtil.getPlainAddress(ChainController.state.activeCaipAddress) : void 0
      }
    });
    StorageUtil.updateIdentityCache({
      address,
      identity: result,
      timestamp: Date.now()
    });
    return result;
  },
  async fetchTransactions({ account, cursor, onramp, signal, cache, chainId }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { data: [], next: void 0 };
    }
    return BlockchainApiController.get({
      path: `/v1/account/${account}/history`,
      params: {
        cursor,
        onramp,
        chainId
      },
      signal,
      cache
    });
  },
  async fetchSwapQuote({ amount, userAddress, from: from6, to: to3, gasPrice }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { quotes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/quotes`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        amount,
        userAddress,
        from: from6,
        to: to3,
        gasPrice
      }
    });
  },
  async fetchSwapTokens({ chainId }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { tokens: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/tokens`,
      params: { chainId }
    });
  },
  async fetchTokenPrice({ addresses }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { fungibles: [] };
    }
    return state6.api.post({
      path: "/v1/fungible/price",
      body: {
        currency: "usd",
        addresses,
        projectId: OptionsController.state.projectId
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchSwapAllowance({ tokenAddress, userAddress }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { allowance: "0" };
    }
    return BlockchainApiController.get({
      path: `/v1/convert/allowance`,
      params: {
        tokenAddress,
        userAddress
      },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async fetchGasPrice({ chainId }) {
    var _a;
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Gas Price");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/gas-price`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        chainId,
        st: st2,
        sv
      }
    });
  },
  async generateSwapCalldata({ amount, from: from6, to: to3, userAddress, disableEstimate }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return state6.api.post({
      path: "/v1/convert/build-transaction",
      headers: {
        "Content-Type": "application/json"
      },
      body: {
        amount,
        eip155: {
          slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE
        },
        projectId: OptionsController.state.projectId,
        from: from6,
        to: to3,
        userAddress,
        disableEstimate
      }
    });
  },
  async generateApproveCalldata({ from: from6, to: to3, userAddress }) {
    var _a;
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      throw new Error("Network not supported for Swaps");
    }
    return BlockchainApiController.get({
      path: `/v1/convert/build-approve`,
      headers: {
        "Content-Type": "application/json"
      },
      params: {
        userAddress,
        from: from6,
        to: to3,
        st: st2,
        sv
      }
    });
  },
  async getBalance(address, chainId, forceUpdate) {
    var _a;
    const { st: st2, sv } = BlockchainApiController.getSdkProperties();
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      SnackController.showError("Token Balance Unavailable");
      return { balances: [] };
    }
    const caipAddress = `${chainId}:${address}`;
    const cachedBalance = StorageUtil.getBalanceCacheForCaipAddress(caipAddress);
    if (cachedBalance) {
      return cachedBalance;
    }
    const balance = await BlockchainApiController.get({
      path: `/v1/account/${address}/balance`,
      params: {
        currency: "usd",
        chainId,
        forceUpdate,
        st: st2,
        sv
      }
    });
    StorageUtil.updateBalanceCache({
      caipAddress,
      balance,
      timestamp: Date.now()
    });
    return balance;
  },
  async lookupEnsName(name) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { addresses: {}, attributes: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/account/${name}`,
      params: { apiVersion: "2" }
    });
  },
  async reverseLookupEnsName({ address }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/profile/reverse/${address}`,
      params: {
        sender: AccountController.state.address,
        apiVersion: "2"
      }
    });
  },
  async getEnsNameSuggestions(name) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { suggestions: [] };
    }
    return BlockchainApiController.get({
      path: `/v1/profile/suggestions/${name}`,
      params: { zone: "reown.id" }
    });
  },
  async registerEnsName({ coinType, address, message, signature }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state6.api.post({
      path: `/v1/profile/account`,
      body: { coin_type: coinType, address, message, signature },
      headers: {
        "Content-Type": "application/json"
      }
    });
  },
  async generateOnRampURL({ destinationWallets, partnerUserId, defaultNetwork, purchaseAmount, paymentAmount }) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return "";
    }
    const response = await state6.api.post({
      path: `/v1/generators/onrampurl`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        destinationWallets,
        defaultNetwork,
        partnerUserId,
        defaultExperience: "buy",
        presetCryptoAmount: purchaseAmount,
        presetFiatAmount: paymentAmount
      }
    });
    return response.url;
  },
  async getOnrampOptions() {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { paymentCurrencies: [], purchaseCurrencies: [] };
    }
    try {
      const response = await BlockchainApiController.get({
        path: `/v1/onramp/options`
      });
      return response;
    } catch (e2) {
      return DEFAULT_OPTIONS;
    }
  },
  async getOnrampQuote({ purchaseCurrency, paymentCurrency, amount, network }) {
    var _a;
    try {
      const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
      if (!isSupported) {
        return null;
      }
      const response = await state6.api.post({
        path: `/v1/onramp/quote`,
        params: {
          projectId: OptionsController.state.projectId
        },
        body: {
          purchaseCurrency,
          paymentCurrency,
          amount,
          network
        }
      });
      return response;
    } catch (e2) {
      return {
        coinbaseFee: { amount, currency: paymentCurrency.id },
        networkFee: { amount, currency: paymentCurrency.id },
        paymentSubtotal: { amount, currency: paymentCurrency.id },
        paymentTotal: { amount, currency: paymentCurrency.id },
        purchaseAmount: { amount, currency: paymentCurrency.id },
        quoteId: "mocked-quote-id"
      };
    }
  },
  async getSmartSessions(caipAddress) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return [];
    }
    return BlockchainApiController.get({
      path: `/v1/sessions/${caipAddress}`
    });
  },
  async revokeSmartSession(address, pci, signature) {
    var _a;
    const isSupported = await BlockchainApiController.isNetworkSupported((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    if (!isSupported) {
      return { success: false };
    }
    return state6.api.post({
      path: `/v1/sessions/${address}/revoke`,
      params: {
        projectId: OptionsController.state.projectId
      },
      body: {
        pci,
        signature
      }
    });
  },
  setClientId(clientId) {
    state6.clientId = clientId;
    state6.api = new FetchUtil({ baseUrl, clientId });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AccountController.js
var state7 = proxy({
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  allAccounts: []
});
var controller3 = {
  state: state7,
  replaceState(newState) {
    if (!newState) {
      return;
    }
    Object.assign(state7, ref(newState));
  },
  subscribe(callback) {
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        return callback(accountState2);
      }
      return void 0;
    });
  },
  subscribeKey(property, callback, chain) {
    let prev = void 0;
    return ChainController.subscribeChainProp("accountState", (accountState2) => {
      if (accountState2) {
        const nextValue = accountState2[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    }, chain);
  },
  setStatus(status, chain) {
    ChainController.setAccountProp("status", status, chain);
  },
  getCaipAddress(chain) {
    return ChainController.getAccountProp("caipAddress", chain);
  },
  setCaipAddress(caipAddress, chain) {
    const newAddress = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (chain === ChainController.state.activeChain) {
      ChainController.state.activeCaipAddress = caipAddress;
    }
    ChainController.setAccountProp("caipAddress", caipAddress, chain);
    ChainController.setAccountProp("address", newAddress, chain);
  },
  setBalance(balance, balanceSymbol, chain) {
    ChainController.setAccountProp("balance", balance, chain);
    ChainController.setAccountProp("balanceSymbol", balanceSymbol, chain);
  },
  setProfileName(profileName, chain) {
    ChainController.setAccountProp("profileName", profileName, chain);
  },
  setProfileImage(profileImage, chain) {
    ChainController.setAccountProp("profileImage", profileImage, chain);
  },
  setUser(user, chain) {
    ChainController.setAccountProp("user", user, chain);
  },
  setAddressExplorerUrl(explorerUrl, chain) {
    ChainController.setAccountProp("addressExplorerUrl", explorerUrl, chain);
  },
  setSmartAccountDeployed(isDeployed, chain) {
    ChainController.setAccountProp("smartAccountDeployed", isDeployed, chain);
  },
  setCurrentTab(currentTab) {
    ChainController.setAccountProp("currentTab", currentTab, ChainController.state.activeChain);
  },
  setTokenBalance(tokenBalance, chain) {
    if (tokenBalance) {
      ChainController.setAccountProp("tokenBalance", tokenBalance, chain);
    }
  },
  setShouldUpdateToAddress(address, chain) {
    ChainController.setAccountProp("shouldUpdateToAddress", address, chain);
  },
  setAllAccounts(accounts, namespace) {
    ChainController.setAccountProp("allAccounts", accounts, namespace);
  },
  addAddressLabel(address, label, chain) {
    const map = ChainController.getAccountProp("addressLabels", chain) || /* @__PURE__ */ new Map();
    map.set(address, label);
    ChainController.setAccountProp("addressLabels", map, chain);
  },
  removeAddressLabel(address, chain) {
    const map = ChainController.getAccountProp("addressLabels", chain) || /* @__PURE__ */ new Map();
    map.delete(address);
    ChainController.setAccountProp("addressLabels", map, chain);
  },
  setConnectedWalletInfo(connectedWalletInfo, chain) {
    ChainController.setAccountProp("connectedWalletInfo", connectedWalletInfo, chain, false);
  },
  setPreferredAccountType(preferredAccountType, chain) {
    ChainController.setAccountProp("preferredAccountTypes", {
      ...state7.preferredAccountTypes,
      [chain]: preferredAccountType
    }, chain);
  },
  setPreferredAccountTypes(preferredAccountTypes) {
    state7.preferredAccountTypes = preferredAccountTypes;
  },
  setSocialProvider(socialProvider, chain) {
    if (socialProvider) {
      ChainController.setAccountProp("socialProvider", socialProvider, chain);
    }
  },
  setSocialWindow(socialWindow, chain) {
    ChainController.setAccountProp("socialWindow", socialWindow ? ref(socialWindow) : void 0, chain);
  },
  setFarcasterUrl(farcasterUrl, chain) {
    ChainController.setAccountProp("farcasterUrl", farcasterUrl, chain);
  },
  async fetchTokenBalance(onError) {
    var _a, _b;
    state7.balanceLoading = true;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const chain = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state7.lastRetry && !CoreHelperUtil.isAllowedRetry(state7.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state7.balanceLoading = false;
      return [];
    }
    try {
      if (address && chainId && chain) {
        const response = await BlockchainApiController.getBalance(address, chainId);
        const filteredBalances = response.balances.filter((balance) => balance.quantity.decimals !== "0");
        AccountController.setTokenBalance(filteredBalances, chain);
        state7.lastRetry = void 0;
        state7.balanceLoading = false;
        return filteredBalances;
      }
    } catch (error) {
      state7.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state7.balanceLoading = false;
    }
    return [];
  },
  resetAccount(chain) {
    ChainController.resetAccount(chain);
  }
};
var AccountController = withErrorBoundary(controller3);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/NetworkUtil.js
var NetworkUtil2 = {
  /**
   * Function to handle the network switch.
   * This function has variety of conditions to handle the network switch depending on the connectors or namespace's connection states.
   * @param args.network - The network to switch to.
   * @param args.shouldConfirmSwitch - Whether to confirm the switch. If true, the user will be asked to confirm the switch if necessary.
   * @returns void
   */
  onSwitchNetwork({ network, ignoreSwitchConfirmation = false }) {
    const currentNetwork = ChainController.state.activeCaipNetwork;
    const routerData = RouterController.state.data;
    const isSameNetwork = network.id === (currentNetwork == null ? void 0 : currentNetwork.id);
    if (isSameNetwork) {
      return;
    }
    const isCurrentNamespaceConnected = AccountController.getCaipAddress(ChainController.state.activeChain);
    const isDifferentNamespace = network.chainNamespace !== ChainController.state.activeChain;
    const isNextNamespaceConnected = AccountController.getCaipAddress(network.chainNamespace);
    const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);
    const isConnectedWithAuth = connectorId === ConstantsUtil.CONNECTOR_ID.AUTH;
    const isSupportedForAuthConnector = ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((c4) => c4 === network.chainNamespace);
    if (ignoreSwitchConfirmation || isConnectedWithAuth && isSupportedForAuthConnector) {
      RouterController.push("SwitchNetwork", { ...routerData, network });
    } else if (
      /**
       * If user switching to a different namespace and next namespace is not connected, we need to show switch active chain view for confirmation first.
       */
      isCurrentNamespaceConnected && isDifferentNamespace && !isNextNamespaceConnected
    ) {
      RouterController.push("SwitchActiveChain", {
        switchToChain: network.chainNamespace,
        navigateTo: "Connect",
        navigateWithReplace: true,
        network
      });
    } else {
      RouterController.push("SwitchNetwork", { ...routerData, network });
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/AlertController.js
var state8 = proxy({
  message: "",
  variant: "info",
  open: false
});
var controller4 = {
  state: state8,
  subscribeKey(key, callback) {
    return subscribeKey(state8, key, callback);
  },
  open(message, variant) {
    const { debug } = OptionsController.state;
    const { shortMessage, longMessage } = message;
    if (debug) {
      state8.message = shortMessage;
      state8.variant = variant;
      state8.open = true;
    }
    if (longMessage) {
      console.error(typeof longMessage === "function" ? longMessage() : longMessage);
    }
  },
  close() {
    state8.open = false;
    state8.message = "";
    state8.variant = "info";
  }
};
var AlertController = withErrorBoundary(controller4);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EventsController.js
var baseUrl2 = CoreHelperUtil.getAnalyticsUrl();
var api2 = new FetchUtil({ baseUrl: baseUrl2, clientId: null });
var excluded = ["MODAL_CREATED"];
var state9 = proxy({
  timestamp: Date.now(),
  reportedErrors: {},
  data: {
    type: "track",
    event: "MODAL_CREATED"
  }
});
var EventsController = {
  state: state9,
  subscribe(callback) {
    return subscribe(state9, () => callback(state9));
  },
  getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType,
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  async _sendAnalyticsEvent(payload) {
    try {
      const address = AccountController.state.address;
      if (excluded.includes(payload.data.event) || typeof window === "undefined") {
        return;
      }
      await api2.post({
        path: "/e",
        params: EventsController.getSdkProperties(),
        body: {
          eventId: CoreHelperUtil.getUUID(),
          url: window.location.href,
          domain: window.location.hostname,
          timestamp: payload.timestamp,
          props: { ...payload.data, address }
        }
      });
      state9.reportedErrors["FORBIDDEN"] = false;
    } catch (err) {
      const isForbiddenError = err instanceof Error && err.cause instanceof Response && err.cause.status === ConstantsUtil.HTTP_STATUS_CODES.FORBIDDEN && !state9.reportedErrors["FORBIDDEN"];
      if (isForbiddenError) {
        AlertController.open({
          shortMessage: "Invalid App Configuration",
          longMessage: `Origin ${isSafe() ? window.origin : "uknown"} not found on Allowlist - update configuration on cloud.reown.com`
        }, "error");
        state9.reportedErrors["FORBIDDEN"] = true;
      }
    }
  },
  sendEvent(data) {
    var _a;
    state9.timestamp = Date.now();
    state9.data = data;
    if ((_a = OptionsController.state.features) == null ? void 0 : _a.analytics) {
      EventsController._sendAnalyticsEvent(state9);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/PublicStateController.js
var state10 = proxy({
  loading: false,
  open: false,
  selectedNetworkId: void 0,
  activeChain: void 0,
  initialized: false
});
var PublicStateController = {
  state: state10,
  subscribe(callback) {
    return subscribe(state10, () => callback(state10));
  },
  subscribeOpen(callback) {
    return subscribeKey(state10, "open", callback);
  },
  set(newState) {
    Object.assign(state10, { ...state10, ...newState });
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ModalController.js
var state11 = proxy({
  loading: false,
  loadingNamespaceMap: /* @__PURE__ */ new Map(),
  open: false,
  shake: false,
  namespace: void 0
});
var controller5 = {
  state: state11,
  subscribe(callback) {
    return subscribe(state11, () => callback(state11));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state11, key, callback);
  },
  async open(options) {
    var _a, _b;
    const isConnected = AccountController.state.status === "connected";
    const namespace = options == null ? void 0 : options.namespace;
    const currentNamespace = ChainController.state.activeChain;
    const isSwitchingNamespace = namespace && namespace !== currentNamespace;
    const caipAddress = (_a = ChainController.getAccountData(options == null ? void 0 : options.namespace)) == null ? void 0 : _a.caipAddress;
    if (ConnectionController.state.wcBasic) {
      ApiController.prefetch({ fetchNetworkImages: false, fetchConnectorImages: false });
    } else {
      await ApiController.prefetch({
        fetchConnectorImages: !isConnected,
        fetchFeaturedWallets: !isConnected,
        fetchRecommendedWallets: !isConnected
      });
    }
    ConnectorController.setFilterByNamespace(options == null ? void 0 : options.namespace);
    ModalController.setLoading(true, namespace);
    if (namespace && isSwitchingNamespace) {
      const namespaceNetwork = ((_b = ChainController.getNetworkData(namespace)) == null ? void 0 : _b.caipNetwork) || ChainController.getRequestedCaipNetworks(namespace)[0];
      if (namespaceNetwork) {
        NetworkUtil2.onSwitchNetwork({ network: namespaceNetwork, ignoreSwitchConfirmation: true });
      }
    } else {
      const hasNoAdapters = ChainController.state.noAdapters;
      if (OptionsController.state.manualWCControl || hasNoAdapters && !caipAddress) {
        if (CoreHelperUtil.isMobile()) {
          RouterController.reset("AllWallets");
        } else {
          RouterController.reset("ConnectingWalletConnectBasic");
        }
      } else if (options == null ? void 0 : options.view) {
        RouterController.reset(options.view, options.data);
      } else if (caipAddress) {
        RouterController.reset("Account");
      } else {
        RouterController.reset("Connect");
      }
    }
    state11.open = true;
    PublicStateController.set({ open: true });
    EventsController.sendEvent({
      type: "track",
      event: "MODAL_OPEN",
      properties: { connected: Boolean(caipAddress) }
    });
  },
  close() {
    const isEmbeddedEnabled = OptionsController.state.enableEmbedded;
    const isConnected = Boolean(ChainController.state.activeCaipAddress);
    if (state11.open) {
      EventsController.sendEvent({
        type: "track",
        event: "MODAL_CLOSE",
        properties: { connected: isConnected }
      });
    }
    state11.open = false;
    RouterController.reset("Connect");
    ModalController.clearLoading();
    if (isEmbeddedEnabled) {
      if (isConnected) {
        RouterController.replace("Account");
      } else {
        RouterController.push("Connect");
      }
    } else {
      PublicStateController.set({ open: false });
    }
    ConnectionController.resetUri();
  },
  setLoading(loading, namespace) {
    if (namespace) {
      state11.loadingNamespaceMap.set(namespace, loading);
    }
    state11.loading = loading;
    PublicStateController.set({ loading });
  },
  clearLoading() {
    state11.loadingNamespaceMap.clear();
    state11.loading = false;
  },
  shake() {
    if (state11.shake) {
      return;
    }
    state11.shake = true;
    setTimeout(() => {
      state11.shake = false;
    }, 500);
  }
};
var ModalController = withErrorBoundary(controller5);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/RouterController.js
var state12 = proxy({
  view: "Connect",
  history: ["Connect"],
  transactionStack: []
});
var controller6 = {
  state: state12,
  subscribeKey(key, callback) {
    return subscribeKey(state12, key, callback);
  },
  pushTransactionStack(action) {
    state12.transactionStack.push(action);
  },
  popTransactionStack(status) {
    const action = state12.transactionStack.pop();
    if (!action) {
      return;
    }
    const { onSuccess, onError, onCancel } = action;
    switch (status) {
      case "success":
        onSuccess == null ? void 0 : onSuccess();
        break;
      case "error":
        onError == null ? void 0 : onError();
        RouterController.goBack();
        break;
      case "cancel":
        onCancel == null ? void 0 : onCancel();
        RouterController.goBack();
        break;
      default:
    }
  },
  push(view, data) {
    if (view !== state12.view) {
      state12.view = view;
      state12.history.push(view);
      state12.data = data;
    }
  },
  reset(view, data) {
    state12.view = view;
    state12.history = [view];
    state12.data = data;
  },
  replace(view, data) {
    const lastView = state12.history.at(-1);
    const isSameView = lastView === view;
    if (!isSameView) {
      state12.view = view;
      state12.history[state12.history.length - 1] = view;
      state12.data = data;
    }
  },
  goBack() {
    var _a;
    const isConnected = ChainController.state.activeCaipAddress;
    const isFarcasterView = RouterController.state.view === "ConnectingFarcaster";
    const shouldReload = !isConnected && isFarcasterView;
    if (state12.history.length > 1) {
      state12.history.pop();
      const [last] = state12.history.slice(-1);
      if (last) {
        const isConnectView = last === "Connect";
        if (isConnected && isConnectView) {
          state12.view = "Account";
        } else {
          state12.view = last;
        }
      }
    } else {
      ModalController.close();
    }
    if ((_a = state12.data) == null ? void 0 : _a.wallet) {
      state12.data.wallet = void 0;
    }
    setTimeout(() => {
      var _a2, _b, _c2;
      if (shouldReload) {
        AccountController.setFarcasterUrl(void 0, ChainController.state.activeChain);
        const authConnector = ConnectorController.getAuthConnector();
        (_a2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a2.reload();
        const optionsState = snapshot(OptionsController.state);
        (_c2 = (_b = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _b.syncDappData) == null ? void 0 : _c2.call(_b, {
          metadata: optionsState.metadata,
          sdkVersion: optionsState.sdkVersion,
          projectId: optionsState.projectId,
          sdkType: optionsState.sdkType
        });
      }
    }, 100);
  },
  goBackToIndex(historyIndex) {
    if (state12.history.length > 1) {
      state12.history = state12.history.slice(0, historyIndex + 1);
      const [last] = state12.history.slice(-1);
      if (last) {
        state12.view = last;
      }
    }
  },
  goBackOrCloseModal() {
    if (RouterController.state.history.length > 1) {
      RouterController.goBack();
    } else {
      ModalController.close();
    }
  }
};
var RouterController = withErrorBoundary(controller6);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ThemeController.js
var state13 = proxy({
  themeMode: "dark",
  themeVariables: {},
  w3mThemeVariables: void 0
});
var controller7 = {
  state: state13,
  subscribe(callback) {
    return subscribe(state13, () => callback(state13));
  },
  setThemeMode(themeMode) {
    state13.themeMode = themeMode;
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariables = controller7.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeMode,
          themeVariables,
          w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  setThemeVariables(themeVariables) {
    state13.themeVariables = { ...state13.themeVariables, ...themeVariables };
    try {
      const authConnector = ConnectorController.getAuthConnector();
      if (authConnector) {
        const themeVariablesSnapshot = controller7.getSnapshot().themeVariables;
        authConnector.provider.syncTheme({
          themeVariables: themeVariablesSnapshot,
          w3mThemeVariables: getW3mThemeVariables(state13.themeVariables, state13.themeMode)
        });
      }
    } catch {
      console.info("Unable to sync theme to auth connector");
    }
  },
  getSnapshot() {
    return snapshot(state13);
  }
};
var ThemeController = withErrorBoundary(controller7);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectorController.js
var defaultActiveConnectors = {
  eip155: void 0,
  solana: void 0,
  polkadot: void 0,
  bip122: void 0,
  cosmos: void 0
};
var state14 = proxy({
  allConnectors: [],
  connectors: [],
  activeConnector: void 0,
  filterByNamespace: void 0,
  activeConnectorIds: { ...defaultActiveConnectors },
  filterByNamespaceMap: {
    eip155: true,
    solana: true,
    polkadot: true,
    bip122: true,
    cosmos: true
  }
});
var controller8 = {
  state: state14,
  subscribe(callback) {
    return subscribe(state14, () => {
      callback(state14);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state14, key, callback);
  },
  initialize(namespaces) {
    namespaces.forEach((namespace) => {
      const connectorId = StorageUtil.getConnectedConnectorId(namespace);
      if (connectorId) {
        ConnectorController.setConnectorId(connectorId, namespace);
      }
    });
  },
  setActiveConnector(connector) {
    if (connector) {
      state14.activeConnector = ref(connector);
    }
  },
  setConnectors(connectors) {
    const newConnectors = connectors.filter((newConnector) => !state14.allConnectors.some((existingConnector) => existingConnector.id === newConnector.id && ConnectorController.getConnectorName(existingConnector.name) === ConnectorController.getConnectorName(newConnector.name) && existingConnector.chain === newConnector.chain));
    newConnectors.forEach((connector) => {
      if (connector.type !== "MULTI_CHAIN") {
        state14.allConnectors.push(ref(connector));
      }
    });
    const enabledNamespaces = ConnectorController.getEnabledNamespaces();
    const connectorsFilteredByNamespaces = ConnectorController.getEnabledConnectors(enabledNamespaces);
    state14.connectors = ConnectorController.mergeMultiChainConnectors(connectorsFilteredByNamespaces);
  },
  filterByNamespaces(enabledNamespaces) {
    Object.keys(state14.filterByNamespaceMap).forEach((namespace) => {
      state14.filterByNamespaceMap[namespace] = false;
    });
    enabledNamespaces.forEach((namespace) => {
      state14.filterByNamespaceMap[namespace] = true;
    });
    ConnectorController.updateConnectorsForEnabledNamespaces();
  },
  filterByNamespace(namespace, enabled) {
    state14.filterByNamespaceMap[namespace] = enabled;
    ConnectorController.updateConnectorsForEnabledNamespaces();
  },
  updateConnectorsForEnabledNamespaces() {
    const enabledNamespaces = ConnectorController.getEnabledNamespaces();
    const enabledConnectors = ConnectorController.getEnabledConnectors(enabledNamespaces);
    const areAllNamespacesEnabled = ConnectorController.areAllNamespacesEnabled();
    state14.connectors = ConnectorController.mergeMultiChainConnectors(enabledConnectors);
    if (areAllNamespacesEnabled) {
      ApiController.clearFilterByNamespaces();
    } else {
      ApiController.filterByNamespaces(enabledNamespaces);
    }
  },
  getEnabledNamespaces() {
    return Object.entries(state14.filterByNamespaceMap).filter(([_, enabled]) => enabled).map(([namespace]) => namespace);
  },
  getEnabledConnectors(enabledNamespaces) {
    return state14.allConnectors.filter((connector) => enabledNamespaces.includes(connector.chain));
  },
  areAllNamespacesEnabled() {
    return Object.values(state14.filterByNamespaceMap).every((enabled) => enabled);
  },
  mergeMultiChainConnectors(connectors) {
    const connectorsByNameMap = ConnectorController.generateConnectorMapByName(connectors);
    const mergedConnectors = [];
    connectorsByNameMap.forEach((keyConnectors) => {
      const firstItem = keyConnectors[0];
      const isAuthConnector = (firstItem == null ? void 0 : firstItem.id) === ConstantsUtil.CONNECTOR_ID.AUTH;
      if (keyConnectors.length > 1 && firstItem) {
        mergedConnectors.push({
          name: firstItem.name,
          imageUrl: firstItem.imageUrl,
          imageId: firstItem.imageId,
          connectors: [...keyConnectors],
          type: isAuthConnector ? "AUTH" : "MULTI_CHAIN",
          // These values are just placeholders, we don't use them in multi-chain connector select screen
          chain: "eip155",
          id: (firstItem == null ? void 0 : firstItem.id) || ""
        });
      } else if (firstItem) {
        mergedConnectors.push(firstItem);
      }
    });
    return mergedConnectors;
  },
  generateConnectorMapByName(connectors) {
    const connectorsByNameMap = /* @__PURE__ */ new Map();
    connectors.forEach((connector) => {
      const { name } = connector;
      const connectorName = ConnectorController.getConnectorName(name);
      if (!connectorName) {
        return;
      }
      const connectorsByName = connectorsByNameMap.get(connectorName) || [];
      const haveSameConnector = connectorsByName.find((c4) => c4.chain === connector.chain);
      if (!haveSameConnector) {
        connectorsByName.push(connector);
      }
      connectorsByNameMap.set(connectorName, connectorsByName);
    });
    return connectorsByNameMap;
  },
  getConnectorName(name) {
    if (!name) {
      return name;
    }
    const nameOverrideMap = {
      "Trust Wallet": "Trust"
    };
    return nameOverrideMap[name] || name;
  },
  getUniqueConnectorsByName(connectors) {
    const uniqueConnectors = [];
    connectors.forEach((c4) => {
      if (!uniqueConnectors.find((uc2) => uc2.chain === c4.chain)) {
        uniqueConnectors.push(c4);
      }
    });
    return uniqueConnectors;
  },
  addConnector(connector) {
    var _a, _b, _c2;
    if (connector.id === ConstantsUtil.CONNECTOR_ID.AUTH) {
      const authConnector = connector;
      const optionsState = snapshot(OptionsController.state);
      const themeMode = ThemeController.getSnapshot().themeMode;
      const themeVariables = ThemeController.getSnapshot().themeVariables;
      (_b = (_a = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a.syncDappData) == null ? void 0 : _b.call(_a, {
        metadata: optionsState.metadata,
        sdkVersion: optionsState.sdkVersion,
        projectId: optionsState.projectId,
        sdkType: optionsState.sdkType
      });
      (_c2 = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _c2.syncTheme({
        themeMode,
        themeVariables,
        w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
      });
      ConnectorController.setConnectors([connector]);
    } else {
      ConnectorController.setConnectors([connector]);
    }
  },
  getAuthConnector(chainNamespace) {
    var _a;
    const activeNamespace = chainNamespace || ChainController.state.activeChain;
    const authConnector = state14.connectors.find((c4) => c4.id === ConstantsUtil.CONNECTOR_ID.AUTH);
    if (!authConnector) {
      return void 0;
    }
    if ((_a = authConnector == null ? void 0 : authConnector.connectors) == null ? void 0 : _a.length) {
      const connector = authConnector.connectors.find((c4) => c4.chain === activeNamespace);
      return connector;
    }
    return authConnector;
  },
  getAnnouncedConnectorRdns() {
    return state14.connectors.filter((c4) => c4.type === "ANNOUNCED").map((c4) => {
      var _a;
      return (_a = c4.info) == null ? void 0 : _a.rdns;
    });
  },
  getConnectorById(id) {
    return state14.allConnectors.find((c4) => c4.id === id);
  },
  getConnector(id, rdns) {
    const connectorsByNamespace = state14.allConnectors.filter((c4) => c4.chain === ChainController.state.activeChain);
    return connectorsByNamespace.find((c4) => {
      var _a;
      return c4.explorerId === id || ((_a = c4.info) == null ? void 0 : _a.rdns) === rdns;
    });
  },
  syncIfAuthConnector(connector) {
    var _a, _b;
    if (connector.id !== "ID_AUTH") {
      return;
    }
    const authConnector = connector;
    const optionsState = snapshot(OptionsController.state);
    const themeMode = ThemeController.getSnapshot().themeMode;
    const themeVariables = ThemeController.getSnapshot().themeVariables;
    (_b = (_a = authConnector == null ? void 0 : authConnector.provider) == null ? void 0 : _a.syncDappData) == null ? void 0 : _b.call(_a, {
      metadata: optionsState.metadata,
      sdkVersion: optionsState.sdkVersion,
      sdkType: optionsState.sdkType,
      projectId: optionsState.projectId
    });
    authConnector.provider.syncTheme({
      themeMode,
      themeVariables,
      w3mThemeVariables: getW3mThemeVariables(themeVariables, themeMode)
    });
  },
  /**
   * Returns the connectors filtered by namespace.
   * @param namespace - The namespace to filter the connectors by.
   * @returns ConnectorWithProviders[].
   */
  getConnectorsByNamespace(namespace) {
    const namespaceConnectors = state14.allConnectors.filter((connector) => connector.chain === namespace);
    return ConnectorController.mergeMultiChainConnectors(namespaceConnectors);
  },
  selectWalletConnector(wallet) {
    const connector = ConnectorController.getConnector(wallet.id, wallet.rdns);
    const namespace = ChainController.state.activeChain;
    MobileWalletUtil.handleMobileDeeplinkRedirect((connector == null ? void 0 : connector.explorerId) || wallet.id, namespace);
    if (connector) {
      RouterController.push("ConnectingExternal", { connector });
    } else {
      RouterController.push("ConnectingWalletConnect", { wallet });
    }
  },
  /**
   * Returns the connectors. If a namespace is provided, the connectors are filtered by namespace.
   * @param namespace - The namespace to filter the connectors by. If not provided, all connectors are returned.
   * @returns ConnectorWithProviders[].
   */
  getConnectors(namespace) {
    if (namespace) {
      return ConnectorController.getConnectorsByNamespace(namespace);
    }
    return ConnectorController.mergeMultiChainConnectors(state14.allConnectors);
  },
  /**
   * Sets the filter by namespace and updates the connectors.
   * @param namespace - The namespace to filter the connectors by.
   */
  setFilterByNamespace(namespace) {
    state14.filterByNamespace = namespace;
    state14.connectors = ConnectorController.getConnectors(namespace);
    ApiController.setFilterByNamespace(namespace);
  },
  setConnectorId(connectorId, namespace) {
    if (connectorId) {
      state14.activeConnectorIds = {
        ...state14.activeConnectorIds,
        [namespace]: connectorId
      };
      StorageUtil.setConnectedConnectorId(namespace, connectorId);
    }
  },
  removeConnectorId(namespace) {
    state14.activeConnectorIds = {
      ...state14.activeConnectorIds,
      [namespace]: void 0
    };
    StorageUtil.deleteConnectedConnectorId(namespace);
  },
  getConnectorId(namespace) {
    if (!namespace) {
      return void 0;
    }
    return state14.activeConnectorIds[namespace];
  },
  isConnected(namespace) {
    if (!namespace) {
      return Object.values(state14.activeConnectorIds).some((id) => Boolean(id));
    }
    return Boolean(state14.activeConnectorIds[namespace]);
  },
  resetConnectorIds() {
    state14.activeConnectorIds = { ...defaultActiveConnectors };
  }
};
var ConnectorController = withErrorBoundary(controller8);

// node_modules/@reown/appkit-wallet/dist/esm/src/W3mFrameConstants.js
var DEFAULT_SDK_URL = "https://secure.walletconnect.org/sdk";
var SECURE_SITE_SDK = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_URL"] : void 0) || DEFAULT_SDK_URL;
var DEFAULT_LOG_LEVEL = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_DEFAULT_LOG_LEVEL"] : void 0) || "error";
var SECURE_SITE_SDK_VERSION = (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_SDK_VERSION"] : void 0) || "4";
var W3mFrameRpcConstants = {
  SAFE_RPC_METHODS: [
    "eth_accounts",
    "eth_blockNumber",
    "eth_call",
    "eth_chainId",
    "eth_estimateGas",
    "eth_feeHistory",
    "eth_gasPrice",
    "eth_getAccount",
    "eth_getBalance",
    "eth_getBlockByHash",
    "eth_getBlockByNumber",
    "eth_getBlockReceipts",
    "eth_getBlockTransactionCountByHash",
    "eth_getBlockTransactionCountByNumber",
    "eth_getCode",
    "eth_getFilterChanges",
    "eth_getFilterLogs",
    "eth_getLogs",
    "eth_getProof",
    "eth_getStorageAt",
    "eth_getTransactionByBlockHashAndIndex",
    "eth_getTransactionByBlockNumberAndIndex",
    "eth_getTransactionByHash",
    "eth_getTransactionCount",
    "eth_getTransactionReceipt",
    "eth_getUncleCountByBlockHash",
    "eth_getUncleCountByBlockNumber",
    "eth_maxPriorityFeePerGas",
    "eth_newBlockFilter",
    "eth_newFilter",
    "eth_newPendingTransactionFilter",
    "eth_sendRawTransaction",
    "eth_syncing",
    "eth_uninstallFilter",
    "wallet_getCapabilities",
    "wallet_getCallsStatus",
    "eth_getUserOperationReceipt",
    "eth_estimateUserOperationGas",
    "eth_getUserOperationByHash",
    "eth_supportedEntryPoints",
    "wallet_getAssets"
  ],
  NOT_SAFE_RPC_METHODS: [
    "personal_sign",
    "eth_signTypedData_v4",
    "eth_sendTransaction",
    "solana_signMessage",
    "solana_signTransaction",
    "solana_signAllTransactions",
    "solana_signAndSendTransaction",
    "wallet_sendCalls",
    "wallet_grantPermissions",
    "wallet_revokePermissions",
    "eth_sendUserOperation"
  ],
  GET_CHAIN_ID: "eth_chainId",
  RPC_METHOD_NOT_ALLOWED_MESSAGE: "Requested RPC call is not allowed",
  RPC_METHOD_NOT_ALLOWED_UI_MESSAGE: "Action not allowed",
  ACCOUNT_TYPES: {
    EOA: "eoa",
    SMART_ACCOUNT: "smartAccount"
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TransactionsController.js
var state15 = proxy({
  transactions: [],
  coinbaseTransactions: {},
  transactionsByYear: {},
  lastNetworkInView: void 0,
  loading: false,
  empty: false,
  next: void 0
});
var controller9 = {
  state: state15,
  subscribe(callback) {
    return subscribe(state15, () => callback(state15));
  },
  setLastNetworkInView(lastNetworkInView) {
    state15.lastNetworkInView = lastNetworkInView;
  },
  async fetchTransactions(accountAddress, onramp) {
    var _a, _b;
    if (!accountAddress) {
      throw new Error("Transactions can't be fetched without an accountAddress");
    }
    state15.loading = true;
    try {
      const response = await BlockchainApiController.fetchTransactions({
        account: accountAddress,
        cursor: state15.next,
        onramp,
        // Coinbase transaction history state updates require the latest data
        cache: onramp === "coinbase" ? "no-cache" : void 0,
        chainId: (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId
      });
      const nonSpamTransactions = TransactionsController.filterSpamTransactions(response.data);
      const sameChainTransactions = TransactionsController.filterByConnectedChain(nonSpamTransactions);
      const filteredTransactions = [...state15.transactions, ...sameChainTransactions];
      state15.loading = false;
      if (onramp === "coinbase") {
        state15.coinbaseTransactions = TransactionsController.groupTransactionsByYearAndMonth(state15.coinbaseTransactions, response.data);
      } else {
        state15.transactions = filteredTransactions;
        state15.transactionsByYear = TransactionsController.groupTransactionsByYearAndMonth(state15.transactionsByYear, sameChainTransactions);
      }
      state15.empty = filteredTransactions.length === 0;
      state15.next = response.next ? response.next : void 0;
    } catch (error) {
      const activeChainNamespace = ChainController.state.activeChain;
      EventsController.sendEvent({
        type: "track",
        event: "ERROR_FETCH_TRANSACTIONS",
        properties: {
          address: accountAddress,
          projectId: OptionsController.state.projectId,
          cursor: state15.next,
          isSmartAccount: ((_b = AccountController.state.preferredAccountTypes) == null ? void 0 : _b[activeChainNamespace]) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      SnackController.showError("Failed to fetch transactions");
      state15.loading = false;
      state15.empty = true;
      state15.next = void 0;
    }
  },
  groupTransactionsByYearAndMonth(transactionsMap = {}, transactions = []) {
    const grouped = transactionsMap;
    transactions.forEach((transaction) => {
      const year = new Date(transaction.metadata.minedAt).getFullYear();
      const month = new Date(transaction.metadata.minedAt).getMonth();
      const yearTransactions = grouped[year] ?? {};
      const monthTransactions = yearTransactions[month] ?? [];
      const newMonthTransactions = monthTransactions.filter((tx) => tx.id !== transaction.id);
      grouped[year] = {
        ...yearTransactions,
        [month]: [...newMonthTransactions, transaction].sort((a2, b4) => new Date(b4.metadata.minedAt).getTime() - new Date(a2.metadata.minedAt).getTime())
      };
    });
    return grouped;
  },
  filterSpamTransactions(transactions) {
    return transactions.filter((transaction) => {
      const isAllSpam = transaction.transfers.every((transfer) => {
        var _a;
        return ((_a = transfer.nft_info) == null ? void 0 : _a.flags.is_spam) === true;
      });
      return !isAllSpam;
    });
  },
  filterByConnectedChain(transactions) {
    var _a;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const filteredTransactions = transactions.filter((transaction) => transaction.metadata.chain === chainId);
    return filteredTransactions;
  },
  clearCursor() {
    state15.next = void 0;
  },
  resetTransactions() {
    state15.transactions = [];
    state15.transactionsByYear = {};
    state15.lastNetworkInView = void 0;
    state15.loading = false;
    state15.empty = false;
    state15.next = void 0;
  }
};
var TransactionsController = withErrorBoundary(controller9, "API_ERROR");

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ConnectionController.js
var state16 = proxy({
  connections: /* @__PURE__ */ new Map(),
  wcError: false,
  buffering: false,
  status: "disconnected"
});
var wcConnectionPromise;
var controller10 = {
  state: state16,
  subscribeKey(key, callback) {
    return subscribeKey(state16, key, callback);
  },
  _getClient() {
    return state16._client;
  },
  setClient(client) {
    state16._client = ref(client);
  },
  async connectWalletConnect() {
    var _a, _b, _c2, _d;
    if (CoreHelperUtil.isTelegram() || CoreHelperUtil.isSafari() && CoreHelperUtil.isIos()) {
      if (wcConnectionPromise) {
        await wcConnectionPromise;
        wcConnectionPromise = void 0;
        return;
      }
      if (!CoreHelperUtil.isPairingExpired(state16 == null ? void 0 : state16.wcPairingExpiry)) {
        const link = state16.wcUri;
        state16.wcUri = link;
        return;
      }
      wcConnectionPromise = (_b = (_a = ConnectionController._getClient()) == null ? void 0 : _a.connectWalletConnect) == null ? void 0 : _b.call(_a).catch(() => void 0);
      ConnectionController.state.status = "connecting";
      await wcConnectionPromise;
      wcConnectionPromise = void 0;
      state16.wcPairingExpiry = void 0;
      ConnectionController.state.status = "connected";
    } else {
      await ((_d = (_c2 = ConnectionController._getClient()) == null ? void 0 : _c2.connectWalletConnect) == null ? void 0 : _d.call(_c2));
    }
  },
  async connectExternal(options, chain, setChain = true) {
    var _a, _b;
    await ((_b = (_a = ConnectionController._getClient()) == null ? void 0 : _a.connectExternal) == null ? void 0 : _b.call(_a, options));
    if (setChain) {
      ChainController.setActiveNamespace(chain);
    }
  },
  async reconnectExternal(options) {
    var _a, _b;
    await ((_b = (_a = ConnectionController._getClient()) == null ? void 0 : _a.reconnectExternal) == null ? void 0 : _b.call(_a, options));
    const namespace = options.chain || ChainController.state.activeChain;
    if (namespace) {
      ConnectorController.setConnectorId(options.id, namespace);
    }
  },
  async setPreferredAccountType(accountType, namespace) {
    var _a;
    ModalController.setLoading(true, ChainController.state.activeChain);
    const authConnector = ConnectorController.getAuthConnector();
    if (!authConnector) {
      return;
    }
    AccountController.setPreferredAccountType(accountType, namespace);
    await authConnector.provider.setPreferredAccount(accountType);
    StorageUtil.setPreferredAccountTypes(AccountController.state.preferredAccountTypes ?? { [namespace]: accountType });
    await ConnectionController.reconnectExternal(authConnector);
    ModalController.setLoading(false, ChainController.state.activeChain);
    EventsController.sendEvent({
      type: "track",
      event: "SET_PREFERRED_ACCOUNT_TYPE",
      properties: {
        accountType,
        network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || ""
      }
    });
  },
  async signMessage(message) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.signMessage(message);
  },
  parseUnits(value, decimals) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.parseUnits(value, decimals);
  },
  formatUnits(value, decimals) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.formatUnits(value, decimals);
  },
  async sendTransaction(args) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.sendTransaction(args);
  },
  async getCapabilities(params) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.getCapabilities(params);
  },
  async grantPermissions(params) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.grantPermissions(params);
  },
  async walletGetAssets(params) {
    var _a;
    return ((_a = ConnectionController._getClient()) == null ? void 0 : _a.walletGetAssets(params)) ?? {};
  },
  async estimateGas(args) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.estimateGas(args);
  },
  async writeContract(args) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.writeContract(args);
  },
  async getEnsAddress(value) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.getEnsAddress(value);
  },
  async getEnsAvatar(value) {
    var _a;
    return (_a = ConnectionController._getClient()) == null ? void 0 : _a.getEnsAvatar(value);
  },
  checkInstalled(ids) {
    var _a, _b;
    return ((_b = (_a = ConnectionController._getClient()) == null ? void 0 : _a.checkInstalled) == null ? void 0 : _b.call(_a, ids)) || false;
  },
  resetWcConnection() {
    state16.wcUri = void 0;
    state16.wcPairingExpiry = void 0;
    state16.wcLinking = void 0;
    state16.recentWallet = void 0;
    state16.status = "disconnected";
    TransactionsController.resetTransactions();
    StorageUtil.deleteWalletConnectDeepLink();
  },
  resetUri() {
    state16.wcUri = void 0;
    state16.wcPairingExpiry = void 0;
    wcConnectionPromise = void 0;
  },
  finalizeWcConnection() {
    var _a, _b;
    const { wcLinking, recentWallet } = ConnectionController.state;
    if (wcLinking) {
      StorageUtil.setWalletConnectDeepLink(wcLinking);
    }
    if (recentWallet) {
      StorageUtil.setAppKitRecent(recentWallet);
    }
    EventsController.sendEvent({
      type: "track",
      event: "CONNECT_SUCCESS",
      properties: {
        method: wcLinking ? "mobile" : "qrcode",
        name: ((_b = (_a = RouterController.state.data) == null ? void 0 : _a.wallet) == null ? void 0 : _b.name) || "Unknown"
      }
    });
  },
  setWcBasic(wcBasic) {
    state16.wcBasic = wcBasic;
  },
  setUri(uri) {
    state16.wcUri = uri;
    state16.wcPairingExpiry = CoreHelperUtil.getPairingExpiry();
  },
  setWcLinking(wcLinking) {
    state16.wcLinking = wcLinking;
  },
  setWcError(wcError) {
    state16.wcError = wcError;
    state16.buffering = false;
  },
  setRecentWallet(wallet) {
    state16.recentWallet = wallet;
  },
  setBuffering(buffering) {
    state16.buffering = buffering;
  },
  setStatus(status) {
    state16.status = status;
  },
  async disconnect(namespace) {
    var _a;
    try {
      await ((_a = ConnectionController._getClient()) == null ? void 0 : _a.disconnect(namespace));
    } catch (error) {
      throw new AppKitError("Failed to disconnect", "INTERNAL_SDK_ERROR", error);
    }
  },
  setConnections(connections, chainNamespace) {
    state16.connections.set(chainNamespace, connections);
  },
  switchAccount({ connection, address, namespace }) {
    const connectedConnectorId = ConnectorController.state.activeConnectorIds[namespace];
    const isConnectorConnected = connectedConnectorId === connection.connectorId;
    if (isConnectorConnected) {
      const currentNetwork = ChainController.state.activeCaipNetwork;
      if (currentNetwork) {
        const caipAddress = `${namespace}:${currentNetwork.id}:${address}`;
        AccountController.setCaipAddress(caipAddress, namespace);
      } else {
        console.warn(`No current network found for namespace "${namespace}"`);
      }
    } else {
      const connector = ConnectorController.getConnector(connection.connectorId);
      if (connector) {
        ConnectionController.connectExternal(connector, namespace);
      } else {
        console.warn(`No connector found for namespace "${namespace}"`);
      }
    }
  }
};
var ConnectionController = withErrorBoundary(controller10);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ERC7811Util.js
var ERC7811Utils = {
  /**
   * Creates a Balance object from an ERC7811 Asset object
   * @param asset - Asset object to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns Balance object
   */
  createBalance(asset, chainId) {
    const metadata = {
      name: asset.metadata["name"] || "",
      symbol: asset.metadata["symbol"] || "",
      decimals: asset.metadata["decimals"] || 0,
      value: asset.metadata["value"] || 0,
      price: asset.metadata["price"] || 0,
      iconUrl: asset.metadata["iconUrl"] || ""
    };
    return {
      name: metadata.name,
      symbol: metadata.symbol,
      chainId,
      address: asset.address === "native" ? void 0 : this.convertAddressToCAIP10Address(asset.address, chainId),
      value: metadata.value,
      price: metadata.price,
      quantity: {
        decimals: metadata.decimals.toString(),
        numeric: this.convertHexToBalance({
          hex: asset.balance,
          decimals: metadata.decimals
        })
      },
      iconUrl: metadata.iconUrl
    };
  },
  /**
   * Converts a hex string to a Balance object
   * @param hex - Hex string to convert
   * @param decimals - Number of decimals to use
   * @returns Balance object
   */
  convertHexToBalance({ hex, decimals }) {
    return formatUnits(BigInt(hex), decimals);
  },
  /**
   * Converts an address to a CAIP-10 address
   * @param address - Address to convert
   * @param chainId - Chain ID in CAIP-2 format
   * @returns CAIP-10 address
   */
  convertAddressToCAIP10Address(address, chainId) {
    return `${chainId}:${address}`;
  },
  /**
   *  Creates a CAIP-2 Chain ID from a chain ID and namespace
   * @param chainId  - Chain ID in hex format
   * @param namespace  - Chain namespace
   * @returns
   */
  createCAIP2ChainId(chainId, namespace) {
    return `${namespace}:${parseInt(chainId, 16)}`;
  },
  /**
   * Gets the chain ID in hex format from a CAIP-2 Chain ID
   * @param caip2ChainId - CAIP-2 Chain ID
   * @returns Chain ID in hex format
   */
  getChainIdHexFromCAIP2ChainId(caip2ChainId) {
    const parts = caip2ChainId.split(":");
    if (parts.length < 2 || !parts[1]) {
      return "0x0";
    }
    const chainPart = parts[1];
    const parsed = parseInt(chainPart, 10);
    return isNaN(parsed) ? "0x0" : `0x${parsed.toString(16)}`;
  },
  /**
   * Checks if a response is a valid WalletGetAssetsResponse
   * @param response - The response to check
   * @returns True if the response is a valid WalletGetAssetsResponse, false otherwise
   */
  isWalletGetAssetsResponse(response) {
    if (typeof response !== "object" || response === null) {
      return false;
    }
    return Object.values(response).every((value) => Array.isArray(value) && value.every((asset) => this.isValidAsset(asset)));
  },
  /**
   * Checks if an asset object is valid.
   * @param asset - The asset object to check.
   * @returns True if the asset is valid, false otherwise.
   */
  isValidAsset(asset) {
    return typeof asset === "object" && asset !== null && typeof asset.address === "string" && typeof asset.balance === "string" && (asset.type === "ERC20" || asset.type === "NATIVE") && typeof asset.metadata === "object" && asset.metadata !== null && typeof asset.metadata["name"] === "string" && typeof asset.metadata["symbol"] === "string" && typeof asset.metadata["decimals"] === "number" && typeof asset.metadata["price"] === "number" && typeof asset.metadata["iconUrl"] === "string";
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SendApiUtil.js
var SendApiUtil = {
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!address || !caipNetwork) {
      return [];
    }
    if (caipNetwork.chainNamespace === "eip155") {
      const eip155Balances = await this.getEIP155Balances(address, caipNetwork);
      if (eip155Balances) {
        return this.filterLowQualityTokens(eip155Balances);
      }
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    return this.filterLowQualityTokens(response.balances);
  },
  async getEIP155Balances(address, caipNetwork) {
    var _a, _b;
    try {
      const chainIdHex = ERC7811Utils.getChainIdHexFromCAIP2ChainId(caipNetwork.caipNetworkId);
      const walletCapabilities = await ConnectionController.getCapabilities(address);
      if (!((_b = (_a = walletCapabilities == null ? void 0 : walletCapabilities[chainIdHex]) == null ? void 0 : _a["assetDiscovery"]) == null ? void 0 : _b.supported)) {
        return null;
      }
      const walletGetAssetsResponse = await ConnectionController.walletGetAssets({
        account: address,
        chainFilter: [chainIdHex]
      });
      if (!ERC7811Utils.isWalletGetAssetsResponse(walletGetAssetsResponse)) {
        return null;
      }
      const assets = walletGetAssetsResponse[chainIdHex] || [];
      return assets.map((asset) => ERC7811Utils.createBalance(asset, caipNetwork.caipNetworkId));
    } catch (error) {
      return null;
    }
  },
  /**
   * The 1Inch API includes many low-quality tokens in the balance response,
   * which appear inconsistently. This filter prevents them from being displayed.
   */
  filterLowQualityTokens(balances) {
    return balances.filter((balance) => balance.quantity.decimals !== "0");
  },
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : ChainController.getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SendController.js
var state17 = proxy({
  tokenBalances: [],
  loading: false
});
var controller11 = {
  state: state17,
  subscribe(callback) {
    return subscribe(state17, () => callback(state17));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state17, key, callback);
  },
  setToken(token) {
    if (token) {
      state17.token = ref(token);
    }
  },
  setTokenAmount(sendTokenAmount) {
    state17.sendTokenAmount = sendTokenAmount;
  },
  setReceiverAddress(receiverAddress) {
    state17.receiverAddress = receiverAddress;
  },
  setReceiverProfileImageUrl(receiverProfileImageUrl) {
    state17.receiverProfileImageUrl = receiverProfileImageUrl;
  },
  setReceiverProfileName(receiverProfileName) {
    state17.receiverProfileName = receiverProfileName;
  },
  setNetworkBalanceInUsd(networkBalanceInUSD) {
    state17.networkBalanceInUSD = networkBalanceInUSD;
  },
  setLoading(loading) {
    state17.loading = loading;
  },
  async sendToken() {
    var _a;
    try {
      SendController.setLoading(true);
      switch ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.chainNamespace) {
        case "eip155":
          await SendController.sendEvmToken();
          return;
        case "solana":
          await SendController.sendSolanaToken();
          return;
        default:
          throw new Error("Unsupported chain");
      }
    } finally {
      SendController.setLoading(false);
    }
  },
  async sendEvmToken() {
    var _a, _b, _c2, _d;
    const activeChainNamespace = ChainController.state.activeChain;
    const activeAccountType = (_a = AccountController.state.preferredAccountTypes) == null ? void 0 : _a[activeChainNamespace];
    if (!SendController.state.sendTokenAmount || !SendController.state.receiverAddress) {
      throw new Error("An amount and receiver address are required");
    }
    if (!SendController.state.token) {
      throw new Error("A token is required");
    }
    if ((_b = SendController.state.token) == null ? void 0 : _b.address) {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: activeAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: SendController.state.token.address,
          amount: SendController.state.sendTokenAmount,
          network: ((_c2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId) || ""
        }
      });
      await SendController.sendERC20Token({
        receiverAddress: SendController.state.receiverAddress,
        tokenAddress: SendController.state.token.address,
        sendTokenAmount: SendController.state.sendTokenAmount,
        decimals: SendController.state.token.quantity.decimals
      });
    } else {
      EventsController.sendEvent({
        type: "track",
        event: "SEND_INITIATED",
        properties: {
          isSmartAccount: activeAccountType === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
          token: SendController.state.token.symbol || "",
          amount: SendController.state.sendTokenAmount,
          network: ((_d = ChainController.state.activeCaipNetwork) == null ? void 0 : _d.caipNetworkId) || ""
        }
      });
      await SendController.sendNativeToken({
        receiverAddress: SendController.state.receiverAddress,
        sendTokenAmount: SendController.state.sendTokenAmount,
        decimals: SendController.state.token.quantity.decimals
      });
    }
  },
  async fetchTokenBalance(onError) {
    var _a, _b;
    state17.loading = true;
    const chainId = (_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId;
    const chain = (_b = ChainController.state.activeCaipNetwork) == null ? void 0 : _b.chainNamespace;
    const caipAddress = ChainController.state.activeCaipAddress;
    const address = caipAddress ? CoreHelperUtil.getPlainAddress(caipAddress) : void 0;
    if (state17.lastRetry && !CoreHelperUtil.isAllowedRetry(state17.lastRetry, 30 * ConstantsUtil2.ONE_SEC_MS)) {
      state17.loading = false;
      return [];
    }
    try {
      if (address && chainId && chain) {
        const balances = await SendApiUtil.getMyTokensWithBalance();
        state17.tokenBalances = balances;
        state17.lastRetry = void 0;
        return balances;
      }
    } catch (error) {
      state17.lastRetry = Date.now();
      onError == null ? void 0 : onError(error);
      SnackController.showError("Token Balance Unavailable");
    } finally {
      state17.loading = false;
    }
    return [];
  },
  fetchNetworkBalance() {
    if (state17.tokenBalances.length === 0) {
      return;
    }
    const networkTokenBalances = SendApiUtil.mapBalancesToSwapTokens(state17.tokenBalances);
    if (!networkTokenBalances) {
      return;
    }
    const networkToken = networkTokenBalances.find((token) => token.address === ChainController.getActiveNetworkTokenAddress());
    if (!networkToken) {
      return;
    }
    state17.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async sendNativeToken(params) {
    var _a, _b, _c2, _d;
    RouterController.pushTransactionStack({});
    const to3 = params.receiverAddress;
    const address = AccountController.state.address;
    const value = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    const data = "0x";
    await ConnectionController.sendTransaction({
      chainNamespace: "eip155",
      to: to3,
      address,
      data,
      value: value ?? BigInt(0)
    });
    EventsController.sendEvent({
      type: "track",
      event: "SEND_SUCCESS",
      properties: {
        isSmartAccount: ((_a = AccountController.state.preferredAccountTypes) == null ? void 0 : _a["eip155"]) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT,
        token: ((_b = SendController.state.token) == null ? void 0 : _b.symbol) || "",
        amount: params.sendTokenAmount,
        network: ((_c2 = ChainController.state.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId) || ""
      }
    });
    (_d = ConnectionController._getClient()) == null ? void 0 : _d.updateBalance("eip155");
    SendController.resetSend();
  },
  async sendERC20Token(params) {
    RouterController.pushTransactionStack({
      onSuccess() {
        RouterController.replace("Account");
      }
    });
    const amount = ConnectionController.parseUnits(params.sendTokenAmount.toString(), Number(params.decimals));
    if (AccountController.state.address && params.sendTokenAmount && params.receiverAddress && params.tokenAddress) {
      const tokenAddress = CoreHelperUtil.getPlainAddress(params.tokenAddress);
      await ConnectionController.writeContract({
        fromAddress: AccountController.state.address,
        tokenAddress,
        args: [params.receiverAddress, amount ?? BigInt(0)],
        method: "transfer",
        abi: ContractUtil.getERC20Abi(tokenAddress),
        chainNamespace: "eip155"
      });
      SendController.resetSend();
    }
  },
  async sendSolanaToken() {
    var _a;
    if (!SendController.state.sendTokenAmount || !SendController.state.receiverAddress) {
      throw new Error("An amount and receiver address are required");
    }
    RouterController.pushTransactionStack({
      onSuccess() {
        RouterController.replace("Account");
      }
    });
    await ConnectionController.sendTransaction({
      chainNamespace: "solana",
      to: SendController.state.receiverAddress,
      value: SendController.state.sendTokenAmount
    });
    (_a = ConnectionController._getClient()) == null ? void 0 : _a.updateBalance("solana");
    SendController.resetSend();
  },
  resetSend() {
    state17.token = void 0;
    state17.sendTokenAmount = void 0;
    state17.receiverAddress = void 0;
    state17.receiverProfileImageUrl = void 0;
    state17.receiverProfileName = void 0;
    state17.loading = false;
    state17.tokenBalances = [];
  }
};
var SendController = withErrorBoundary(controller11);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ChainController.js
var accountState = {
  currentTab: 0,
  tokenBalance: [],
  smartAccountDeployed: false,
  addressLabels: /* @__PURE__ */ new Map(),
  allAccounts: [],
  user: void 0
};
var networkState = {
  caipNetwork: void 0,
  supportsAllNetworks: true,
  smartAccountEnabledNetworks: []
};
var state18 = proxy({
  chains: proxyMap(),
  activeCaipAddress: void 0,
  activeChain: void 0,
  activeCaipNetwork: void 0,
  noAdapters: false,
  universalAdapter: {
    networkControllerClient: void 0,
    connectionControllerClient: void 0
  },
  isSwitchingNamespace: false
});
var controller12 = {
  state: state18,
  subscribe(callback) {
    return subscribe(state18, () => {
      callback(state18);
    });
  },
  subscribeKey(key, callback) {
    return subscribeKey(state18, key, callback);
  },
  subscribeChainProp(property, callback, chain) {
    let prev = void 0;
    return subscribe(state18.chains, () => {
      var _a;
      const activeChain = chain || state18.activeChain;
      if (activeChain) {
        const nextValue = (_a = state18.chains.get(activeChain)) == null ? void 0 : _a[property];
        if (prev !== nextValue) {
          prev = nextValue;
          callback(nextValue);
        }
      }
    });
  },
  initialize(adapters, caipNetworks, clients) {
    const { chainId: activeChainId, namespace: activeNamespace } = StorageUtil.getActiveNetworkProps();
    const activeCaipNetwork = caipNetworks == null ? void 0 : caipNetworks.find((network) => network.id.toString() === (activeChainId == null ? void 0 : activeChainId.toString()));
    const defaultAdapter = adapters.find((adapter) => (adapter == null ? void 0 : adapter.namespace) === activeNamespace);
    const adapterToActivate = defaultAdapter || (adapters == null ? void 0 : adapters[0]);
    const namespacesFromAdapters = adapters.map((a2) => a2.namespace).filter((n2) => n2 !== void 0);
    const namespaces = OptionsController.state.enableEmbedded ? /* @__PURE__ */ new Set([...namespacesFromAdapters]) : /* @__PURE__ */ new Set([...(caipNetworks == null ? void 0 : caipNetworks.map((network) => network.chainNamespace)) ?? []]);
    if ((adapters == null ? void 0 : adapters.length) === 0 || !adapterToActivate) {
      state18.noAdapters = true;
    }
    if (!state18.noAdapters) {
      state18.activeChain = adapterToActivate == null ? void 0 : adapterToActivate.namespace;
      state18.activeCaipNetwork = activeCaipNetwork;
      ChainController.setChainNetworkData(adapterToActivate == null ? void 0 : adapterToActivate.namespace, {
        caipNetwork: activeCaipNetwork
      });
      if (state18.activeChain) {
        PublicStateController.set({ activeChain: adapterToActivate == null ? void 0 : adapterToActivate.namespace });
      }
    }
    namespaces.forEach((namespace) => {
      const namespaceNetworks = caipNetworks == null ? void 0 : caipNetworks.filter((network) => network.chainNamespace === namespace);
      ChainController.state.chains.set(namespace, {
        namespace,
        networkState: proxy({
          ...networkState,
          caipNetwork: namespaceNetworks == null ? void 0 : namespaceNetworks[0]
        }),
        accountState: proxy(accountState),
        caipNetworks: namespaceNetworks ?? [],
        ...clients
      });
      ChainController.setRequestedCaipNetworks(namespaceNetworks ?? [], namespace);
    });
  },
  removeAdapter(namespace) {
    var _a, _b;
    if (state18.activeChain === namespace) {
      const nextAdapter = Array.from(state18.chains.entries()).find(([chainNamespace]) => chainNamespace !== namespace);
      if (nextAdapter) {
        const caipNetwork = (_b = (_a = nextAdapter[1]) == null ? void 0 : _a.caipNetworks) == null ? void 0 : _b[0];
        if (caipNetwork) {
          ChainController.setActiveCaipNetwork(caipNetwork);
        }
      }
    }
    state18.chains.delete(namespace);
  },
  addAdapter(adapter, { networkControllerClient, connectionControllerClient }, caipNetworks) {
    state18.chains.set(adapter.namespace, {
      namespace: adapter.namespace,
      networkState: {
        ...networkState,
        caipNetwork: caipNetworks[0]
      },
      accountState,
      caipNetworks,
      connectionControllerClient,
      networkControllerClient
    });
    ChainController.setRequestedCaipNetworks((caipNetworks == null ? void 0 : caipNetworks.filter((caipNetwork) => caipNetwork.chainNamespace === adapter.namespace)) ?? [], adapter.namespace);
  },
  addNetwork(network) {
    var _a;
    const chainAdapter = state18.chains.get(network.chainNamespace);
    if (chainAdapter) {
      const newNetworks = [...chainAdapter.caipNetworks || []];
      if (!((_a = chainAdapter.caipNetworks) == null ? void 0 : _a.find((caipNetwork) => caipNetwork.id === network.id))) {
        newNetworks.push(network);
      }
      state18.chains.set(network.chainNamespace, { ...chainAdapter, caipNetworks: newNetworks });
      ChainController.setRequestedCaipNetworks(newNetworks, network.chainNamespace);
      ConnectorController.filterByNamespace(network.chainNamespace, true);
    }
  },
  removeNetwork(namespace, networkId) {
    var _a, _b, _c2;
    const chainAdapter = state18.chains.get(namespace);
    if (chainAdapter) {
      const isActiveNetwork = ((_a = state18.activeCaipNetwork) == null ? void 0 : _a.id) === networkId;
      const newCaipNetworksOfAdapter = [
        ...((_b = chainAdapter.caipNetworks) == null ? void 0 : _b.filter((network) => network.id !== networkId)) || []
      ];
      if (isActiveNetwork && ((_c2 = chainAdapter == null ? void 0 : chainAdapter.caipNetworks) == null ? void 0 : _c2[0])) {
        ChainController.setActiveCaipNetwork(chainAdapter.caipNetworks[0]);
      }
      state18.chains.set(namespace, { ...chainAdapter, caipNetworks: newCaipNetworksOfAdapter });
      ChainController.setRequestedCaipNetworks(newCaipNetworksOfAdapter || [], namespace);
      if (newCaipNetworksOfAdapter.length === 0) {
        ConnectorController.filterByNamespace(namespace, false);
      }
    }
  },
  setAdapterNetworkState(chain, props) {
    const chainAdapter = state18.chains.get(chain);
    if (chainAdapter) {
      chainAdapter.networkState = {
        ...chainAdapter.networkState || networkState,
        ...props
      };
      state18.chains.set(chain, chainAdapter);
    }
  },
  setChainAccountData(chain, accountProps, _unknown = true) {
    if (!chain) {
      throw new Error("Chain is required to update chain account data");
    }
    const chainAdapter = state18.chains.get(chain);
    if (chainAdapter) {
      const newAccountState = { ...chainAdapter.accountState || accountState, ...accountProps };
      state18.chains.set(chain, { ...chainAdapter, accountState: newAccountState });
      if (state18.chains.size === 1 || state18.activeChain === chain) {
        if (accountProps.caipAddress) {
          state18.activeCaipAddress = accountProps.caipAddress;
        }
        AccountController.replaceState(newAccountState);
      }
    }
  },
  setChainNetworkData(chain, networkProps) {
    if (!chain) {
      return;
    }
    const chainAdapter = state18.chains.get(chain);
    if (chainAdapter) {
      const newNetworkState = { ...chainAdapter.networkState || networkState, ...networkProps };
      state18.chains.set(chain, { ...chainAdapter, networkState: newNetworkState });
    }
  },
  // eslint-disable-next-line max-params
  setAccountProp(prop, value, chain, replaceState = true) {
    ChainController.setChainAccountData(chain, { [prop]: value }, replaceState);
    if (prop === "status" && value === "disconnected" && chain) {
      ConnectorController.removeConnectorId(chain);
    }
  },
  setActiveNamespace(chain) {
    var _a, _b;
    state18.activeChain = chain;
    const newAdapter = chain ? state18.chains.get(chain) : void 0;
    const caipNetwork = (_a = newAdapter == null ? void 0 : newAdapter.networkState) == null ? void 0 : _a.caipNetwork;
    if ((caipNetwork == null ? void 0 : caipNetwork.id) && chain) {
      state18.activeCaipAddress = (_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.caipAddress;
      state18.activeCaipNetwork = caipNetwork;
      ChainController.setChainNetworkData(chain, { caipNetwork });
      StorageUtil.setActiveCaipNetworkId(caipNetwork == null ? void 0 : caipNetwork.caipNetworkId);
      PublicStateController.set({
        activeChain: chain,
        selectedNetworkId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
      });
    }
  },
  setActiveCaipNetwork(caipNetwork) {
    var _a, _b, _c2;
    if (!caipNetwork) {
      return;
    }
    if (state18.activeChain !== caipNetwork.chainNamespace) {
      ChainController.setIsSwitchingNamespace(true);
    }
    const newAdapter = state18.chains.get(caipNetwork.chainNamespace);
    state18.activeChain = caipNetwork.chainNamespace;
    state18.activeCaipNetwork = caipNetwork;
    ChainController.setChainNetworkData(caipNetwork.chainNamespace, { caipNetwork });
    if ((_a = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _a.address) {
      state18.activeCaipAddress = `${caipNetwork.chainNamespace}:${caipNetwork.id}:${(_b = newAdapter == null ? void 0 : newAdapter.accountState) == null ? void 0 : _b.address}`;
    } else {
      state18.activeCaipAddress = void 0;
    }
    ChainController.setAccountProp("caipAddress", state18.activeCaipAddress, caipNetwork.chainNamespace);
    if (newAdapter) {
      AccountController.replaceState(newAdapter.accountState);
    }
    SendController.resetSend();
    PublicStateController.set({
      activeChain: state18.activeChain,
      selectedNetworkId: (_c2 = state18.activeCaipNetwork) == null ? void 0 : _c2.caipNetworkId
    });
    StorageUtil.setActiveCaipNetworkId(caipNetwork.caipNetworkId);
    const isSupported = ChainController.checkIfSupportedNetwork(caipNetwork.chainNamespace);
    if (!isSupported && OptionsController.state.enableNetworkSwitch && !OptionsController.state.allowUnsupportedChain && !ConnectionController.state.wcBasic) {
      ChainController.showUnsupportedChainUI();
    }
  },
  addCaipNetwork(caipNetwork) {
    var _a;
    if (!caipNetwork) {
      return;
    }
    const chain = state18.chains.get(caipNetwork.chainNamespace);
    if (chain) {
      (_a = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _a.push(caipNetwork);
    }
  },
  async switchActiveNamespace(namespace) {
    var _a;
    if (!namespace) {
      return;
    }
    const isDifferentChain = namespace !== ChainController.state.activeChain;
    const caipNetworkOfNamespace = (_a = ChainController.getNetworkData(namespace)) == null ? void 0 : _a.caipNetwork;
    const firstNetworkWithChain = ChainController.getCaipNetworkByNamespace(namespace, caipNetworkOfNamespace == null ? void 0 : caipNetworkOfNamespace.id);
    if (isDifferentChain && firstNetworkWithChain) {
      await ChainController.switchActiveNetwork(firstNetworkWithChain);
    }
  },
  async switchActiveNetwork(network) {
    var _a;
    const activeAdapter = ChainController.state.chains.get(ChainController.state.activeChain);
    const unsupportedNetwork = !((_a = activeAdapter == null ? void 0 : activeAdapter.caipNetworks) == null ? void 0 : _a.some((caipNetwork) => {
      var _a2;
      return caipNetwork.id === ((_a2 = state18.activeCaipNetwork) == null ? void 0 : _a2.id);
    }));
    const networkControllerClient = ChainController.getNetworkControllerClient(network.chainNamespace);
    if (networkControllerClient) {
      try {
        await networkControllerClient.switchCaipNetwork(network);
        if (unsupportedNetwork) {
          ModalController.close();
        }
      } catch (error) {
        RouterController.goBack();
      }
      EventsController.sendEvent({
        type: "track",
        event: "SWITCH_NETWORK",
        properties: { network: network.caipNetworkId }
      });
    }
  },
  getNetworkControllerClient(chainNamespace) {
    const chain = chainNamespace || state18.activeChain;
    const chainAdapter = state18.chains.get(chain);
    if (!chainAdapter) {
      throw new Error("Chain adapter not found");
    }
    if (!chainAdapter.networkControllerClient) {
      throw new Error("NetworkController client not set");
    }
    return chainAdapter.networkControllerClient;
  },
  getConnectionControllerClient(_chain) {
    const chain = _chain || state18.activeChain;
    if (!chain) {
      throw new Error("Chain is required to get connection controller client");
    }
    const chainAdapter = state18.chains.get(chain);
    if (!(chainAdapter == null ? void 0 : chainAdapter.connectionControllerClient)) {
      throw new Error("ConnectionController client not set");
    }
    return chainAdapter.connectionControllerClient;
  },
  getAccountProp(key, _chain) {
    var _a;
    let chain = state18.activeChain;
    if (_chain) {
      chain = _chain;
    }
    if (!chain) {
      return void 0;
    }
    const chainAccountState = (_a = state18.chains.get(chain)) == null ? void 0 : _a.accountState;
    if (!chainAccountState) {
      return void 0;
    }
    return chainAccountState[key];
  },
  getNetworkProp(key, namespace) {
    var _a;
    const chainNetworkState = (_a = state18.chains.get(namespace)) == null ? void 0 : _a.networkState;
    if (!chainNetworkState) {
      return void 0;
    }
    return chainNetworkState[key];
  },
  getRequestedCaipNetworks(chainToFilter) {
    const adapter = state18.chains.get(chainToFilter);
    const { approvedCaipNetworkIds = [], requestedCaipNetworks = [] } = (adapter == null ? void 0 : adapter.networkState) || {};
    const sortedNetworks = CoreHelperUtil.sortRequestedNetworks(approvedCaipNetworkIds, requestedCaipNetworks);
    return sortedNetworks;
  },
  getAllRequestedCaipNetworks() {
    const requestedCaipNetworks = [];
    state18.chains.forEach((chainAdapter) => {
      const caipNetworks = ChainController.getRequestedCaipNetworks(chainAdapter.namespace);
      requestedCaipNetworks.push(...caipNetworks);
    });
    return requestedCaipNetworks;
  },
  setRequestedCaipNetworks(caipNetworks, chain) {
    ChainController.setAdapterNetworkState(chain, { requestedCaipNetworks: caipNetworks });
    const allRequestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const namespaces = allRequestedCaipNetworks.map((network) => network.chainNamespace);
    const uniqueNamespaces = Array.from(new Set(namespaces));
    ConnectorController.filterByNamespaces(uniqueNamespaces);
  },
  getAllApprovedCaipNetworkIds() {
    const approvedCaipNetworkIds = [];
    state18.chains.forEach((chainAdapter) => {
      const approvedIds = ChainController.getApprovedCaipNetworkIds(chainAdapter.namespace);
      approvedCaipNetworkIds.push(...approvedIds);
    });
    return approvedCaipNetworkIds;
  },
  getActiveCaipNetwork() {
    return state18.activeCaipNetwork;
  },
  getActiveCaipAddress() {
    return state18.activeCaipAddress;
  },
  getApprovedCaipNetworkIds(namespace) {
    var _a;
    const adapter = state18.chains.get(namespace);
    const approvedCaipNetworkIds = ((_a = adapter == null ? void 0 : adapter.networkState) == null ? void 0 : _a.approvedCaipNetworkIds) || [];
    return approvedCaipNetworkIds;
  },
  async setApprovedCaipNetworksData(namespace) {
    const networkControllerClient = ChainController.getNetworkControllerClient();
    const data = await (networkControllerClient == null ? void 0 : networkControllerClient.getApprovedCaipNetworksData());
    ChainController.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: data == null ? void 0 : data.approvedCaipNetworkIds,
      supportsAllNetworks: data == null ? void 0 : data.supportsAllNetworks
    });
  },
  checkIfSupportedNetwork(namespace, caipNetwork) {
    const activeCaipNetwork = caipNetwork || state18.activeCaipNetwork;
    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(namespace);
    if (!requestedCaipNetworks.length) {
      return true;
    }
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === (activeCaipNetwork == null ? void 0 : activeCaipNetwork.id));
  },
  checkIfSupportedChainId(chainId) {
    if (!state18.activeChain) {
      return true;
    }
    const requestedCaipNetworks = ChainController.getRequestedCaipNetworks(state18.activeChain);
    return requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.some((network) => network.id === chainId);
  },
  // Smart Account Network Handlers
  setSmartAccountEnabledNetworks(smartAccountEnabledNetworks, chain) {
    ChainController.setAdapterNetworkState(chain, { smartAccountEnabledNetworks });
  },
  checkIfSmartAccountEnabled() {
    var _a;
    const networkId = NetworkUtil.caipNetworkIdToNumber((_a = state18.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId);
    const activeChain = state18.activeChain;
    if (!activeChain || !networkId) {
      return false;
    }
    const smartAccountEnabledNetworks = ChainController.getNetworkProp("smartAccountEnabledNetworks", activeChain);
    return Boolean(smartAccountEnabledNetworks == null ? void 0 : smartAccountEnabledNetworks.includes(Number(networkId)));
  },
  getActiveNetworkTokenAddress() {
    var _a, _b;
    const namespace = ((_a = state18.activeCaipNetwork) == null ? void 0 : _a.chainNamespace) || "eip155";
    const chainId = ((_b = state18.activeCaipNetwork) == null ? void 0 : _b.id) || 1;
    const address = ConstantsUtil2.NATIVE_TOKEN_ADDRESS[namespace];
    return `${namespace}:${chainId}:${address}`;
  },
  showUnsupportedChainUI() {
    ModalController.open({ view: "UnsupportedChain" });
  },
  checkIfNamesSupported() {
    const activeCaipNetwork = state18.activeCaipNetwork;
    return Boolean((activeCaipNetwork == null ? void 0 : activeCaipNetwork.chainNamespace) && ConstantsUtil2.NAMES_SUPPORTED_CHAIN_NAMESPACES.includes(activeCaipNetwork.chainNamespace));
  },
  resetNetwork(namespace) {
    ChainController.setAdapterNetworkState(namespace, {
      approvedCaipNetworkIds: void 0,
      supportsAllNetworks: true,
      smartAccountEnabledNetworks: []
    });
  },
  resetAccount(chain) {
    const chainToWrite = chain;
    if (!chainToWrite) {
      throw new Error("Chain is required to set account prop");
    }
    state18.activeCaipAddress = void 0;
    ChainController.setChainAccountData(chainToWrite, {
      smartAccountDeployed: false,
      currentTab: 0,
      caipAddress: void 0,
      address: void 0,
      balance: void 0,
      balanceSymbol: void 0,
      profileName: void 0,
      profileImage: void 0,
      addressExplorerUrl: void 0,
      tokenBalance: [],
      connectedWalletInfo: void 0,
      preferredAccountTypes: void 0,
      socialProvider: void 0,
      socialWindow: void 0,
      farcasterUrl: void 0,
      allAccounts: [],
      user: void 0,
      status: "disconnected"
    });
    ConnectorController.removeConnectorId(chainToWrite);
  },
  setIsSwitchingNamespace(isSwitchingNamespace) {
    state18.isSwitchingNamespace = isSwitchingNamespace;
  },
  getFirstCaipNetworkSupportsAuthConnector() {
    var _a, _b;
    const availableChains = [];
    let firstCaipNetwork = void 0;
    state18.chains.forEach((chain) => {
      if (ConstantsUtil.AUTH_CONNECTOR_SUPPORTED_CHAINS.find((ns2) => ns2 === chain.namespace)) {
        if (chain.namespace) {
          availableChains.push(chain.namespace);
        }
      }
    });
    if (availableChains.length > 0) {
      const firstAvailableChain = availableChains[0];
      firstCaipNetwork = firstAvailableChain ? (_b = (_a = state18.chains.get(firstAvailableChain)) == null ? void 0 : _a.caipNetworks) == null ? void 0 : _b[0] : void 0;
      return firstCaipNetwork;
    }
    return void 0;
  },
  getAccountData(chainNamespace) {
    var _a;
    if (!chainNamespace) {
      return AccountController.state;
    }
    return (_a = ChainController.state.chains.get(chainNamespace)) == null ? void 0 : _a.accountState;
  },
  getNetworkData(chainNamespace) {
    var _a;
    const namespace = chainNamespace || state18.activeChain;
    if (!namespace) {
      return void 0;
    }
    return (_a = ChainController.state.chains.get(namespace)) == null ? void 0 : _a.networkState;
  },
  getCaipNetworkByNamespace(chainNamespace, chainId) {
    var _a, _b, _c2;
    if (!chainNamespace) {
      return void 0;
    }
    const chain = ChainController.state.chains.get(chainNamespace);
    const byChainId = (_a = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _a.find((network) => network.id === chainId);
    if (byChainId) {
      return byChainId;
    }
    return ((_b = chain == null ? void 0 : chain.networkState) == null ? void 0 : _b.caipNetwork) || ((_c2 = chain == null ? void 0 : chain.caipNetworks) == null ? void 0 : _c2[0]);
  },
  /**
   * Get the requested CaipNetwork IDs for a given namespace. If namespace is not provided, all requested CaipNetwork IDs will be returned
   * @param namespace - The namespace to get the requested CaipNetwork IDs for
   * @returns The requested CaipNetwork IDs
   */
  getRequestedCaipNetworkIds() {
    const namespace = ConnectorController.state.filterByNamespace;
    const chains = namespace ? [state18.chains.get(namespace)] : Array.from(state18.chains.values());
    return chains.flatMap((chain) => (chain == null ? void 0 : chain.caipNetworks) || []).map((caipNetwork) => caipNetwork.caipNetworkId);
  },
  getCaipNetworks(namespace) {
    if (namespace) {
      return ChainController.getRequestedCaipNetworks(namespace);
    }
    return ChainController.getAllRequestedCaipNetworks();
  }
};
var ChainController = withErrorBoundary(controller12);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/ApiController.js
var baseUrl3 = CoreHelperUtil.getApiUrl();
var api3 = new FetchUtil({
  baseUrl: baseUrl3,
  clientId: null
});
var entries = 40;
var recommendedEntries = 4;
var imageCountToFetch = 20;
var state19 = proxy({
  promises: {},
  page: 1,
  count: 0,
  featured: [],
  allFeatured: [],
  recommended: [],
  allRecommended: [],
  wallets: [],
  filteredWallets: [],
  search: [],
  isAnalyticsEnabled: false,
  excludedWallets: [],
  isFetchingRecommendedWallets: false
});
var ApiController = {
  state: state19,
  subscribeKey(key, callback) {
    return subscribeKey(state19, key, callback);
  },
  _getSdkProperties() {
    const { projectId, sdkType, sdkVersion } = OptionsController.state;
    return {
      projectId,
      st: sdkType || "appkit",
      sv: sdkVersion || "html-wagmi-4.2.2"
    };
  },
  _filterOutExtensions(wallets) {
    if (OptionsController.state.isUniversalProvider) {
      return wallets.filter((w2) => Boolean(w2.mobile_link || w2.desktop_link || w2.webapp_link));
    }
    return wallets;
  },
  async _fetchWalletImage(imageId) {
    const imageUrl = `${api3.baseUrl}/getWalletImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setWalletImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchNetworkImage(imageId) {
    const imageUrl = `${api3.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setNetworkImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchConnectorImage(imageId) {
    const imageUrl = `${api3.baseUrl}/public/getAssetImage/${imageId}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setConnectorImage(imageId, URL.createObjectURL(blob));
  },
  async _fetchCurrencyImage(countryCode) {
    const imageUrl = `${api3.baseUrl}/public/getCurrencyImage/${countryCode}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setCurrencyImage(countryCode, URL.createObjectURL(blob));
  },
  async _fetchTokenImage(symbol) {
    const imageUrl = `${api3.baseUrl}/public/getTokenImage/${symbol}`;
    const blob = await api3.getBlob({ path: imageUrl, params: ApiController._getSdkProperties() });
    AssetController.setTokenImage(symbol, URL.createObjectURL(blob));
  },
  _filterWalletsByPlatform(wallets) {
    const filteredWallets = CoreHelperUtil.isMobile() ? wallets == null ? void 0 : wallets.filter((w2) => {
      if (w2.mobile_link) {
        return true;
      }
      if (w2.id === CUSTOM_DEEPLINK_WALLETS.COINBASE.id) {
        return true;
      }
      const isSolana = ChainController.state.activeChain === "solana";
      return isSolana && (w2.id === CUSTOM_DEEPLINK_WALLETS.SOLFLARE.id || w2.id === CUSTOM_DEEPLINK_WALLETS.PHANTOM.id);
    }) : wallets;
    return filteredWallets;
  },
  async fetchProjectConfig() {
    const response = await api3.get({
      path: "/appkit/v1/config",
      params: ApiController._getSdkProperties()
    });
    return response.features;
  },
  async fetchAllowedOrigins() {
    try {
      const { allowedOrigins } = await api3.get({
        path: "/projects/v1/origins",
        params: ApiController._getSdkProperties()
      });
      return allowedOrigins;
    } catch (error) {
      return [];
    }
  },
  async fetchNetworkImages() {
    const requestedCaipNetworks = ChainController.getAllRequestedCaipNetworks();
    const ids = requestedCaipNetworks == null ? void 0 : requestedCaipNetworks.map(({ assets }) => assets == null ? void 0 : assets.imageId).filter(Boolean).filter((imageId) => !AssetUtil.getNetworkImageById(imageId));
    if (ids) {
      await Promise.allSettled(ids.map((id) => ApiController._fetchNetworkImage(id)));
    }
  },
  async fetchConnectorImages() {
    const { connectors } = ConnectorController.state;
    const ids = connectors.map(({ imageId }) => imageId).filter(Boolean);
    await Promise.allSettled(ids.map((id) => ApiController._fetchConnectorImage(id)));
  },
  async fetchCurrencyImages(currencies = []) {
    await Promise.allSettled(currencies.map((currency) => ApiController._fetchCurrencyImage(currency)));
  },
  async fetchTokenImages(tokens = []) {
    await Promise.allSettled(tokens.map((token) => ApiController._fetchTokenImage(token)));
  },
  async fetchWallets(params) {
    var _a;
    const exclude = params.exclude ?? [];
    const sdkProperties = ApiController._getSdkProperties();
    if (sdkProperties.sv.startsWith("html-core-")) {
      exclude.push(...Object.values(CUSTOM_DEEPLINK_WALLETS).map((w2) => w2.id));
    }
    const wallets = await api3.get({
      path: "/getWallets",
      params: {
        ...ApiController._getSdkProperties(),
        ...params,
        page: String(params.page),
        entries: String(params.entries),
        include: (_a = params.include) == null ? void 0 : _a.join(","),
        exclude: exclude.join(",")
      }
    });
    const filteredWallets = ApiController._filterWalletsByPlatform(wallets == null ? void 0 : wallets.data);
    return {
      data: filteredWallets || [],
      // Keep original count for display on main page
      count: wallets == null ? void 0 : wallets.count
    };
  },
  async fetchFeaturedWallets() {
    const { featuredWalletIds } = OptionsController.state;
    if (featuredWalletIds == null ? void 0 : featuredWalletIds.length) {
      const params = {
        ...ApiController._getSdkProperties(),
        page: 1,
        entries: (featuredWalletIds == null ? void 0 : featuredWalletIds.length) ?? recommendedEntries,
        include: featuredWalletIds
      };
      const { data } = await ApiController.fetchWallets(params);
      const sortedData = [...data].sort((a2, b4) => featuredWalletIds.indexOf(a2.id) - featuredWalletIds.indexOf(b4.id));
      const images = sortedData.map((d3) => d3.image_id).filter(Boolean);
      await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
      state19.featured = sortedData;
      state19.allFeatured = sortedData;
    }
  },
  async fetchRecommendedWallets() {
    try {
      state19.isFetchingRecommendedWallets = true;
      const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
      const exclude = [...excludeWalletIds ?? [], ...featuredWalletIds ?? []].filter(Boolean);
      const chains = ChainController.getRequestedCaipNetworkIds().join(",");
      const params = {
        page: 1,
        entries: recommendedEntries,
        include: includeWalletIds,
        exclude,
        chains
      };
      const { data, count } = await ApiController.fetchWallets(params);
      const recent = StorageUtil.getRecentWallets();
      const recommendedImages = data.map((d3) => d3.image_id).filter(Boolean);
      const recentImages = recent.map((r2) => r2.image_id).filter(Boolean);
      await Promise.allSettled([...recommendedImages, ...recentImages].map((id) => ApiController._fetchWalletImage(id)));
      state19.recommended = data;
      state19.allRecommended = data;
      state19.count = count ?? 0;
    } catch {
    } finally {
      state19.isFetchingRecommendedWallets = false;
    }
  },
  async fetchWalletsByPage({ page }) {
    const { includeWalletIds, excludeWalletIds, featuredWalletIds } = OptionsController.state;
    const chains = ChainController.getRequestedCaipNetworkIds().join(",");
    const exclude = [
      ...state19.recommended.map(({ id }) => id),
      ...excludeWalletIds ?? [],
      ...featuredWalletIds ?? []
    ].filter(Boolean);
    const params = {
      page,
      entries,
      include: includeWalletIds,
      exclude,
      chains
    };
    const { data, count } = await ApiController.fetchWallets(params);
    const images = data.slice(0, imageCountToFetch).map((w2) => w2.image_id).filter(Boolean);
    await Promise.allSettled(images.map((id) => ApiController._fetchWalletImage(id)));
    state19.wallets = CoreHelperUtil.uniqueBy([...state19.wallets, ...ApiController._filterOutExtensions(data)], "id").filter((w2) => {
      var _a;
      return (_a = w2.chains) == null ? void 0 : _a.some((chain) => chains.includes(chain));
    });
    state19.count = count > state19.count ? count : state19.count;
    state19.page = page;
  },
  async initializeExcludedWallets({ ids }) {
    const params = {
      page: 1,
      entries: ids.length,
      include: ids
    };
    const { data } = await ApiController.fetchWallets(params);
    if (data) {
      data.forEach((wallet) => {
        state19.excludedWallets.push({ rdns: wallet.rdns, name: wallet.name });
      });
    }
  },
  async searchWallet({ search, badge }) {
    const { includeWalletIds, excludeWalletIds } = OptionsController.state;
    const chains = ChainController.getRequestedCaipNetworkIds().join(",");
    state19.search = [];
    const params = {
      page: 1,
      entries: 100,
      search: search == null ? void 0 : search.trim(),
      badge_type: badge,
      include: includeWalletIds,
      exclude: excludeWalletIds,
      chains
    };
    const { data } = await ApiController.fetchWallets(params);
    EventsController.sendEvent({
      type: "track",
      event: "SEARCH_WALLET",
      properties: { badge: badge ?? "", search: search ?? "" }
    });
    const images = data.map((w2) => w2.image_id).filter(Boolean);
    await Promise.allSettled([
      ...images.map((id) => ApiController._fetchWalletImage(id)),
      CoreHelperUtil.wait(300)
    ]);
    state19.search = ApiController._filterOutExtensions(data);
  },
  initPromise(key, fetchFn) {
    const existingPromise = state19.promises[key];
    if (existingPromise) {
      return existingPromise;
    }
    return state19.promises[key] = fetchFn();
  },
  prefetch({ fetchConnectorImages = true, fetchFeaturedWallets = true, fetchRecommendedWallets = true, fetchNetworkImages = true } = {}) {
    const promises = [
      fetchConnectorImages && ApiController.initPromise("connectorImages", ApiController.fetchConnectorImages),
      fetchFeaturedWallets && ApiController.initPromise("featuredWallets", ApiController.fetchFeaturedWallets),
      fetchRecommendedWallets && ApiController.initPromise("recommendedWallets", ApiController.fetchRecommendedWallets),
      fetchNetworkImages && ApiController.initPromise("networkImages", ApiController.fetchNetworkImages)
    ].filter(Boolean);
    return Promise.allSettled(promises);
  },
  prefetchAnalyticsConfig() {
    var _a;
    if ((_a = OptionsController.state.features) == null ? void 0 : _a.analytics) {
      ApiController.fetchAnalyticsConfig();
    }
  },
  async fetchAnalyticsConfig() {
    try {
      const { isAnalyticsEnabled } = await api3.get({
        path: "/getAnalyticsConfig",
        params: ApiController._getSdkProperties()
      });
      OptionsController.setFeatures({ analytics: isAnalyticsEnabled });
    } catch (error) {
      OptionsController.setFeatures({ analytics: false });
    }
  },
  filterByNamespaces(namespaces) {
    if (!(namespaces == null ? void 0 : namespaces.length)) {
      state19.featured = state19.allFeatured;
      state19.recommended = state19.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state19.featured = state19.allFeatured.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
    state19.recommended = state19.allRecommended.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
    state19.filteredWallets = state19.wallets.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
  },
  clearFilterByNamespaces() {
    state19.filteredWallets = [];
  },
  setFilterByNamespace(namespace) {
    if (!namespace) {
      state19.featured = state19.allFeatured;
      state19.recommended = state19.allRecommended;
      return;
    }
    const caipNetworkIds = ChainController.getRequestedCaipNetworkIds().join(",");
    state19.featured = state19.allFeatured.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
    state19.recommended = state19.allRecommended.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
    state19.filteredWallets = state19.wallets.filter((wallet) => {
      var _a;
      return (_a = wallet.chains) == null ? void 0 : _a.some((chain) => caipNetworkIds.includes(chain));
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js
var import_events3 = __toESM(require_events());

// node_modules/@walletconnect/types/dist/index.es.js
var import_events2 = __toESM(require_events());
var a = Object.defineProperty;
var u2 = (e2, s2, r2) => s2 in e2 ? a(e2, s2, { enumerable: true, configurable: true, writable: true, value: r2 }) : e2[s2] = r2;
var c2 = (e2, s2, r2) => u2(e2, typeof s2 != "symbol" ? s2 + "" : s2, r2);
var h3 = class extends IEvents {
  constructor(s2) {
    super(), this.opts = s2, c2(this, "protocol", "wc"), c2(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e2, s2, r2) => s2 in e2 ? p(e2, s2, { enumerable: true, configurable: true, writable: true, value: r2 }) : e2[s2] = r2;
var v = (e2, s2, r2) => b(e2, typeof s2 != "symbol" ? s2 + "" : s2, r2);
var I = class extends IEvents {
  constructor(s2, r2) {
    super(), this.core = s2, this.logger = r2, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y3 = class {
  constructor(s2, r2) {
    this.logger = s2, this.core = r2;
  }
};
var m = class extends IEvents {
  constructor(s2, r2) {
    super(), this.relayer = s2, this.logger = r2;
  }
};
var d = class extends IEvents {
  constructor(s2) {
    super();
  }
};
var f4 = class {
  constructor(s2, r2, t2, q3) {
    this.core = s2, this.logger = r2, this.name = t2;
  }
};
var P2 = class extends IEvents {
  constructor(s2, r2) {
    super(), this.relayer = s2, this.logger = r2;
  }
};
var S = class extends IEvents {
  constructor(s2, r2) {
    super(), this.core = s2, this.logger = r2;
  }
};
var M = class {
  constructor(s2, r2, t2) {
    this.core = s2, this.logger = r2, this.store = t2;
  }
};
var O = class {
  constructor(s2, r2) {
    this.projectId = s2, this.logger = r2;
  }
};
var R = class {
  constructor(s2, r2, t2) {
    this.core = s2, this.logger = r2, this.telemetryEnabled = t2;
  }
};
var T = Object.defineProperty;
var k2 = (e2, s2, r2) => s2 in e2 ? T(e2, s2, { enumerable: true, configurable: true, writable: true, value: r2 }) : e2[s2] = r2;
var i3 = (e2, s2, r2) => k2(e2, typeof s2 != "symbol" ? s2 + "" : s2, r2);
var J = class {
  constructor(s2) {
    this.opts = s2, i3(this, "protocol", "wc"), i3(this, "version", 2);
  }
};
var V = class {
  constructor(s2) {
    this.client = s2;
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js
var import_time2 = __toESM(require_cjs());

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/utils/dist/index.es.js
var import_time = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-XZBPDVFF.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r2, s: s2, v: v4, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v4);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r2), hexToBigInt(s2)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber(count);
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/@walletconnect/universal-provider/node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_, i4) => i4));
var Pi = Id.map((i4) => (9 * i4 + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i4 = 0; i4 < 4; i4++)
  for (let j2 of [idxL, idxR])
    j2.push(j2[i4].map((k5) => Rho[k5]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => new Uint8Array(i4));
var shiftsL = idxL.map((idx, i4) => idx.map((j2) => shifts[i4][j2]));
var shiftsR = idxR.map((idx, i4) => idx.map((j2) => shifts[i4][j2]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f5(group, x2, y6, z2) {
  if (group === 0)
    return x2 ^ y6 ^ z2;
  else if (group === 1)
    return x2 & y6 | ~x2 & z2;
  else if (group === 2)
    return (x2 | ~y6) ^ z2;
  else if (group === 3)
    return x2 & z2 | y6 & ~z2;
  else
    return x2 ^ (y6 | ~z2);
}
var R_BUF = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      R_BUF[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br3 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr3 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr3 = idxR[group];
      const sl = shiftsL[group], sr3 = shiftsR[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl(al + f5(group, bl, cl, dl) + R_BUF[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr3 = rotl(ar3 + f5(rGroup, br3, cr3, dr3) + R_BUF[rr3[i4]] + hbr, sr3[i4]) + er3 | 0;
        ar3 = er3, er3 = dr3, dr3 = rotl(cr3, 10) | 0, cr3 = br3, br3 = tr3;
      }
    }
    this.set(this.h1 + cl + dr3 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br3 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// node_modules/@walletconnect/universal-provider/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/utils.js
function isBytes2(a2) {
  return a2 instanceof Uint8Array || ArrayBuffer.isView(a2) && a2.constructor.name === "Uint8Array";
}
function anumber(n2) {
  if (!Number.isSafeInteger(n2) || n2 < 0)
    throw new Error("positive integer expected, got " + n2);
}
function abytes(b4, ...lengths) {
  if (!isBytes2(b4))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b4.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b4.length);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u32(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean(...arrays) {
  for (let i4 = 0; i4 < arrays.length; i4++) {
    arrays[i4].fill(0);
  }
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl2(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap32(arr) {
  for (let i4 = 0; i4 < arr.length; i4++) {
    arr[i4] = byteSwap(arr[i4]);
  }
  return arr;
}
var swap32IfBE = isLE ? (u4) => u4 : byteSwap32;
var hasHexBuiltin = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes = Array.from({ length: 256 }, (_, i4) => i4.toString(16).padStart(2, "0"));
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes2(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
var Hash = class {
};
function createHasher(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createXOFer(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/curves/esm/utils.js
var _0n = BigInt(0);
var _1n = BigInt(1);

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/version.js
var version = "0.1.1";

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/errors.js
function getVersion2() {
  return version;
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Errors.js
var BaseError2 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x2) => typeof x2 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion2()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn3) {
    return walk(this, fn3);
  }
};
function walk(err, fn3) {
  if (fn3 == null ? void 0 : fn3(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn3);
  return fn3 ? null : err;
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/bytes.js
function assertSize(bytes, size_) {
  if (size2(bytes) > size_)
    throw new SizeOverflowError({
      givenSize: size2(bytes),
      maxSize: size_
    });
}
var charCodeMap = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase16(char) {
  if (char >= charCodeMap.zero && char <= charCodeMap.nine)
    return char - charCodeMap.zero;
  if (char >= charCodeMap.A && char <= charCodeMap.F)
    return char - (charCodeMap.A - 10);
  if (char >= charCodeMap.a && char <= charCodeMap.f)
    return char - (charCodeMap.a - 10);
  return void 0;
}
function pad2(bytes, options = {}) {
  const { dir, size: size4 = 32 } = options;
  if (size4 === 0)
    return bytes;
  if (bytes.length > size4)
    throw new SizeExceedsPaddingSizeError({
      size: bytes.length,
      targetSize: size4,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size4);
  for (let i4 = 0; i4 < size4; i4++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i4 : size4 - i4 - 1] = bytes[padEnd ? i4 : bytes.length - i4 - 1];
  }
  return paddedBytes;
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/hex.js
function assertSize2(hex, size_) {
  if (size3(hex) > size_)
    throw new SizeOverflowError2({
      givenSize: size3(hex),
      maxSize: size_
    });
}
function pad3(hex_, options = {}) {
  const { dir, size: size4 = 32 } = options;
  if (size4 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size4 * 2)
    throw new SizeExceedsPaddingSizeError2({
      size: Math.ceil(hex.length / 2),
      targetSize: size4,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size4 * 2, "0")}`;
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Bytes.js
var decoder = new TextDecoder();
var encoder = new TextEncoder();
function from(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex2(value);
  return fromArray(value);
}
function fromArray(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex2(value, options = {}) {
  const { size: size4 } = options;
  let hex = value;
  if (size4) {
    assertSize2(value, size4);
    hex = padRight(value, size4);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length = hexString.length / 2;
  const bytes = new Uint8Array(length);
  for (let index = 0, j2 = 0; index < length; index++) {
    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j2++));
    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j2++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError2(`Invalid byte sequence ("${hexString[j2 - 2]}${hexString[j2 - 1]}" in "${hexString}").`);
    }
    bytes[index] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString2(value, options = {}) {
  const { size: size4 } = options;
  const bytes = encoder.encode(value);
  if (typeof size4 === "number") {
    assertSize(bytes, size4);
    return padRight2(bytes, size4);
  }
  return bytes;
}
function padRight2(value, size4) {
  return pad2(value, { dir: "right", size: size4 });
}
function size2(value) {
  return value.length;
}
var SizeOverflowError = class extends BaseError2 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError = class extends BaseError2 {
  constructor({ size: size4, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size4}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Hex.js
var encoder2 = new TextEncoder();
var hexes2 = Array.from({ length: 256 }, (_v, i4) => i4.toString(16).padStart(2, "0"));
function concat3(...values) {
  return `0x${values.reduce((acc, x2) => acc + x2.replace("0x", ""), "")}`;
}
function fromBoolean(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padLeft(hex, options.size);
  }
  return hex;
}
function fromBytes2(value, options = {}) {
  let string = "";
  for (let i4 = 0; i4 < value.length; i4++)
    string += hexes2[value[i4]];
  const hex = `0x${string}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padRight(hex, options.size);
  }
  return hex;
}
function fromNumber(value, options = {}) {
  const { signed, size: size4 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size4) {
    if (signed)
      maxValue = (1n << BigInt(size4) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size4) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size4,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size4 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size4)
    return padLeft(hex, size4);
  return hex;
}
function fromString3(value, options = {}) {
  return fromBytes2(encoder2.encode(value), options);
}
function padLeft(value, size4) {
  return pad3(value, { dir: "left", size: size4 });
}
function padRight(value, size4) {
  return pad3(value, { dir: "right", size: size4 });
}
function size3(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError = class extends BaseError2 {
  constructor({ max, min, signed, size: size4, value }) {
    super(`Number \`${value}\` is not in safe${size4 ? ` ${size4 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError2 = class extends BaseError2 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError2 = class extends BaseError2 {
  constructor({ size: size4, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size4}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h5 = isLE2 ? 4 : 0;
  const l4 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h5, wh, isLE2);
  view.setUint32(byteOffset + l4, wl, isLE2);
}
function Chi(a2, b4, c4) {
  return a2 & b4 ^ ~a2 & c4;
}
function Maj(a2, b4, c4) {
  return a2 & b4 ^ a2 & c4 ^ b4 & c4;
}
var HashMD2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes2(data);
    abytes(data);
    const { view, buffer, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    clean(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i4 = pos; i4 < blockLen; i4++)
      buffer[i4] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state25 = this.get();
    if (outLen > state25.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i4 = 0; i4 < outLen; i4++)
      oview.setUint32(4 * i4, state25[i4], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to3) {
    to3 || (to3 = new this.constructor());
    to3.set(...this.get());
    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to3.destroyed = destroyed;
    to3.finished = finished;
    to3.length = length;
    to3.pos = pos;
    if (length % blockLen)
      to3.buffer.set(buffer);
    return to3;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A4, B: B3, C: C5, D: D2, E: E5 } = this;
    return [A4, B3, C5, D2, E5];
  }
  set(A4, B3, C5, D2, E5) {
    this.A = A4 | 0;
    this.B = B3 | 0;
    this.C = C5 | 0;
    this.D = D2 | 0;
    this.E = E5 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA1_W[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 80; i4++)
      SHA1_W[i4] = rotl2(SHA1_W[i4 - 3] ^ SHA1_W[i4 - 8] ^ SHA1_W[i4 - 14] ^ SHA1_W[i4 - 16], 1);
    let { A: A4, B: B3, C: C5, D: D2, E: E5 } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      let F4, K4;
      if (i4 < 20) {
        F4 = Chi(B3, C5, D2);
        K4 = 1518500249;
      } else if (i4 < 40) {
        F4 = B3 ^ C5 ^ D2;
        K4 = 1859775393;
      } else if (i4 < 60) {
        F4 = Maj(B3, C5, D2);
        K4 = 2400959708;
      } else {
        F4 = B3 ^ C5 ^ D2;
        K4 = 3395469782;
      }
      const T2 = rotl2(A4, 5) + F4 + E5 + K4 + SHA1_W[i4] | 0;
      E5 = D2;
      D2 = C5;
      C5 = rotl2(B3, 30);
      B3 = A4;
      A4 = T2;
    }
    A4 = A4 + this.A | 0;
    B3 = B3 + this.B | 0;
    C5 = C5 + this.C | 0;
    D2 = D2 + this.D | 0;
    E5 = E5 + this.E | 0;
    this.set(A4, B3, C5, D2, E5);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha1 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K = Array.from({ length: 64 }, (_, i4) => Math.floor(p32 * Math.abs(Math.sin(i4 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD2 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A4, B: B3, C: C5, D: D2 } = this;
    return [A4, B3, C5, D2];
  }
  set(A4, B3, C5, D2) {
    this.A = A4 | 0;
    this.B = B3 | 0;
    this.C = C5 | 0;
    this.D = D2 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      MD5_W[i4] = view.getUint32(offset, true);
    let { A: A4, B: B3, C: C5, D: D2 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      let F4, g, s2;
      if (i4 < 16) {
        F4 = Chi(B3, C5, D2);
        g = i4;
        s2 = [7, 12, 17, 22];
      } else if (i4 < 32) {
        F4 = Chi(D2, B3, C5);
        g = (5 * i4 + 1) % 16;
        s2 = [5, 9, 14, 20];
      } else if (i4 < 48) {
        F4 = B3 ^ C5 ^ D2;
        g = (3 * i4 + 5) % 16;
        s2 = [4, 11, 16, 23];
      } else {
        F4 = C5 ^ (B3 | ~D2);
        g = 7 * i4 % 16;
        s2 = [6, 10, 15, 21];
      }
      F4 = F4 + A4 + K[i4] + MD5_W[g];
      A4 = D2;
      D2 = C5;
      C5 = B3;
      B3 = B3 + rotl2(F4, s2[i4 % 4]);
    }
    A4 = A4 + this.A | 0;
    B3 = B3 + this.B | 0;
    C5 = C5 + this.C | 0;
    D2 = D2 + this.D | 0;
    this.set(A4, B3, C5, D2);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md5 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_, i4) => i4)))();
var Pi160 = (() => Id160.map((i4) => (9 * i4 + 5) % 16))();
var idxLR = (() => {
  const L3 = [Id160];
  const R4 = [Pi160];
  const res = [L3, R4];
  for (let i4 = 0; i4 < 4; i4++)
    for (let j2 of res)
      j2.push(j2[i4].map((k5) => Rho160[k5]));
  return res;
})();
var idxL2 = (() => idxLR[0])();
var idxR2 = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i4) => Uint8Array.from(i4));
var shiftsL160 = idxL2.map((idx, i4) => idx.map((j2) => shifts160[i4][j2]));
var shiftsR160 = idxR2.map((idx, i4) => idx.map((j2) => shifts160[i4][j2]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x2, y6, z2) {
  if (group === 0)
    return x2 ^ y6 ^ z2;
  if (group === 1)
    return x2 & y6 | ~x2 & z2;
  if (group === 2)
    return (x2 | ~y6) ^ z2;
  if (group === 3)
    return x2 & z2 | y6 & ~z2;
  return x2 ^ (y6 | ~z2);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD1602 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4: h42 } = this;
    return [h0, h1, h22, h32, h42];
  }
  set(h0, h1, h22, h32, h42) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h42 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      BUF_160[i4] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br3 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr3 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL2[group], rr3 = idxR2[group];
      const sl = shiftsL160[group], sr3 = shiftsR160[group];
      for (let i4 = 0; i4 < 16; i4++) {
        const tl = rotl2(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i4]] + hbl, sl[i4]) + el | 0;
        al = el, el = dl, dl = rotl2(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i4 = 0; i4 < 16; i4++) {
        const tr3 = rotl2(ar3 + ripemd_f(rGroup, br3, cr3, dr3) + BUF_160[rr3[i4]] + hbr, sr3[i4]) + er3 | 0;
        ar3 = er3, er3 = dr3, dr3 = rotl2(cr3, 10) | 0, cr3 = br3, br3 = tr3;
      }
    }
    this.set(this.h1 + cl + dr3 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br3 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1603 = createHasher(() => new RIPEMD1602());

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n2, le4 = false) {
  if (le4)
    return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
  return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
}
function split(lst, le4 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i4 = 0; i4 < len; i4++) {
    const { h: h5, l: l4 } = fromBig(lst[i4], le4);
    [Ah[i4], Al[i4]] = [h5, l4];
  }
  return [Ah, Al];
}
var shrSH = (h5, _l, s2) => h5 >>> s2;
var shrSL = (h5, l4, s2) => h5 << 32 - s2 | l4 >>> s2;
var rotrSH = (h5, l4, s2) => h5 >>> s2 | l4 << 32 - s2;
var rotrSL = (h5, l4, s2) => h5 << 32 - s2 | l4 >>> s2;
var rotrBH = (h5, l4, s2) => h5 << 64 - s2 | l4 >>> s2 - 32;
var rotrBL = (h5, l4, s2) => h5 >>> s2 - 32 | l4 << 64 - s2;
var rotlSH = (h5, l4, s2) => h5 << s2 | l4 >>> 32 - s2;
var rotlSL = (h5, l4, s2) => l4 << s2 | h5 >>> 32 - s2;
var rotlBH = (h5, l4, s2) => l4 << s2 - 32 | h5 >>> 64 - s2;
var rotlBL = (h5, l4, s2) => h5 << s2 - 32 | l4 >>> 64 - s2;
function add(Ah, Al, Bh, Bl) {
  const l4 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l4 / 2 ** 32 | 0) | 0, l: l4 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
for (let round2 = 0, R4 = _1n2, x2 = 1, y6 = 0; round2 < 24; round2++) {
  [x2, y6] = [y6, (2 * x2 + 3 * y6) % 5];
  SHA3_PI.push(2 * (5 * y6 + x2));
  SHA3_ROTL.push((round2 + 1) * (round2 + 2) / 2 % 64);
  let t2 = _0n2;
  for (let j2 = 0; j2 < 7; j2++) {
    R4 = (R4 << _1n2 ^ (R4 >> _7n) * _0x71n) % _256n;
    if (R4 & _2n)
      t2 ^= _1n2 << (_1n2 << BigInt(j2)) - _1n2;
  }
  _SHA3_IOTA.push(t2);
}
var IOTAS = split(_SHA3_IOTA, true);
var SHA3_IOTA_H = IOTAS[0];
var SHA3_IOTA_L = IOTAS[1];
var rotlH = (h5, l4, s2) => s2 > 32 ? rotlBH(h5, l4, s2) : rotlSH(h5, l4, s2);
var rotlL = (h5, l4, s2) => s2 > 32 ? rotlBL(h5, l4, s2) : rotlSL(h5, l4, s2);
function keccakP(s2, rounds = 24) {
  const B3 = new Uint32Array(5 * 2);
  for (let round2 = 24 - rounds; round2 < 24; round2++) {
    for (let x2 = 0; x2 < 10; x2++)
      B3[x2] = s2[x2] ^ s2[x2 + 10] ^ s2[x2 + 20] ^ s2[x2 + 30] ^ s2[x2 + 40];
    for (let x2 = 0; x2 < 10; x2 += 2) {
      const idx1 = (x2 + 8) % 10;
      const idx0 = (x2 + 2) % 10;
      const B0 = B3[idx0];
      const B1 = B3[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B3[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B3[idx1 + 1];
      for (let y6 = 0; y6 < 50; y6 += 10) {
        s2[x2 + y6] ^= Th;
        s2[x2 + y6 + 1] ^= Tl;
      }
    }
    let curH = s2[2];
    let curL = s2[3];
    for (let t2 = 0; t2 < 24; t2++) {
      const shift = SHA3_ROTL[t2];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t2];
      curH = s2[PI];
      curL = s2[PI + 1];
      s2[PI] = Th;
      s2[PI + 1] = Tl;
    }
    for (let y6 = 0; y6 < 50; y6 += 10) {
      for (let x2 = 0; x2 < 10; x2++)
        B3[x2] = s2[y6 + x2];
      for (let x2 = 0; x2 < 10; x2++)
        s2[y6 + x2] ^= ~B3[(x2 + 2) % 10] & B3[(x2 + 4) % 10];
    }
    s2[0] ^= SHA3_IOTA_H[round2];
    s2[1] ^= SHA3_IOTA_L[round2];
  }
  clean(B3);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE(this.state32);
    keccakP(this.state32, this.rounds);
    swap32IfBE(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    data = toBytes2(data);
    abytes(data);
    const { blockLen, state: state25 } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i4 = 0; i4 < take; i4++)
        state25[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state: state25, suffix, pos, blockLen } = this;
    state25[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state25[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean(this.state);
  }
  _cloneInto(to3) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to3 || (to3 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to3.state32.set(this.state32);
    to3.pos = this.pos;
    to3.posOut = this.posOut;
    to3.finished = this.finished;
    to3.rounds = rounds;
    to3.suffix = suffix;
    to3.outputLen = outputLen;
    to3.enableXOF = enableXOF;
    to3.destroyed = this.destroyed;
    return to3;
  }
};
var gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = (() => gen(6, 144, 224 / 8))();
var sha3_256 = (() => gen(6, 136, 256 / 8))();
var sha3_384 = (() => gen(6, 104, 384 / 8))();
var sha3_512 = (() => gen(6, 72, 512 / 8))();
var keccak_224 = (() => gen(1, 144, 224 / 8))();
var keccak_256 = (() => gen(1, 136, 256 / 8))();
var keccak_384 = (() => gen(1, 104, 384 / 8))();
var keccak_512 = (() => gen(1, 72, 512 / 8))();
var genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = (() => genShake(31, 168, 128 / 8))();
var shake256 = (() => genShake(31, 136, 256 / 8))();

// node_modules/@walletconnect/universal-provider/node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends HashMD2 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A4, B: B3, C: C5, D: D2, E: E5, F: F4, G: G3, H: H3 } = this;
    return [A4, B3, C5, D2, E5, F4, G3, H3];
  }
  // prettier-ignore
  set(A4, B3, C5, D2, E5, F4, G3, H3) {
    this.A = A4 | 0;
    this.B = B3 | 0;
    this.C = C5 | 0;
    this.D = D2 | 0;
    this.E = E5 | 0;
    this.F = F4 | 0;
    this.G = G3 | 0;
    this.H = H3 | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4)
      SHA256_W[i4] = view.getUint32(offset, false);
    for (let i4 = 16; i4 < 64; i4++) {
      const W15 = SHA256_W[i4 - 15];
      const W22 = SHA256_W[i4 - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W22, 17) ^ rotr(W22, 19) ^ W22 >>> 10;
      SHA256_W[i4] = s1 + SHA256_W[i4 - 7] + s0 + SHA256_W[i4 - 16] | 0;
    }
    let { A: A4, B: B3, C: C5, D: D2, E: E5, F: F4, G: G3, H: H3 } = this;
    for (let i4 = 0; i4 < 64; i4++) {
      const sigma1 = rotr(E5, 6) ^ rotr(E5, 11) ^ rotr(E5, 25);
      const T1 = H3 + sigma1 + Chi(E5, F4, G3) + SHA256_K[i4] + SHA256_W[i4] | 0;
      const sigma0 = rotr(A4, 2) ^ rotr(A4, 13) ^ rotr(A4, 22);
      const T2 = sigma0 + Maj(A4, B3, C5) | 0;
      H3 = G3;
      G3 = F4;
      F4 = E5;
      E5 = D2 + T1 | 0;
      D2 = C5;
      C5 = B3;
      B3 = A4;
      A4 = T1 + T2 | 0;
    }
    A4 = A4 + this.A | 0;
    B3 = B3 + this.B | 0;
    C5 = C5 + this.C | 0;
    D2 = D2 + this.D | 0;
    E5 = E5 + this.E | 0;
    F4 = F4 + this.F | 0;
    G3 = G3 + this.G | 0;
    H3 = H3 + this.H | 0;
    this.set(A4, B3, C5, D2, E5, F4, G3, H3);
  }
  roundClean() {
    clean(SHA256_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var SHA224 = class extends SHA256 {
  constructor() {
    super(28);
    this.A = SHA224_IV[0] | 0;
    this.B = SHA224_IV[1] | 0;
    this.C = SHA224_IV[2] | 0;
    this.D = SHA224_IV[3] | 0;
    this.E = SHA224_IV[4] | 0;
    this.F = SHA224_IV[5] | 0;
    this.G = SHA224_IV[6] | 0;
    this.H = SHA224_IV[7] | 0;
  }
};
var K512 = (() => split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n2) => BigInt(n2))))();
var SHA512_Kh = (() => K512[0])();
var SHA512_Kl = (() => K512[1])();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends HashMD2 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV[0] | 0;
    this.Al = SHA512_IV[1] | 0;
    this.Bh = SHA512_IV[2] | 0;
    this.Bl = SHA512_IV[3] | 0;
    this.Ch = SHA512_IV[4] | 0;
    this.Cl = SHA512_IV[5] | 0;
    this.Dh = SHA512_IV[6] | 0;
    this.Dl = SHA512_IV[7] | 0;
    this.Eh = SHA512_IV[8] | 0;
    this.El = SHA512_IV[9] | 0;
    this.Fh = SHA512_IV[10] | 0;
    this.Fl = SHA512_IV[11] | 0;
    this.Gh = SHA512_IV[12] | 0;
    this.Gl = SHA512_IV[13] | 0;
    this.Hh = SHA512_IV[14] | 0;
    this.Hl = SHA512_IV[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i4 = 0; i4 < 16; i4++, offset += 4) {
      SHA512_W_H[i4] = view.getUint32(offset);
      SHA512_W_L[i4] = view.getUint32(offset += 4);
    }
    for (let i4 = 16; i4 < 80; i4++) {
      const W15h = SHA512_W_H[i4 - 15] | 0;
      const W15l = SHA512_W_L[i4 - 15] | 0;
      const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
      const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i4 - 2] | 0;
      const W2l = SHA512_W_L[i4 - 2] | 0;
      const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
      const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
      const SUMl = add4L(s0l, s1l, SHA512_W_L[i4 - 7], SHA512_W_L[i4 - 16]);
      const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i4 - 7], SHA512_W_H[i4 - 16]);
      SHA512_W_H[i4] = SUMh | 0;
      SHA512_W_L[i4] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i4 = 0; i4 < 80; i4++) {
      const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
      const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i4], SHA512_W_L[i4]);
      const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i4], SHA512_W_H[i4]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
      const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L(T1l, sigma0l, MAJl);
      Ah = add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean(SHA512_W_H, SHA512_W_L);
  }
  destroy() {
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV[0] | 0;
    this.Al = SHA384_IV[1] | 0;
    this.Bh = SHA384_IV[2] | 0;
    this.Bl = SHA384_IV[3] | 0;
    this.Ch = SHA384_IV[4] | 0;
    this.Cl = SHA384_IV[5] | 0;
    this.Dh = SHA384_IV[6] | 0;
    this.Dl = SHA384_IV[7] | 0;
    this.Eh = SHA384_IV[8] | 0;
    this.El = SHA384_IV[9] | 0;
    this.Fh = SHA384_IV[10] | 0;
    this.Fl = SHA384_IV[11] | 0;
    this.Gh = SHA384_IV[12] | 0;
    this.Gl = SHA384_IV[13] | 0;
    this.Hh = SHA384_IV[14] | 0;
    this.Hl = SHA384_IV[15] | 0;
  }
};
var T224_IV = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_224 = class extends SHA512 {
  constructor() {
    super(28);
    this.Ah = T224_IV[0] | 0;
    this.Al = T224_IV[1] | 0;
    this.Bh = T224_IV[2] | 0;
    this.Bl = T224_IV[3] | 0;
    this.Ch = T224_IV[4] | 0;
    this.Cl = T224_IV[5] | 0;
    this.Dh = T224_IV[6] | 0;
    this.Dl = T224_IV[7] | 0;
    this.Eh = T224_IV[8] | 0;
    this.El = T224_IV[9] | 0;
    this.Fh = T224_IV[10] | 0;
    this.Fl = T224_IV[11] | 0;
    this.Gh = T224_IV[12] | 0;
    this.Gl = T224_IV[13] | 0;
    this.Hh = T224_IV[14] | 0;
    this.Hl = T224_IV[15] | 0;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super(32);
    this.Ah = T256_IV[0] | 0;
    this.Al = T256_IV[1] | 0;
    this.Bh = T256_IV[2] | 0;
    this.Bl = T256_IV[3] | 0;
    this.Ch = T256_IV[4] | 0;
    this.Cl = T256_IV[5] | 0;
    this.Dh = T256_IV[6] | 0;
    this.Dl = T256_IV[7] | 0;
    this.Eh = T256_IV[8] | 0;
    this.El = T256_IV[9] | 0;
    this.Fh = T256_IV[10] | 0;
    this.Fl = T256_IV[11] | 0;
    this.Gh = T256_IV[12] | 0;
    this.Gl = T256_IV[13] | 0;
    this.Hh = T256_IV[14] | 0;
    this.Hl = T256_IV[15] | 0;
  }
};
var sha2563 = createHasher(() => new SHA256());
var sha224 = createHasher(() => new SHA224());
var sha512 = createHasher(() => new SHA512());
var sha384 = createHasher(() => new SHA384());
var sha512_256 = createHasher(() => new SHA512_256());
var sha512_224 = createHasher(() => new SHA512_224());

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as === "Bytes")
    return bytes;
  return fromBytes2(bytes);
}

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString2(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i4 = 0; i4 < 40; i4 += 2) {
    if (hash[i4 >> 1] >> 4 >= 8 && characters[i4]) {
      characters[i4] = characters[i4].toUpperCase();
    }
    if ((hash[i4 >> 1] & 15) >= 8 && characters[i4 + 1]) {
      characters[i4 + 1] = characters[i4 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError2 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError2 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError2 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex3 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex3 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length - 1);
    return this.bytes.subarray(position, position + length);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length);
    this.position += size4 ?? length;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError2 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError2 {
  constructor({ length, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError2 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i4 = 0; i4 < types.length; i4++) {
    const type = types[i4];
    const value = values[i4];
    data.push(encodePacked2.encode(type, value));
  }
  return concat3(...data);
}
(function(encodePacked3) {
  function encode4(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString3(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex3);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex3);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i4 = 0; i4 < value.length; i4++) {
        data.push(encode4(childType, value[i4], true));
      }
      if (data.length === 0)
        return "0x";
      return concat3(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode4;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError2 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size3(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError2 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError2 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/utils/dist/index.es.js
var ae = ":";
function Ne(t2) {
  const [e2, n2] = t2.split(ae);
  return { namespace: e2, reference: n2 };
}
function ue(t2, e2) {
  return t2.includes(":") ? [t2] : e2.chains || [];
}
var Zo = Object.defineProperty;
var Yo = Object.defineProperties;
var Go = Object.getOwnPropertyDescriptors;
var Tn = Object.getOwnPropertySymbols;
var Wo = Object.prototype.hasOwnProperty;
var Xo = Object.prototype.propertyIsEnumerable;
var Rn = (t2, e2, n2) => e2 in t2 ? Zo(t2, e2, { enumerable: true, configurable: true, writable: true, value: n2 }) : t2[e2] = n2;
var _n = (t2, e2) => {
  for (var n2 in e2 || (e2 = {})) Wo.call(e2, n2) && Rn(t2, n2, e2[n2]);
  if (Tn) for (var n2 of Tn(e2)) Xo.call(e2, n2) && Rn(t2, n2, e2[n2]);
  return t2;
};
var Jo = (t2, e2) => Yo(t2, Go(e2));
var $n = "ReactNative";
var Y = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var jn = "js";
function _e() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function pt() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === $n;
}
function ei() {
  return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function ni() {
  return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Tt() {
  return !_e() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function xt() {
  return pt() ? Y.reactNative : _e() ? Y.node : Tt() ? Y.browser : Y.unknown;
}
function ri() {
  var t2;
  try {
    return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t2 = global.Application) == null ? void 0 : t2.applicationId : void 0;
  } catch {
    return;
  }
}
function Cn(t2, e2) {
  const n2 = new URLSearchParams(t2);
  for (const r2 of Object.keys(e2).sort()) if (e2.hasOwnProperty(r2)) {
    const o2 = e2[r2];
    o2 !== void 0 && n2.set(r2, o2);
  }
  return n2.toString();
}
function oi(t2) {
  var e2, n2;
  const r2 = Pn();
  try {
    return t2 != null && t2.url && r2.url && new URL(t2.url).host !== new URL(r2.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t2.url} differs from the actual page url:${r2.url}. This is probably unintended and can lead to issues.`), t2.url = r2.url), (e2 = t2 == null ? void 0 : t2.icons) != null && e2.length && t2.icons.length > 0 && (t2.icons = t2.icons.filter((o2) => o2 !== "")), Jo(_n(_n({}, r2), t2), { url: (t2 == null ? void 0 : t2.url) || r2.url, name: (t2 == null ? void 0 : t2.name) || r2.name, description: (t2 == null ? void 0 : t2.description) || r2.description, icons: (n2 = t2 == null ? void 0 : t2.icons) != null && n2.length && t2.icons.length > 0 ? t2.icons : r2.icons });
  } catch (o2) {
    return console.warn("Error populating app metadata", o2), t2 || r2;
  }
}
function Pn() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function kn() {
  if (xt() === Y.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n2, Version: r2 } = global.Platform;
    return [n2, r2].join("-");
  }
  const t2 = detect();
  if (t2 === null) return "unknown";
  const e2 = t2.os ? t2.os.replace(" ", "").toLowerCase() : "unknown";
  return t2.type === "browser" ? [e2, t2.name, t2.version].join("-") : [e2, t2.version].join("-");
}
function Vn() {
  var t2;
  const e2 = xt();
  return e2 === Y.browser ? [e2, ((t2 = (0, import_window_getters.getLocation)()) == null ? void 0 : t2.host) || "unknown"].join(":") : e2;
}
function Mn(t2, e2, n2) {
  const r2 = kn(), o2 = Vn();
  return [[t2, e2].join("-"), [jn, n2].join("-"), r2, o2].join("/");
}
function si({ protocol: t2, version: e2, relayUrl: n2, sdkVersion: r2, auth: o2, projectId: i4, useOnCloseEvent: s2, bundleId: c4, packageName: a2 }) {
  const u4 = n2.split("?"), l4 = Mn(t2, e2, r2), f7 = { auth: o2, ua: l4, projectId: i4, useOnCloseEvent: s2 || void 0, packageName: a2 || void 0, bundleId: c4 || void 0 }, h5 = Cn(u4[1] || "", f7);
  return u4[0] + "?" + h5;
}
function gt(t2, e2) {
  return t2.filter((n2) => e2.includes(n2)).length === t2.length;
}
function fi(t2) {
  return Object.fromEntries(t2.entries());
}
function li(t2) {
  return new Map(Object.entries(t2));
}
function gi(t2 = import_time.FIVE_MINUTES, e2) {
  const n2 = (0, import_time.toMiliseconds)(t2 || import_time.FIVE_MINUTES);
  let r2, o2, i4, s2;
  return { resolve: (c4) => {
    i4 && r2 && (clearTimeout(i4), r2(c4), s2 = Promise.resolve(c4));
  }, reject: (c4) => {
    i4 && o2 && (clearTimeout(i4), o2(c4));
  }, done: () => new Promise((c4, a2) => {
    if (s2) return c4(s2);
    i4 = setTimeout(() => {
      const u4 = new Error(e2);
      s2 = Promise.reject(u4), a2(u4);
    }, n2), r2 = c4, o2 = a2;
  }) };
}
function yi(t2, e2, n2) {
  return new Promise(async (r2, o2) => {
    const i4 = setTimeout(() => o2(new Error(n2)), e2);
    try {
      const s2 = await t2;
      r2(s2);
    } catch (s2) {
      o2(s2);
    }
    clearTimeout(i4);
  });
}
function $e(t2, e2) {
  if (typeof e2 == "string" && e2.startsWith(`${t2}:`)) return e2;
  if (t2.toLowerCase() === "topic") {
    if (typeof e2 != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e2}`;
  } else if (t2.toLowerCase() === "id") {
    if (typeof e2 != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e2}`;
  }
  throw new Error(`Unknown expirer target type: ${t2}`);
}
function mi(t2) {
  return $e("topic", t2);
}
function wi(t2) {
  return $e("id", t2);
}
function bi(t2) {
  const [e2, n2] = t2.split(":"), r2 = { id: void 0, topic: void 0 };
  if (e2 === "topic" && typeof n2 == "string") r2.topic = n2;
  else if (e2 === "id" && Number.isInteger(Number(n2))) r2.id = Number(n2);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e2}:${n2}`);
  return r2;
}
function Ei(t2, e2) {
  return (0, import_time.fromMiliseconds)((e2 || Date.now()) + (0, import_time.toMiliseconds)(t2));
}
function vi(t2) {
  return Date.now() >= (0, import_time.toMiliseconds)(t2);
}
function xi(t2, e2) {
  return `${t2}${e2 ? `:${e2}` : ""}`;
}
function ot(t2 = [], e2 = []) {
  return [.../* @__PURE__ */ new Set([...t2, ...e2])];
}
async function Si({ id: t2, topic: e2, wcDeepLink: n2 }) {
  var r2;
  try {
    if (!n2) return;
    const o2 = typeof n2 == "string" ? JSON.parse(n2) : n2, i4 = o2 == null ? void 0 : o2.href;
    if (typeof i4 != "string") return;
    const s2 = Kn(i4, t2, e2), c4 = xt();
    if (c4 === Y.browser) {
      if (!((r2 = (0, import_window_getters.getDocument)()) != null && r2.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      Fn(s2);
    } else c4 === Y.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(s2);
  } catch (o2) {
    console.error(o2);
  }
}
function Kn(t2, e2, n2) {
  const r2 = `requestId=${e2}&sessionTopic=${n2}`;
  t2.endsWith("/") && (t2 = t2.slice(0, -1));
  let o2 = `${t2}`;
  if (t2.startsWith("https://t.me")) {
    const i4 = t2.includes("?") ? "&startapp=" : "?startapp=";
    o2 = `${o2}${i4}${Yn(r2, true)}`;
  } else o2 = `${o2}/wc?${r2}`;
  return o2;
}
function Fn(t2) {
  let e2 = "_self";
  Zn() ? e2 = "_top" : (zn() || t2.startsWith("https://") || t2.startsWith("http://")) && (e2 = "_blank"), window.open(t2, e2, "noreferrer noopener");
}
async function Oi(t2, e2) {
  let n2 = "";
  try {
    if (Tt() && (n2 = localStorage.getItem(e2), n2)) return n2;
    n2 = await t2.getItem(e2);
  } catch (r2) {
    console.error(r2);
  }
  return n2;
}
function Ai(t2, e2) {
  if (!t2.includes(e2)) return null;
  const n2 = t2.split(/([&,?,=])/), r2 = n2.indexOf(e2);
  return n2[r2 + 2];
}
function Bi() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t2) => {
    const e2 = Math.random() * 16 | 0;
    return (t2 === "x" ? e2 : e2 & 3 | 8).toString(16);
  });
}
function Ii() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function zn() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function Zn() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function Yn(t2, e2 = false) {
  const n2 = Buffer.from(t2).toString("base64");
  return e2 ? n2.replace(/[=]/g, "") : n2;
}
function je(t2) {
  return Buffer.from(t2, "base64").toString("utf-8");
}
function Ni(t2) {
  return new Promise((e2) => setTimeout(e2, t2));
}
function Wt(t2) {
  if (!Number.isSafeInteger(t2) || t2 < 0) throw new Error("positive integer expected, got " + t2);
}
function Ui(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function Xt(t2, ...e2) {
  if (!Ui(t2)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t2.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t2.length);
}
function Ce(t2) {
  if (typeof t2 != "function" || typeof t2.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Wt(t2.outputLen), Wt(t2.blockLen);
}
function Rt(t2, e2 = true) {
  if (t2.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t2.finished) throw new Error("Hash#digest() has already been called");
}
function Gn(t2, e2) {
  Xt(t2);
  const n2 = e2.outputLen;
  if (t2.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
var le = BigInt(2 ** 32 - 1);
var Wn = BigInt(32);
function Ti(t2, e2 = false) {
  return e2 ? { h: Number(t2 & le), l: Number(t2 >> Wn & le) } : { h: Number(t2 >> Wn & le) | 0, l: Number(t2 & le) | 0 };
}
function Ri(t2, e2 = false) {
  let n2 = new Uint32Array(t2.length), r2 = new Uint32Array(t2.length);
  for (let o2 = 0; o2 < t2.length; o2++) {
    const { h: i4, l: s2 } = Ti(t2[o2], e2);
    [n2[o2], r2[o2]] = [i4, s2];
  }
  return [n2, r2];
}
var _i = (t2, e2, n2) => t2 << n2 | e2 >>> 32 - n2;
var $i = (t2, e2, n2) => e2 << n2 | t2 >>> 32 - n2;
var Li = (t2, e2, n2) => e2 << n2 - 32 | t2 >>> 64 - n2;
var ji = (t2, e2, n2) => t2 << n2 - 32 | e2 >>> 64 - n2;
var _t = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function Ci(t2) {
  return new Uint32Array(t2.buffer, t2.byteOffset, Math.floor(t2.byteLength / 4));
}
function Pe(t2) {
  return new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
}
function ct(t2, e2) {
  return t2 << 32 - e2 | t2 >>> e2;
}
var Xn = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Pi2(t2) {
  return t2 << 24 & 4278190080 | t2 << 8 & 16711680 | t2 >>> 8 & 65280 | t2 >>> 24 & 255;
}
function Jn(t2) {
  for (let e2 = 0; e2 < t2.length; e2++) t2[e2] = Pi2(t2[e2]);
}
function ki(t2) {
  if (typeof t2 != "string") throw new Error("utf8ToBytes expected string, got " + typeof t2);
  return new Uint8Array(new TextEncoder().encode(t2));
}
function $t(t2) {
  return typeof t2 == "string" && (t2 = ki(t2)), Xt(t2), t2;
}
function Vi(...t2) {
  let e2 = 0;
  for (let r2 = 0; r2 < t2.length; r2++) {
    const o2 = t2[r2];
    Xt(o2), e2 += o2.length;
  }
  const n2 = new Uint8Array(e2);
  for (let r2 = 0, o2 = 0; r2 < t2.length; r2++) {
    const i4 = t2[r2];
    n2.set(i4, o2), o2 += i4.length;
  }
  return n2;
}
var ke = class {
  clone() {
    return this._cloneInto();
  }
};
function Qn(t2) {
  const e2 = (r2) => t2().update($t(r2)).digest(), n2 = t2();
  return e2.outputLen = n2.outputLen, e2.blockLen = n2.blockLen, e2.create = () => t2(), e2;
}
function Lt(t2 = 32) {
  if (_t && typeof _t.getRandomValues == "function") return _t.getRandomValues(new Uint8Array(t2));
  if (_t && typeof _t.randomBytes == "function") return _t.randomBytes(t2);
  throw new Error("crypto.getRandomValues must be defined");
}
var tr = [];
var er = [];
var nr = [];
var Mi = BigInt(0);
var Jt = BigInt(1);
var Di = BigInt(2);
var Hi = BigInt(7);
var qi = BigInt(256);
var Ki = BigInt(113);
for (let t2 = 0, e2 = Jt, n2 = 1, r2 = 0; t2 < 24; t2++) {
  [n2, r2] = [r2, (2 * n2 + 3 * r2) % 5], tr.push(2 * (5 * r2 + n2)), er.push((t2 + 1) * (t2 + 2) / 2 % 64);
  let o2 = Mi;
  for (let i4 = 0; i4 < 7; i4++) e2 = (e2 << Jt ^ (e2 >> Hi) * Ki) % qi, e2 & Di && (o2 ^= Jt << (Jt << BigInt(i4)) - Jt);
  nr.push(o2);
}
var [Fi, zi] = Ri(nr, true);
var rr = (t2, e2, n2) => n2 > 32 ? Li(t2, e2, n2) : _i(t2, e2, n2);
var or = (t2, e2, n2) => n2 > 32 ? ji(t2, e2, n2) : $i(t2, e2, n2);
function Zi(t2, e2 = 24) {
  const n2 = new Uint32Array(10);
  for (let r2 = 24 - e2; r2 < 24; r2++) {
    for (let s2 = 0; s2 < 10; s2++) n2[s2] = t2[s2] ^ t2[s2 + 10] ^ t2[s2 + 20] ^ t2[s2 + 30] ^ t2[s2 + 40];
    for (let s2 = 0; s2 < 10; s2 += 2) {
      const c4 = (s2 + 8) % 10, a2 = (s2 + 2) % 10, u4 = n2[a2], l4 = n2[a2 + 1], f7 = rr(u4, l4, 1) ^ n2[c4], h5 = or(u4, l4, 1) ^ n2[c4 + 1];
      for (let y6 = 0; y6 < 50; y6 += 10) t2[s2 + y6] ^= f7, t2[s2 + y6 + 1] ^= h5;
    }
    let o2 = t2[2], i4 = t2[3];
    for (let s2 = 0; s2 < 24; s2++) {
      const c4 = er[s2], a2 = rr(o2, i4, c4), u4 = or(o2, i4, c4), l4 = tr[s2];
      o2 = t2[l4], i4 = t2[l4 + 1], t2[l4] = a2, t2[l4 + 1] = u4;
    }
    for (let s2 = 0; s2 < 50; s2 += 10) {
      for (let c4 = 0; c4 < 10; c4++) n2[c4] = t2[s2 + c4];
      for (let c4 = 0; c4 < 10; c4++) t2[s2 + c4] ^= ~n2[(c4 + 2) % 10] & n2[(c4 + 4) % 10];
    }
    t2[0] ^= Fi[r2], t2[1] ^= zi[r2];
  }
  n2.fill(0);
}
var En = class _En extends ke {
  constructor(e2, n2, r2, o2 = false, i4 = 24) {
    if (super(), this.blockLen = e2, this.suffix = n2, this.outputLen = r2, this.enableXOF = o2, this.rounds = i4, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Wt(r2), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = Ci(this.state);
  }
  keccak() {
    Xn || Jn(this.state32), Zi(this.state32, this.rounds), Xn || Jn(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e2) {
    Rt(this);
    const { blockLen: n2, state: r2 } = this;
    e2 = $t(e2);
    const o2 = e2.length;
    for (let i4 = 0; i4 < o2; ) {
      const s2 = Math.min(n2 - this.pos, o2 - i4);
      for (let c4 = 0; c4 < s2; c4++) r2[this.pos++] ^= e2[i4++];
      this.pos === n2 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e2, suffix: n2, pos: r2, blockLen: o2 } = this;
    e2[r2] ^= n2, (n2 & 128) !== 0 && r2 === o2 - 1 && this.keccak(), e2[o2 - 1] ^= 128, this.keccak();
  }
  writeInto(e2) {
    Rt(this, false), Xt(e2), this.finish();
    const n2 = this.state, { blockLen: r2 } = this;
    for (let o2 = 0, i4 = e2.length; o2 < i4; ) {
      this.posOut >= r2 && this.keccak();
      const s2 = Math.min(r2 - this.posOut, i4 - o2);
      e2.set(n2.subarray(this.posOut, this.posOut + s2), o2), this.posOut += s2, o2 += s2;
    }
    return e2;
  }
  xofInto(e2) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e2);
  }
  xof(e2) {
    return Wt(e2), this.xofInto(new Uint8Array(e2));
  }
  digestInto(e2) {
    if (Gn(e2, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e2), this.destroy(), e2;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(e2) {
    const { blockLen: n2, suffix: r2, outputLen: o2, rounds: i4, enableXOF: s2 } = this;
    return e2 || (e2 = new _En(n2, r2, o2, s2, i4)), e2.state32.set(this.state32), e2.pos = this.pos, e2.posOut = this.posOut, e2.finished = this.finished, e2.rounds = i4, e2.suffix = r2, e2.outputLen = o2, e2.enableXOF = s2, e2.destroyed = this.destroyed, e2;
  }
};
var Yi = (t2, e2, n2) => Qn(() => new En(e2, t2, n2));
var Gi = Yi(1, 136, 256 / 8);
var Wi = "https://rpc.walletconnect.org/v1";
function Ve(t2) {
  const e2 = `Ethereum Signed Message:
${t2.length}`, n2 = new TextEncoder().encode(e2 + t2);
  return "0x" + Buffer.from(Gi(n2)).toString("hex");
}
async function ir(t2, e2, n2, r2, o2, i4) {
  switch (n2.t) {
    case "eip191":
      return await sr(t2, e2, n2.s);
    case "eip1271":
      return await cr(t2, e2, n2.s, r2, o2, i4);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n2.t}`);
  }
}
async function sr(t2, e2, n2) {
  return (await recoverAddress({ hash: Ve(e2), signature: n2 })).toLowerCase() === t2.toLowerCase();
}
async function cr(t2, e2, n2, r2, o2, i4) {
  const s2 = Ne(r2);
  if (!s2.namespace || !s2.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r2}`);
  try {
    const c4 = "0x1626ba7e", a2 = "0000000000000000000000000000000000000000000000000000000000000040", u4 = "0000000000000000000000000000000000000000000000000000000000000041", l4 = n2.substring(2), f7 = Ve(e2).substring(2), h5 = c4 + f7 + a2 + u4 + l4, y6 = await fetch(`${i4 || Wi}/?chainId=${r2}&projectId=${o2}`, { method: "POST", body: JSON.stringify({ id: Xi(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t2, data: h5 }, "latest"] }) }), { result: E5 } = await y6.json();
    return E5 ? E5.slice(0, c4.length).toLowerCase() === c4.toLowerCase() : false;
  } catch (c4) {
    return console.error("isValidEip1271Signature: ", c4), false;
  }
}
function Xi() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function Ji(t2) {
  const e2 = atob(t2), n2 = new Uint8Array(e2.length);
  for (let s2 = 0; s2 < e2.length; s2++) n2[s2] = e2.charCodeAt(s2);
  const r2 = n2[0];
  if (r2 === 0) throw new Error("No signatures found");
  const o2 = 1 + r2 * 64;
  if (n2.length < o2) throw new Error("Transaction data too short for claimed signature count");
  if (n2.length < 100) throw new Error("Transaction too short");
  const i4 = Buffer.from(t2, "base64").slice(1, 65);
  return esm_default.encode(i4);
}
var Qi = Object.defineProperty;
var ts = Object.defineProperties;
var es = Object.getOwnPropertyDescriptors;
var ar = Object.getOwnPropertySymbols;
var ns = Object.prototype.hasOwnProperty;
var rs = Object.prototype.propertyIsEnumerable;
var ur = (t2, e2, n2) => e2 in t2 ? Qi(t2, e2, { enumerable: true, configurable: true, writable: true, value: n2 }) : t2[e2] = n2;
var Me = (t2, e2) => {
  for (var n2 in e2 || (e2 = {})) ns.call(e2, n2) && ur(t2, n2, e2[n2]);
  if (ar) for (var n2 of ar(e2)) rs.call(e2, n2) && ur(t2, n2, e2[n2]);
  return t2;
};
var fr = (t2, e2) => ts(t2, es(e2));
var os = "did:pkh:";
var de = (t2) => t2 == null ? void 0 : t2.split(":");
var lr = (t2) => {
  const e2 = t2 && de(t2);
  if (e2) return t2.includes(os) ? e2[3] : e2[1];
};
var dr = (t2) => {
  const e2 = t2 && de(t2);
  if (e2) return e2[2] + ":" + e2[3];
};
var De = (t2) => {
  const e2 = t2 && de(t2);
  if (e2) return e2.pop();
};
async function is(t2) {
  const { cacao: e2, projectId: n2 } = t2, { s: r2, p: o2 } = e2, i4 = hr(o2, o2.iss), s2 = De(o2.iss);
  return await ir(s2, i4, r2, dr(o2.iss), n2);
}
var hr = (t2, e2) => {
  const n2 = `${t2.domain} wants you to sign in with your Ethereum account:`, r2 = De(e2);
  if (!t2.aud && !t2.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o2 = t2.statement || void 0;
  const i4 = `URI: ${t2.aud || t2.uri}`, s2 = `Version: ${t2.version}`, c4 = `Chain ID: ${lr(e2)}`, a2 = `Nonce: ${t2.nonce}`, u4 = `Issued At: ${t2.iat}`, l4 = t2.exp ? `Expiration Time: ${t2.exp}` : void 0, f7 = t2.nbf ? `Not Before: ${t2.nbf}` : void 0, h5 = t2.requestId ? `Request ID: ${t2.requestId}` : void 0, y6 = t2.resources ? `Resources:${t2.resources.map((p3) => `
- ${p3}`).join("")}` : void 0, E5 = pe(t2.resources);
  if (E5) {
    const p3 = yt(E5);
    o2 = Ke(o2, p3);
  }
  return [n2, r2, "", o2, "", i4, s2, c4, a2, u4, l4, f7, h5, y6].filter((p3) => p3 != null).join(`
`);
};
function mr(t2) {
  return Buffer.from(JSON.stringify(t2)).toString("base64");
}
function wr(t2) {
  return JSON.parse(Buffer.from(t2, "base64").toString("utf-8"));
}
function at(t2) {
  if (!t2) throw new Error("No recap provided, value is undefined");
  if (!t2.att) throw new Error("No `att` property found");
  const e2 = Object.keys(t2.att);
  if (!(e2 != null && e2.length)) throw new Error("No resources found in `att` property");
  e2.forEach((n2) => {
    const r2 = t2.att[n2];
    if (Array.isArray(r2)) throw new Error(`Resource must be an object: ${n2}`);
    if (typeof r2 != "object") throw new Error(`Resource must be an object: ${n2}`);
    if (!Object.keys(r2).length) throw new Error(`Resource object is empty: ${n2}`);
    Object.keys(r2).forEach((o2) => {
      const i4 = r2[o2];
      if (!Array.isArray(i4)) throw new Error(`Ability limits ${o2} must be an array of objects, found: ${i4}`);
      if (!i4.length) throw new Error(`Value of ${o2} is empty array, must be an array with objects`);
      i4.forEach((s2) => {
        if (typeof s2 != "object") throw new Error(`Ability limits (${o2}) must be an array of objects, found: ${s2}`);
      });
    });
  });
}
function br(t2, e2, n2, r2 = {}) {
  return n2 == null ? void 0 : n2.sort((o2, i4) => o2.localeCompare(i4)), { att: { [t2]: He(e2, n2, r2) } };
}
function He(t2, e2, n2 = {}) {
  e2 = e2 == null ? void 0 : e2.sort((o2, i4) => o2.localeCompare(i4));
  const r2 = e2.map((o2) => ({ [`${t2}/${o2}`]: [n2] }));
  return Object.assign({}, ...r2);
}
function he(t2) {
  return at(t2), `urn:recap:${mr(t2).replace(/=/g, "")}`;
}
function yt(t2) {
  const e2 = wr(t2.replace("urn:recap:", ""));
  return at(e2), e2;
}
function fs(t2, e2, n2) {
  const r2 = br(t2, e2, n2);
  return he(r2);
}
function qe(t2) {
  return t2 && t2.includes("urn:recap:");
}
function ls(t2, e2) {
  const n2 = yt(t2), r2 = yt(e2), o2 = vr(n2, r2);
  return he(o2);
}
function vr(t2, e2) {
  at(t2), at(e2);
  const n2 = Object.keys(t2.att).concat(Object.keys(e2.att)).sort((o2, i4) => o2.localeCompare(i4)), r2 = { att: {} };
  return n2.forEach((o2) => {
    var i4, s2;
    Object.keys(((i4 = t2.att) == null ? void 0 : i4[o2]) || {}).concat(Object.keys(((s2 = e2.att) == null ? void 0 : s2[o2]) || {})).sort((c4, a2) => c4.localeCompare(a2)).forEach((c4) => {
      var a2, u4;
      r2.att[o2] = fr(Me({}, r2.att[o2]), { [c4]: ((a2 = t2.att[o2]) == null ? void 0 : a2[c4]) || ((u4 = e2.att[o2]) == null ? void 0 : u4[c4]) });
    });
  }), r2;
}
function Ke(t2 = "", e2) {
  at(e2);
  const n2 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t2.includes(n2)) return t2;
  const r2 = [];
  let o2 = 0;
  Object.keys(e2.att).forEach((c4) => {
    const a2 = Object.keys(e2.att[c4]).map((f7) => ({ ability: f7.split("/")[0], action: f7.split("/")[1] }));
    a2.sort((f7, h5) => f7.action.localeCompare(h5.action));
    const u4 = {};
    a2.forEach((f7) => {
      u4[f7.ability] || (u4[f7.ability] = []), u4[f7.ability].push(f7.action);
    });
    const l4 = Object.keys(u4).map((f7) => (o2++, `(${o2}) '${f7}': '${u4[f7].join("', '")}' for '${c4}'.`));
    r2.push(l4.join(", ").replace(".,", "."));
  });
  const i4 = r2.join(" "), s2 = `${n2}${i4}`;
  return `${t2 ? t2 + " " : ""}${s2}`;
}
function ds(t2) {
  var e2;
  const n2 = yt(t2);
  at(n2);
  const r2 = (e2 = n2.att) == null ? void 0 : e2.eip155;
  return r2 ? Object.keys(r2).map((o2) => o2.split("/")[1]) : [];
}
function hs(t2) {
  const e2 = yt(t2);
  at(e2);
  const n2 = [];
  return Object.values(e2.att).forEach((r2) => {
    Object.values(r2).forEach((o2) => {
      var i4;
      (i4 = o2 == null ? void 0 : o2[0]) != null && i4.chains && n2.push(o2[0].chains);
    });
  }), [...new Set(n2.flat())];
}
function pe(t2) {
  if (!t2) return;
  const e2 = t2 == null ? void 0 : t2[t2.length - 1];
  return qe(e2) ? e2 : void 0;
}
function Fe(t2) {
  if (!Number.isSafeInteger(t2) || t2 < 0) throw new Error("positive integer expected, got " + t2);
}
function Sr(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function tt(t2, ...e2) {
  if (!Sr(t2)) throw new Error("Uint8Array expected");
  if (e2.length > 0 && !e2.includes(t2.length)) throw new Error("Uint8Array expected of length " + e2 + ", got length=" + t2.length);
}
function Or(t2, e2 = true) {
  if (t2.destroyed) throw new Error("Hash instance has been destroyed");
  if (e2 && t2.finished) throw new Error("Hash#digest() has already been called");
}
function ps(t2, e2) {
  tt(t2);
  const n2 = e2.outputLen;
  if (t2.length < n2) throw new Error("digestInto() expects output buffer of length at least " + n2);
}
function Ar(t2) {
  if (typeof t2 != "boolean") throw new Error(`boolean expected, not ${t2}`);
}
var mt = (t2) => new Uint32Array(t2.buffer, t2.byteOffset, Math.floor(t2.byteLength / 4));
var gs = (t2) => new DataView(t2.buffer, t2.byteOffset, t2.byteLength);
var ys = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!ys) throw new Error("Non little-endian hardware is not supported");
function ms(t2) {
  if (typeof t2 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t2));
}
function ze(t2) {
  if (typeof t2 == "string") t2 = ms(t2);
  else if (Sr(t2)) t2 = Ze(t2);
  else throw new Error("Uint8Array expected, got " + typeof t2);
  return t2;
}
function ws(t2, e2) {
  if (e2 == null || typeof e2 != "object") throw new Error("options must be defined");
  return Object.assign(t2, e2);
}
function bs(t2, e2) {
  if (t2.length !== e2.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t2.length; r2++) n2 |= t2[r2] ^ e2[r2];
  return n2 === 0;
}
var Es = (t2, e2) => {
  function n2(r2, ...o2) {
    if (tt(r2), t2.nonceLength !== void 0) {
      const l4 = o2[0];
      if (!l4) throw new Error("nonce / iv required");
      t2.varSizeNonce ? tt(l4) : tt(l4, t2.nonceLength);
    }
    const i4 = t2.tagLength;
    i4 && o2[1] !== void 0 && tt(o2[1]);
    const s2 = e2(r2, ...o2), c4 = (l4, f7) => {
      if (f7 !== void 0) {
        if (l4 !== 2) throw new Error("cipher output not supported");
        tt(f7);
      }
    };
    let a2 = false;
    return { encrypt(l4, f7) {
      if (a2) throw new Error("cannot encrypt() twice with same key + nonce");
      return a2 = true, tt(l4), c4(s2.encrypt.length, f7), s2.encrypt(l4, f7);
    }, decrypt(l4, f7) {
      if (tt(l4), i4 && l4.length < i4) throw new Error("invalid ciphertext length: smaller than tagLength=" + i4);
      return c4(s2.decrypt.length, f7), s2.decrypt(l4, f7);
    } };
  }
  return Object.assign(n2, t2), n2;
};
function Br(t2, e2, n2 = true) {
  if (e2 === void 0) return new Uint8Array(t2);
  if (e2.length !== t2) throw new Error("invalid output length, expected " + t2 + ", got: " + e2.length);
  if (n2 && !vs(e2)) throw new Error("invalid output, must be aligned");
  return e2;
}
function Ir(t2, e2, n2, r2) {
  if (typeof t2.setBigUint64 == "function") return t2.setBigUint64(e2, n2, r2);
  const o2 = BigInt(32), i4 = BigInt(4294967295), s2 = Number(n2 >> o2 & i4), c4 = Number(n2 & i4), a2 = r2 ? 4 : 0, u4 = r2 ? 0 : 4;
  t2.setUint32(e2 + a2, s2, r2), t2.setUint32(e2 + u4, c4, r2);
}
function vs(t2) {
  return t2.byteOffset % 4 === 0;
}
function Ze(t2) {
  return Uint8Array.from(t2);
}
function jt(...t2) {
  for (let e2 = 0; e2 < t2.length; e2++) t2[e2].fill(0);
}
var Nr = (t2) => Uint8Array.from(t2.split("").map((e2) => e2.charCodeAt(0)));
var xs = Nr("expand 16-byte k");
var Ss = Nr("expand 32-byte k");
var Os = mt(xs);
var As = mt(Ss);
function V2(t2, e2) {
  return t2 << e2 | t2 >>> 32 - e2;
}
function Ye(t2) {
  return t2.byteOffset % 4 === 0;
}
var ge = 64;
var Bs = 16;
var Ur = 2 ** 32 - 1;
var Tr = new Uint32Array();
function Is(t2, e2, n2, r2, o2, i4, s2, c4) {
  const a2 = o2.length, u4 = new Uint8Array(ge), l4 = mt(u4), f7 = Ye(o2) && Ye(i4), h5 = f7 ? mt(o2) : Tr, y6 = f7 ? mt(i4) : Tr;
  for (let E5 = 0; E5 < a2; s2++) {
    if (t2(e2, n2, r2, l4, s2, c4), s2 >= Ur) throw new Error("arx: counter overflow");
    const p3 = Math.min(ge, a2 - E5);
    if (f7 && p3 === ge) {
      const d3 = E5 / 4;
      if (E5 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let v4 = 0, m2; v4 < Bs; v4++) m2 = d3 + v4, y6[m2] = h5[m2] ^ l4[v4];
      E5 += ge;
      continue;
    }
    for (let d3 = 0, v4; d3 < p3; d3++) v4 = E5 + d3, i4[v4] = o2[v4] ^ u4[d3];
    E5 += p3;
  }
}
function Ns(t2, e2) {
  const { allowShortKeys: n2, extendNonceFn: r2, counterLength: o2, counterRight: i4, rounds: s2 } = ws({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e2);
  if (typeof t2 != "function") throw new Error("core must be a function");
  return Fe(o2), Fe(s2), Ar(i4), Ar(n2), (c4, a2, u4, l4, f7 = 0) => {
    tt(c4), tt(a2), tt(u4);
    const h5 = u4.length;
    if (l4 === void 0 && (l4 = new Uint8Array(h5)), tt(l4), Fe(f7), f7 < 0 || f7 >= Ur) throw new Error("arx: counter overflow");
    if (l4.length < h5) throw new Error(`arx: output (${l4.length}) is shorter than data (${h5})`);
    const y6 = [];
    let E5 = c4.length, p3, d3;
    if (E5 === 32) y6.push(p3 = Ze(c4)), d3 = As;
    else if (E5 === 16 && n2) p3 = new Uint8Array(32), p3.set(c4), p3.set(c4, 16), d3 = Os, y6.push(p3);
    else throw new Error(`arx: invalid 32-byte key, got length=${E5}`);
    Ye(a2) || y6.push(a2 = Ze(a2));
    const v4 = mt(p3);
    if (r2) {
      if (a2.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r2(d3, v4, mt(a2.subarray(0, 16)), v4), a2 = a2.subarray(16);
    }
    const m2 = 16 - o2;
    if (m2 !== a2.length) throw new Error(`arx: nonce must be ${m2} or 16 bytes`);
    if (m2 !== 12) {
      const N3 = new Uint8Array(12);
      N3.set(a2, i4 ? 0 : 12 - a2.length), a2 = N3, y6.push(a2);
    }
    const O4 = mt(a2);
    return Is(t2, d3, v4, O4, u4, l4, f7, s2), jt(...y6), l4;
  };
}
var F = (t2, e2) => t2[e2++] & 255 | (t2[e2++] & 255) << 8;
var Us = class {
  constructor(e2) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e2 = ze(e2), tt(e2, 32);
    const n2 = F(e2, 0), r2 = F(e2, 2), o2 = F(e2, 4), i4 = F(e2, 6), s2 = F(e2, 8), c4 = F(e2, 10), a2 = F(e2, 12), u4 = F(e2, 14);
    this.r[0] = n2 & 8191, this.r[1] = (n2 >>> 13 | r2 << 3) & 8191, this.r[2] = (r2 >>> 10 | o2 << 6) & 7939, this.r[3] = (o2 >>> 7 | i4 << 9) & 8191, this.r[4] = (i4 >>> 4 | s2 << 12) & 255, this.r[5] = s2 >>> 1 & 8190, this.r[6] = (s2 >>> 14 | c4 << 2) & 8191, this.r[7] = (c4 >>> 11 | a2 << 5) & 8065, this.r[8] = (a2 >>> 8 | u4 << 8) & 8191, this.r[9] = u4 >>> 5 & 127;
    for (let l4 = 0; l4 < 8; l4++) this.pad[l4] = F(e2, 16 + 2 * l4);
  }
  process(e2, n2, r2 = false) {
    const o2 = r2 ? 0 : 2048, { h: i4, r: s2 } = this, c4 = s2[0], a2 = s2[1], u4 = s2[2], l4 = s2[3], f7 = s2[4], h5 = s2[5], y6 = s2[6], E5 = s2[7], p3 = s2[8], d3 = s2[9], v4 = F(e2, n2 + 0), m2 = F(e2, n2 + 2), O4 = F(e2, n2 + 4), N3 = F(e2, n2 + 6), $4 = F(e2, n2 + 8), B3 = F(e2, n2 + 10), A4 = F(e2, n2 + 12), T2 = F(e2, n2 + 14);
    let S4 = i4[0] + (v4 & 8191), L3 = i4[1] + ((v4 >>> 13 | m2 << 3) & 8191), U4 = i4[2] + ((m2 >>> 10 | O4 << 6) & 8191), _ = i4[3] + ((O4 >>> 7 | N3 << 9) & 8191), j2 = i4[4] + ((N3 >>> 4 | $4 << 12) & 8191), g = i4[5] + ($4 >>> 1 & 8191), w2 = i4[6] + (($4 >>> 14 | B3 << 2) & 8191), b4 = i4[7] + ((B3 >>> 11 | A4 << 5) & 8191), I3 = i4[8] + ((A4 >>> 8 | T2 << 8) & 8191), R4 = i4[9] + (T2 >>> 5 | o2), x2 = 0, C5 = x2 + S4 * c4 + L3 * (5 * d3) + U4 * (5 * p3) + _ * (5 * E5) + j2 * (5 * y6);
    x2 = C5 >>> 13, C5 &= 8191, C5 += g * (5 * h5) + w2 * (5 * f7) + b4 * (5 * l4) + I3 * (5 * u4) + R4 * (5 * a2), x2 += C5 >>> 13, C5 &= 8191;
    let P4 = x2 + S4 * a2 + L3 * c4 + U4 * (5 * d3) + _ * (5 * p3) + j2 * (5 * E5);
    x2 = P4 >>> 13, P4 &= 8191, P4 += g * (5 * y6) + w2 * (5 * h5) + b4 * (5 * f7) + I3 * (5 * l4) + R4 * (5 * u4), x2 += P4 >>> 13, P4 &= 8191;
    let k5 = x2 + S4 * u4 + L3 * a2 + U4 * c4 + _ * (5 * d3) + j2 * (5 * p3);
    x2 = k5 >>> 13, k5 &= 8191, k5 += g * (5 * E5) + w2 * (5 * y6) + b4 * (5 * h5) + I3 * (5 * f7) + R4 * (5 * l4), x2 += k5 >>> 13, k5 &= 8191;
    let M4 = x2 + S4 * l4 + L3 * u4 + U4 * a2 + _ * c4 + j2 * (5 * d3);
    x2 = M4 >>> 13, M4 &= 8191, M4 += g * (5 * p3) + w2 * (5 * E5) + b4 * (5 * y6) + I3 * (5 * h5) + R4 * (5 * f7), x2 += M4 >>> 13, M4 &= 8191;
    let D2 = x2 + S4 * f7 + L3 * l4 + U4 * u4 + _ * a2 + j2 * c4;
    x2 = D2 >>> 13, D2 &= 8191, D2 += g * (5 * d3) + w2 * (5 * p3) + b4 * (5 * E5) + I3 * (5 * y6) + R4 * (5 * h5), x2 += D2 >>> 13, D2 &= 8191;
    let z2 = x2 + S4 * h5 + L3 * f7 + U4 * l4 + _ * u4 + j2 * a2;
    x2 = z2 >>> 13, z2 &= 8191, z2 += g * c4 + w2 * (5 * d3) + b4 * (5 * p3) + I3 * (5 * E5) + R4 * (5 * y6), x2 += z2 >>> 13, z2 &= 8191;
    let Z2 = x2 + S4 * y6 + L3 * h5 + U4 * f7 + _ * l4 + j2 * u4;
    x2 = Z2 >>> 13, Z2 &= 8191, Z2 += g * a2 + w2 * c4 + b4 * (5 * d3) + I3 * (5 * p3) + R4 * (5 * E5), x2 += Z2 >>> 13, Z2 &= 8191;
    let st2 = x2 + S4 * E5 + L3 * y6 + U4 * h5 + _ * f7 + j2 * l4;
    x2 = st2 >>> 13, st2 &= 8191, st2 += g * u4 + w2 * a2 + b4 * c4 + I3 * (5 * d3) + R4 * (5 * p3), x2 += st2 >>> 13, st2 &= 8191;
    let W3 = x2 + S4 * p3 + L3 * E5 + U4 * y6 + _ * h5 + j2 * f7;
    x2 = W3 >>> 13, W3 &= 8191, W3 += g * l4 + w2 * u4 + b4 * a2 + I3 * c4 + R4 * (5 * d3), x2 += W3 >>> 13, W3 &= 8191;
    let J3 = x2 + S4 * d3 + L3 * p3 + U4 * E5 + _ * y6 + j2 * h5;
    x2 = J3 >>> 13, J3 &= 8191, J3 += g * f7 + w2 * l4 + b4 * u4 + I3 * a2 + R4 * c4, x2 += J3 >>> 13, J3 &= 8191, x2 = (x2 << 2) + x2 | 0, x2 = x2 + C5 | 0, C5 = x2 & 8191, x2 = x2 >>> 13, P4 += x2, i4[0] = C5, i4[1] = P4, i4[2] = k5, i4[3] = M4, i4[4] = D2, i4[5] = z2, i4[6] = Z2, i4[7] = st2, i4[8] = W3, i4[9] = J3;
  }
  finalize() {
    const { h: e2, pad: n2 } = this, r2 = new Uint16Array(10);
    let o2 = e2[1] >>> 13;
    e2[1] &= 8191;
    for (let c4 = 2; c4 < 10; c4++) e2[c4] += o2, o2 = e2[c4] >>> 13, e2[c4] &= 8191;
    e2[0] += o2 * 5, o2 = e2[0] >>> 13, e2[0] &= 8191, e2[1] += o2, o2 = e2[1] >>> 13, e2[1] &= 8191, e2[2] += o2, r2[0] = e2[0] + 5, o2 = r2[0] >>> 13, r2[0] &= 8191;
    for (let c4 = 1; c4 < 10; c4++) r2[c4] = e2[c4] + o2, o2 = r2[c4] >>> 13, r2[c4] &= 8191;
    r2[9] -= 8192;
    let i4 = (o2 ^ 1) - 1;
    for (let c4 = 0; c4 < 10; c4++) r2[c4] &= i4;
    i4 = ~i4;
    for (let c4 = 0; c4 < 10; c4++) e2[c4] = e2[c4] & i4 | r2[c4];
    e2[0] = (e2[0] | e2[1] << 13) & 65535, e2[1] = (e2[1] >>> 3 | e2[2] << 10) & 65535, e2[2] = (e2[2] >>> 6 | e2[3] << 7) & 65535, e2[3] = (e2[3] >>> 9 | e2[4] << 4) & 65535, e2[4] = (e2[4] >>> 12 | e2[5] << 1 | e2[6] << 14) & 65535, e2[5] = (e2[6] >>> 2 | e2[7] << 11) & 65535, e2[6] = (e2[7] >>> 5 | e2[8] << 8) & 65535, e2[7] = (e2[8] >>> 8 | e2[9] << 5) & 65535;
    let s2 = e2[0] + n2[0];
    e2[0] = s2 & 65535;
    for (let c4 = 1; c4 < 8; c4++) s2 = (e2[c4] + n2[c4] | 0) + (s2 >>> 16) | 0, e2[c4] = s2 & 65535;
    jt(r2);
  }
  update(e2) {
    Or(this);
    const { buffer: n2, blockLen: r2 } = this;
    e2 = ze(e2);
    const o2 = e2.length;
    for (let i4 = 0; i4 < o2; ) {
      const s2 = Math.min(r2 - this.pos, o2 - i4);
      if (s2 === r2) {
        for (; r2 <= o2 - i4; i4 += r2) this.process(e2, i4);
        continue;
      }
      n2.set(e2.subarray(i4, i4 + s2), this.pos), this.pos += s2, i4 += s2, this.pos === r2 && (this.process(n2, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    jt(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e2) {
    Or(this), ps(e2, this), this.finished = true;
    const { buffer: n2, h: r2 } = this;
    let { pos: o2 } = this;
    if (o2) {
      for (n2[o2++] = 1; o2 < 16; o2++) n2[o2] = 0;
      this.process(n2, 0, true);
    }
    this.finalize();
    let i4 = 0;
    for (let s2 = 0; s2 < 8; s2++) e2[i4++] = r2[s2] >>> 0, e2[i4++] = r2[s2] >>> 8;
    return e2;
  }
  digest() {
    const { buffer: e2, outputLen: n2 } = this;
    this.digestInto(e2);
    const r2 = e2.slice(0, n2);
    return this.destroy(), r2;
  }
};
function Ts(t2) {
  const e2 = (r2, o2) => t2(o2).update(ze(r2)).digest(), n2 = t2(new Uint8Array(32));
  return e2.outputLen = n2.outputLen, e2.blockLen = n2.blockLen, e2.create = (r2) => t2(r2), e2;
}
var Rs = Ts((t2) => new Us(t2));
function _s(t2, e2, n2, r2, o2, i4 = 20) {
  let s2 = t2[0], c4 = t2[1], a2 = t2[2], u4 = t2[3], l4 = e2[0], f7 = e2[1], h5 = e2[2], y6 = e2[3], E5 = e2[4], p3 = e2[5], d3 = e2[6], v4 = e2[7], m2 = o2, O4 = n2[0], N3 = n2[1], $4 = n2[2], B3 = s2, A4 = c4, T2 = a2, S4 = u4, L3 = l4, U4 = f7, _ = h5, j2 = y6, g = E5, w2 = p3, b4 = d3, I3 = v4, R4 = m2, x2 = O4, C5 = N3, P4 = $4;
  for (let M4 = 0; M4 < i4; M4 += 2) B3 = B3 + L3 | 0, R4 = V2(R4 ^ B3, 16), g = g + R4 | 0, L3 = V2(L3 ^ g, 12), B3 = B3 + L3 | 0, R4 = V2(R4 ^ B3, 8), g = g + R4 | 0, L3 = V2(L3 ^ g, 7), A4 = A4 + U4 | 0, x2 = V2(x2 ^ A4, 16), w2 = w2 + x2 | 0, U4 = V2(U4 ^ w2, 12), A4 = A4 + U4 | 0, x2 = V2(x2 ^ A4, 8), w2 = w2 + x2 | 0, U4 = V2(U4 ^ w2, 7), T2 = T2 + _ | 0, C5 = V2(C5 ^ T2, 16), b4 = b4 + C5 | 0, _ = V2(_ ^ b4, 12), T2 = T2 + _ | 0, C5 = V2(C5 ^ T2, 8), b4 = b4 + C5 | 0, _ = V2(_ ^ b4, 7), S4 = S4 + j2 | 0, P4 = V2(P4 ^ S4, 16), I3 = I3 + P4 | 0, j2 = V2(j2 ^ I3, 12), S4 = S4 + j2 | 0, P4 = V2(P4 ^ S4, 8), I3 = I3 + P4 | 0, j2 = V2(j2 ^ I3, 7), B3 = B3 + U4 | 0, P4 = V2(P4 ^ B3, 16), b4 = b4 + P4 | 0, U4 = V2(U4 ^ b4, 12), B3 = B3 + U4 | 0, P4 = V2(P4 ^ B3, 8), b4 = b4 + P4 | 0, U4 = V2(U4 ^ b4, 7), A4 = A4 + _ | 0, R4 = V2(R4 ^ A4, 16), I3 = I3 + R4 | 0, _ = V2(_ ^ I3, 12), A4 = A4 + _ | 0, R4 = V2(R4 ^ A4, 8), I3 = I3 + R4 | 0, _ = V2(_ ^ I3, 7), T2 = T2 + j2 | 0, x2 = V2(x2 ^ T2, 16), g = g + x2 | 0, j2 = V2(j2 ^ g, 12), T2 = T2 + j2 | 0, x2 = V2(x2 ^ T2, 8), g = g + x2 | 0, j2 = V2(j2 ^ g, 7), S4 = S4 + L3 | 0, C5 = V2(C5 ^ S4, 16), w2 = w2 + C5 | 0, L3 = V2(L3 ^ w2, 12), S4 = S4 + L3 | 0, C5 = V2(C5 ^ S4, 8), w2 = w2 + C5 | 0, L3 = V2(L3 ^ w2, 7);
  let k5 = 0;
  r2[k5++] = s2 + B3 | 0, r2[k5++] = c4 + A4 | 0, r2[k5++] = a2 + T2 | 0, r2[k5++] = u4 + S4 | 0, r2[k5++] = l4 + L3 | 0, r2[k5++] = f7 + U4 | 0, r2[k5++] = h5 + _ | 0, r2[k5++] = y6 + j2 | 0, r2[k5++] = E5 + g | 0, r2[k5++] = p3 + w2 | 0, r2[k5++] = d3 + b4 | 0, r2[k5++] = v4 + I3 | 0, r2[k5++] = m2 + R4 | 0, r2[k5++] = O4 + x2 | 0, r2[k5++] = N3 + C5 | 0, r2[k5++] = $4 + P4 | 0;
}
var $s = Ns(_s, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ls = new Uint8Array(16);
var Rr = (t2, e2) => {
  t2.update(e2);
  const n2 = e2.length % 16;
  n2 && t2.update(Ls.subarray(n2));
};
var js = new Uint8Array(32);
function _r(t2, e2, n2, r2, o2) {
  const i4 = t2(e2, n2, js), s2 = Rs.create(i4);
  o2 && Rr(s2, o2), Rr(s2, r2);
  const c4 = new Uint8Array(16), a2 = gs(c4);
  Ir(a2, 0, BigInt(o2 ? o2.length : 0), true), Ir(a2, 8, BigInt(r2.length), true), s2.update(c4);
  const u4 = s2.digest();
  return jt(i4, c4), u4;
}
var Cs = (t2) => (e2, n2, r2) => ({ encrypt(i4, s2) {
  const c4 = i4.length;
  s2 = Br(c4 + 16, s2, false), s2.set(i4);
  const a2 = s2.subarray(0, -16);
  t2(e2, n2, a2, a2, 1);
  const u4 = _r(t2, e2, n2, a2, r2);
  return s2.set(u4, c4), jt(u4), s2;
}, decrypt(i4, s2) {
  s2 = Br(i4.length - 16, s2, false);
  const c4 = i4.subarray(0, -16), a2 = i4.subarray(-16), u4 = _r(t2, e2, n2, c4, r2);
  if (!bs(a2, u4)) throw new Error("invalid tag");
  return s2.set(i4.subarray(0, -16)), t2(e2, n2, s2, s2, 1), jt(u4), s2;
} });
var $r = Es({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Cs($s));
var Lr = class extends ke {
  constructor(e2, n2) {
    super(), this.finished = false, this.destroyed = false, Ce(e2);
    const r2 = $t(n2);
    if (this.iHash = e2.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o2 = this.blockLen, i4 = new Uint8Array(o2);
    i4.set(r2.length > o2 ? e2.create().update(r2).digest() : r2);
    for (let s2 = 0; s2 < i4.length; s2++) i4[s2] ^= 54;
    this.iHash.update(i4), this.oHash = e2.create();
    for (let s2 = 0; s2 < i4.length; s2++) i4[s2] ^= 106;
    this.oHash.update(i4), i4.fill(0);
  }
  update(e2) {
    return Rt(this), this.iHash.update(e2), this;
  }
  digestInto(e2) {
    Rt(this), Xt(e2, this.outputLen), this.finished = true, this.iHash.digestInto(e2), this.oHash.update(e2), this.oHash.digestInto(e2), this.destroy();
  }
  digest() {
    const e2 = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e2), e2;
  }
  _cloneInto(e2) {
    e2 || (e2 = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n2, iHash: r2, finished: o2, destroyed: i4, blockLen: s2, outputLen: c4 } = this;
    return e2 = e2, e2.finished = o2, e2.destroyed = i4, e2.blockLen = s2, e2.outputLen = c4, e2.oHash = n2._cloneInto(e2.oHash), e2.iHash = r2._cloneInto(e2.iHash), e2;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var ye = (t2, e2, n2) => new Lr(t2, e2).update(n2).digest();
ye.create = (t2, e2) => new Lr(t2, e2);
function Ps(t2, e2, n2) {
  return Ce(t2), n2 === void 0 && (n2 = new Uint8Array(t2.outputLen)), ye(t2, $t(n2), $t(e2));
}
var Ge = new Uint8Array([0]);
var jr = new Uint8Array();
function ks(t2, e2, n2, r2 = 32) {
  if (Ce(t2), Wt(r2), r2 > 255 * t2.outputLen) throw new Error("Length should be <= 255*HashLen");
  const o2 = Math.ceil(r2 / t2.outputLen);
  n2 === void 0 && (n2 = jr);
  const i4 = new Uint8Array(o2 * t2.outputLen), s2 = ye.create(t2, e2), c4 = s2._cloneInto(), a2 = new Uint8Array(s2.outputLen);
  for (let u4 = 0; u4 < o2; u4++) Ge[0] = u4 + 1, c4.update(u4 === 0 ? jr : a2).update(n2).update(Ge).digestInto(a2), i4.set(a2, t2.outputLen * u4), s2._cloneInto(c4);
  return s2.destroy(), c4.destroy(), a2.fill(0), Ge.fill(0), i4.slice(0, r2);
}
var Vs = (t2, e2, n2, r2, o2) => ks(t2, Ps(t2, e2, n2), r2, o2);
function Ms(t2, e2, n2, r2) {
  if (typeof t2.setBigUint64 == "function") return t2.setBigUint64(e2, n2, r2);
  const o2 = BigInt(32), i4 = BigInt(4294967295), s2 = Number(n2 >> o2 & i4), c4 = Number(n2 & i4), a2 = r2 ? 4 : 0, u4 = r2 ? 0 : 4;
  t2.setUint32(e2 + a2, s2, r2), t2.setUint32(e2 + u4, c4, r2);
}
function Ds(t2, e2, n2) {
  return t2 & e2 ^ ~t2 & n2;
}
function Hs(t2, e2, n2) {
  return t2 & e2 ^ t2 & n2 ^ e2 & n2;
}
var qs = class extends ke {
  constructor(e2, n2, r2, o2) {
    super(), this.blockLen = e2, this.outputLen = n2, this.padOffset = r2, this.isLE = o2, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e2), this.view = Pe(this.buffer);
  }
  update(e2) {
    Rt(this);
    const { view: n2, buffer: r2, blockLen: o2 } = this;
    e2 = $t(e2);
    const i4 = e2.length;
    for (let s2 = 0; s2 < i4; ) {
      const c4 = Math.min(o2 - this.pos, i4 - s2);
      if (c4 === o2) {
        const a2 = Pe(e2);
        for (; o2 <= i4 - s2; s2 += o2) this.process(a2, s2);
        continue;
      }
      r2.set(e2.subarray(s2, s2 + c4), this.pos), this.pos += c4, s2 += c4, this.pos === o2 && (this.process(n2, 0), this.pos = 0);
    }
    return this.length += e2.length, this.roundClean(), this;
  }
  digestInto(e2) {
    Rt(this), Gn(e2, this), this.finished = true;
    const { buffer: n2, view: r2, blockLen: o2, isLE: i4 } = this;
    let { pos: s2 } = this;
    n2[s2++] = 128, this.buffer.subarray(s2).fill(0), this.padOffset > o2 - s2 && (this.process(r2, 0), s2 = 0);
    for (let f7 = s2; f7 < o2; f7++) n2[f7] = 0;
    Ms(r2, o2 - 8, BigInt(this.length * 8), i4), this.process(r2, 0);
    const c4 = Pe(e2), a2 = this.outputLen;
    if (a2 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u4 = a2 / 4, l4 = this.get();
    if (u4 > l4.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f7 = 0; f7 < u4; f7++) c4.setUint32(4 * f7, l4[f7], i4);
  }
  digest() {
    const { buffer: e2, outputLen: n2 } = this;
    this.digestInto(e2);
    const r2 = e2.slice(0, n2);
    return this.destroy(), r2;
  }
  _cloneInto(e2) {
    e2 || (e2 = new this.constructor()), e2.set(...this.get());
    const { blockLen: n2, buffer: r2, length: o2, finished: i4, destroyed: s2, pos: c4 } = this;
    return e2.length = o2, e2.pos = c4, e2.finished = i4, e2.destroyed = s2, o2 % n2 && e2.buffer.set(r2), e2;
  }
};
var Ks = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var wt = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var bt = new Uint32Array(64);
var Fs = class extends qs {
  constructor() {
    super(64, 32, 8, false), this.A = wt[0] | 0, this.B = wt[1] | 0, this.C = wt[2] | 0, this.D = wt[3] | 0, this.E = wt[4] | 0, this.F = wt[5] | 0, this.G = wt[6] | 0, this.H = wt[7] | 0;
  }
  get() {
    const { A: e2, B: n2, C: r2, D: o2, E: i4, F: s2, G: c4, H: a2 } = this;
    return [e2, n2, r2, o2, i4, s2, c4, a2];
  }
  set(e2, n2, r2, o2, i4, s2, c4, a2) {
    this.A = e2 | 0, this.B = n2 | 0, this.C = r2 | 0, this.D = o2 | 0, this.E = i4 | 0, this.F = s2 | 0, this.G = c4 | 0, this.H = a2 | 0;
  }
  process(e2, n2) {
    for (let f7 = 0; f7 < 16; f7++, n2 += 4) bt[f7] = e2.getUint32(n2, false);
    for (let f7 = 16; f7 < 64; f7++) {
      const h5 = bt[f7 - 15], y6 = bt[f7 - 2], E5 = ct(h5, 7) ^ ct(h5, 18) ^ h5 >>> 3, p3 = ct(y6, 17) ^ ct(y6, 19) ^ y6 >>> 10;
      bt[f7] = p3 + bt[f7 - 7] + E5 + bt[f7 - 16] | 0;
    }
    let { A: r2, B: o2, C: i4, D: s2, E: c4, F: a2, G: u4, H: l4 } = this;
    for (let f7 = 0; f7 < 64; f7++) {
      const h5 = ct(c4, 6) ^ ct(c4, 11) ^ ct(c4, 25), y6 = l4 + h5 + Ds(c4, a2, u4) + Ks[f7] + bt[f7] | 0, p3 = (ct(r2, 2) ^ ct(r2, 13) ^ ct(r2, 22)) + Hs(r2, o2, i4) | 0;
      l4 = u4, u4 = a2, a2 = c4, c4 = s2 + y6 | 0, s2 = i4, i4 = o2, o2 = r2, r2 = y6 + p3 | 0;
    }
    r2 = r2 + this.A | 0, o2 = o2 + this.B | 0, i4 = i4 + this.C | 0, s2 = s2 + this.D | 0, c4 = c4 + this.E | 0, a2 = a2 + this.F | 0, u4 = u4 + this.G | 0, l4 = l4 + this.H | 0, this.set(r2, o2, i4, s2, c4, a2, u4, l4);
  }
  roundClean() {
    bt.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var Qt = Qn(() => new Fs());
var me = BigInt(0);
var we = BigInt(1);
var zs = BigInt(2);
function St(t2) {
  return t2 instanceof Uint8Array || ArrayBuffer.isView(t2) && t2.constructor.name === "Uint8Array";
}
function te(t2) {
  if (!St(t2)) throw new Error("Uint8Array expected");
}
function Ct(t2, e2) {
  if (typeof e2 != "boolean") throw new Error(t2 + " boolean expected, got " + e2);
}
var Zs = Array.from({ length: 256 }, (t2, e2) => e2.toString(16).padStart(2, "0"));
function Pt(t2) {
  te(t2);
  let e2 = "";
  for (let n2 = 0; n2 < t2.length; n2++) e2 += Zs[t2[n2]];
  return e2;
}
function kt(t2) {
  const e2 = t2.toString(16);
  return e2.length & 1 ? "0" + e2 : e2;
}
function We(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  return t2 === "" ? me : BigInt("0x" + t2);
}
var ut = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Cr(t2) {
  if (t2 >= ut._0 && t2 <= ut._9) return t2 - ut._0;
  if (t2 >= ut.A && t2 <= ut.F) return t2 - (ut.A - 10);
  if (t2 >= ut.a && t2 <= ut.f) return t2 - (ut.a - 10);
}
function Vt(t2) {
  if (typeof t2 != "string") throw new Error("hex string expected, got " + typeof t2);
  const e2 = t2.length, n2 = e2 / 2;
  if (e2 % 2) throw new Error("hex string expected, got unpadded hex of length " + e2);
  const r2 = new Uint8Array(n2);
  for (let o2 = 0, i4 = 0; o2 < n2; o2++, i4 += 2) {
    const s2 = Cr(t2.charCodeAt(i4)), c4 = Cr(t2.charCodeAt(i4 + 1));
    if (s2 === void 0 || c4 === void 0) {
      const a2 = t2[i4] + t2[i4 + 1];
      throw new Error('hex string expected, got non-hex character "' + a2 + '" at index ' + i4);
    }
    r2[o2] = s2 * 16 + c4;
  }
  return r2;
}
function Ot(t2) {
  return We(Pt(t2));
}
function ee(t2) {
  return te(t2), We(Pt(Uint8Array.from(t2).reverse()));
}
function Mt(t2, e2) {
  return Vt(t2.toString(16).padStart(e2 * 2, "0"));
}
function be(t2, e2) {
  return Mt(t2, e2).reverse();
}
function Ys(t2) {
  return Vt(kt(t2));
}
function et(t2, e2, n2) {
  let r2;
  if (typeof e2 == "string") try {
    r2 = Vt(e2);
  } catch (i4) {
    throw new Error(t2 + " must be hex string or Uint8Array, cause: " + i4);
  }
  else if (St(e2)) r2 = Uint8Array.from(e2);
  else throw new Error(t2 + " must be hex string or Uint8Array");
  const o2 = r2.length;
  if (typeof n2 == "number" && o2 !== n2) throw new Error(t2 + " of length " + n2 + " expected, got " + o2);
  return r2;
}
function ne(...t2) {
  let e2 = 0;
  for (let r2 = 0; r2 < t2.length; r2++) {
    const o2 = t2[r2];
    te(o2), e2 += o2.length;
  }
  const n2 = new Uint8Array(e2);
  for (let r2 = 0, o2 = 0; r2 < t2.length; r2++) {
    const i4 = t2[r2];
    n2.set(i4, o2), o2 += i4.length;
  }
  return n2;
}
function Gs(t2, e2) {
  if (t2.length !== e2.length) return false;
  let n2 = 0;
  for (let r2 = 0; r2 < t2.length; r2++) n2 |= t2[r2] ^ e2[r2];
  return n2 === 0;
}
function Ws(t2) {
  if (typeof t2 != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t2));
}
var Xe = (t2) => typeof t2 == "bigint" && me <= t2;
function Ee(t2, e2, n2) {
  return Xe(t2) && Xe(e2) && Xe(n2) && e2 <= t2 && t2 < n2;
}
function ft(t2, e2, n2, r2) {
  if (!Ee(e2, n2, r2)) throw new Error("expected valid " + t2 + ": " + n2 + " <= n < " + r2 + ", got " + e2);
}
function Pr(t2) {
  let e2;
  for (e2 = 0; t2 > me; t2 >>= we, e2 += 1) ;
  return e2;
}
function Xs(t2, e2) {
  return t2 >> BigInt(e2) & we;
}
function Js(t2, e2, n2) {
  return t2 | (n2 ? we : me) << BigInt(e2);
}
var Je = (t2) => (zs << BigInt(t2 - 1)) - we;
var Qe2 = (t2) => new Uint8Array(t2);
var kr = (t2) => Uint8Array.from(t2);
function Vr(t2, e2, n2) {
  if (typeof t2 != "number" || t2 < 2) throw new Error("hashLen must be a number");
  if (typeof e2 != "number" || e2 < 2) throw new Error("qByteLen must be a number");
  if (typeof n2 != "function") throw new Error("hmacFn must be a function");
  let r2 = Qe2(t2), o2 = Qe2(t2), i4 = 0;
  const s2 = () => {
    r2.fill(1), o2.fill(0), i4 = 0;
  }, c4 = (...f7) => n2(o2, r2, ...f7), a2 = (f7 = Qe2()) => {
    o2 = c4(kr([0]), f7), r2 = c4(), f7.length !== 0 && (o2 = c4(kr([1]), f7), r2 = c4());
  }, u4 = () => {
    if (i4++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let f7 = 0;
    const h5 = [];
    for (; f7 < e2; ) {
      r2 = c4();
      const y6 = r2.slice();
      h5.push(y6), f7 += r2.length;
    }
    return ne(...h5);
  };
  return (f7, h5) => {
    s2(), a2(f7);
    let y6;
    for (; !(y6 = h5(u4())); ) a2();
    return s2(), y6;
  };
}
var Qs = { bigint: (t2) => typeof t2 == "bigint", function: (t2) => typeof t2 == "function", boolean: (t2) => typeof t2 == "boolean", string: (t2) => typeof t2 == "string", stringOrUint8Array: (t2) => typeof t2 == "string" || St(t2), isSafeInteger: (t2) => Number.isSafeInteger(t2), array: (t2) => Array.isArray(t2), field: (t2, e2) => e2.Fp.isValid(t2), hash: (t2) => typeof t2 == "function" && Number.isSafeInteger(t2.outputLen) };
function Dt(t2, e2, n2 = {}) {
  const r2 = (o2, i4, s2) => {
    const c4 = Qs[i4];
    if (typeof c4 != "function") throw new Error("invalid validator function");
    const a2 = t2[o2];
    if (!(s2 && a2 === void 0) && !c4(a2, t2)) throw new Error("param " + String(o2) + " is invalid. Expected " + i4 + ", got " + a2);
  };
  for (const [o2, i4] of Object.entries(e2)) r2(o2, i4, false);
  for (const [o2, i4] of Object.entries(n2)) r2(o2, i4, true);
  return t2;
}
var tc = () => {
  throw new Error("not implemented");
};
function tn(t2) {
  const e2 = /* @__PURE__ */ new WeakMap();
  return (n2, ...r2) => {
    const o2 = e2.get(n2);
    if (o2 !== void 0) return o2;
    const i4 = t2(n2, ...r2);
    return e2.set(n2, i4), i4;
  };
}
var ec = Object.freeze({ __proto__: null, isBytes: St, abytes: te, abool: Ct, bytesToHex: Pt, numberToHexUnpadded: kt, hexToNumber: We, hexToBytes: Vt, bytesToNumberBE: Ot, bytesToNumberLE: ee, numberToBytesBE: Mt, numberToBytesLE: be, numberToVarBytesBE: Ys, ensureBytes: et, concatBytes: ne, equalBytes: Gs, utf8ToBytes: Ws, inRange: Ee, aInRange: ft, bitLen: Pr, bitGet: Xs, bitSet: Js, bitMask: Je, createHmacDrbg: Vr, validateObject: Dt, notImplemented: tc, memoized: tn });
var q = BigInt(0);
var H = BigInt(1);
var At = BigInt(2);
var nc = BigInt(3);
var en = BigInt(4);
var Mr = BigInt(5);
var Dr = BigInt(8);
function X(t2, e2) {
  const n2 = t2 % e2;
  return n2 >= q ? n2 : e2 + n2;
}
function Hr(t2, e2, n2) {
  if (e2 < q) throw new Error("invalid exponent, negatives unsupported");
  if (n2 <= q) throw new Error("invalid modulus");
  if (n2 === H) return q;
  let r2 = H;
  for (; e2 > q; ) e2 & H && (r2 = r2 * t2 % n2), t2 = t2 * t2 % n2, e2 >>= H;
  return r2;
}
function it(t2, e2, n2) {
  let r2 = t2;
  for (; e2-- > q; ) r2 *= r2, r2 %= n2;
  return r2;
}
function nn(t2, e2) {
  if (t2 === q) throw new Error("invert: expected non-zero number");
  if (e2 <= q) throw new Error("invert: expected positive modulus, got " + e2);
  let n2 = X(t2, e2), r2 = e2, o2 = q, i4 = H;
  for (; n2 !== q; ) {
    const c4 = r2 / n2, a2 = r2 % n2, u4 = o2 - i4 * c4;
    r2 = n2, n2 = a2, o2 = i4, i4 = u4;
  }
  if (r2 !== H) throw new Error("invert: does not exist");
  return X(o2, e2);
}
function rc(t2) {
  const e2 = (t2 - H) / At;
  let n2, r2, o2;
  for (n2 = t2 - H, r2 = 0; n2 % At === q; n2 /= At, r2++) ;
  for (o2 = At; o2 < t2 && Hr(o2, e2, t2) !== t2 - H; o2++) if (o2 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r2 === 1) {
    const s2 = (t2 + H) / en;
    return function(a2, u4) {
      const l4 = a2.pow(u4, s2);
      if (!a2.eql(a2.sqr(l4), u4)) throw new Error("Cannot find square root");
      return l4;
    };
  }
  const i4 = (n2 + H) / At;
  return function(c4, a2) {
    if (c4.pow(a2, e2) === c4.neg(c4.ONE)) throw new Error("Cannot find square root");
    let u4 = r2, l4 = c4.pow(c4.mul(c4.ONE, o2), n2), f7 = c4.pow(a2, i4), h5 = c4.pow(a2, n2);
    for (; !c4.eql(h5, c4.ONE); ) {
      if (c4.eql(h5, c4.ZERO)) return c4.ZERO;
      let y6 = 1;
      for (let p3 = c4.sqr(h5); y6 < u4 && !c4.eql(p3, c4.ONE); y6++) p3 = c4.sqr(p3);
      const E5 = c4.pow(l4, H << BigInt(u4 - y6 - 1));
      l4 = c4.sqr(E5), f7 = c4.mul(f7, E5), h5 = c4.mul(h5, l4), u4 = y6;
    }
    return f7;
  };
}
function oc(t2) {
  if (t2 % en === nc) {
    const e2 = (t2 + H) / en;
    return function(r2, o2) {
      const i4 = r2.pow(o2, e2);
      if (!r2.eql(r2.sqr(i4), o2)) throw new Error("Cannot find square root");
      return i4;
    };
  }
  if (t2 % Dr === Mr) {
    const e2 = (t2 - Mr) / Dr;
    return function(r2, o2) {
      const i4 = r2.mul(o2, At), s2 = r2.pow(i4, e2), c4 = r2.mul(o2, s2), a2 = r2.mul(r2.mul(c4, At), s2), u4 = r2.mul(c4, r2.sub(a2, r2.ONE));
      if (!r2.eql(r2.sqr(u4), o2)) throw new Error("Cannot find square root");
      return u4;
    };
  }
  return rc(t2);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function sc(t2) {
  const e2 = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n2 = ic.reduce((r2, o2) => (r2[o2] = "function", r2), e2);
  return Dt(t2, n2);
}
function cc(t2, e2, n2) {
  if (n2 < q) throw new Error("invalid exponent, negatives unsupported");
  if (n2 === q) return t2.ONE;
  if (n2 === H) return e2;
  let r2 = t2.ONE, o2 = e2;
  for (; n2 > q; ) n2 & H && (r2 = t2.mul(r2, o2)), o2 = t2.sqr(o2), n2 >>= H;
  return r2;
}
function ac(t2, e2) {
  const n2 = new Array(e2.length), r2 = e2.reduce((i4, s2, c4) => t2.is0(s2) ? i4 : (n2[c4] = i4, t2.mul(i4, s2)), t2.ONE), o2 = t2.inv(r2);
  return e2.reduceRight((i4, s2, c4) => t2.is0(s2) ? i4 : (n2[c4] = t2.mul(i4, n2[c4]), t2.mul(i4, s2)), o2), n2;
}
function qr(t2, e2) {
  const n2 = e2 !== void 0 ? e2 : t2.toString(2).length, r2 = Math.ceil(n2 / 8);
  return { nBitLength: n2, nByteLength: r2 };
}
function Kr2(t2, e2, n2 = false, r2 = {}) {
  if (t2 <= q) throw new Error("invalid field: expected ORDER > 0, got " + t2);
  const { nBitLength: o2, nByteLength: i4 } = qr(t2, e2);
  if (i4 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let s2;
  const c4 = Object.freeze({ ORDER: t2, isLE: n2, BITS: o2, BYTES: i4, MASK: Je(o2), ZERO: q, ONE: H, create: (a2) => X(a2, t2), isValid: (a2) => {
    if (typeof a2 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof a2);
    return q <= a2 && a2 < t2;
  }, is0: (a2) => a2 === q, isOdd: (a2) => (a2 & H) === H, neg: (a2) => X(-a2, t2), eql: (a2, u4) => a2 === u4, sqr: (a2) => X(a2 * a2, t2), add: (a2, u4) => X(a2 + u4, t2), sub: (a2, u4) => X(a2 - u4, t2), mul: (a2, u4) => X(a2 * u4, t2), pow: (a2, u4) => cc(c4, a2, u4), div: (a2, u4) => X(a2 * nn(u4, t2), t2), sqrN: (a2) => a2 * a2, addN: (a2, u4) => a2 + u4, subN: (a2, u4) => a2 - u4, mulN: (a2, u4) => a2 * u4, inv: (a2) => nn(a2, t2), sqrt: r2.sqrt || ((a2) => (s2 || (s2 = oc(t2)), s2(c4, a2))), invertBatch: (a2) => ac(c4, a2), cmov: (a2, u4, l4) => l4 ? u4 : a2, toBytes: (a2) => n2 ? be(a2, i4) : Mt(a2, i4), fromBytes: (a2) => {
    if (a2.length !== i4) throw new Error("Field.fromBytes: expected " + i4 + " bytes, got " + a2.length);
    return n2 ? ee(a2) : Ot(a2);
  } });
  return Object.freeze(c4);
}
function Fr(t2) {
  if (typeof t2 != "bigint") throw new Error("field order must be bigint");
  const e2 = t2.toString(2).length;
  return Math.ceil(e2 / 8);
}
function zr(t2) {
  const e2 = Fr(t2);
  return e2 + Math.ceil(e2 / 2);
}
function uc(t2, e2, n2 = false) {
  const r2 = t2.length, o2 = Fr(e2), i4 = zr(e2);
  if (r2 < 16 || r2 < i4 || r2 > 1024) throw new Error("expected " + i4 + "-1024 bytes of input, got " + r2);
  const s2 = n2 ? ee(t2) : Ot(t2), c4 = X(s2, e2 - H) + H;
  return n2 ? be(c4, o2) : Mt(c4, o2);
}
var Zr = BigInt(0);
var ve = BigInt(1);
function rn(t2, e2) {
  const n2 = e2.negate();
  return t2 ? n2 : e2;
}
function Yr(t2, e2) {
  if (!Number.isSafeInteger(t2) || t2 <= 0 || t2 > e2) throw new Error("invalid window size, expected [1.." + e2 + "], got W=" + t2);
}
function on(t2, e2) {
  Yr(t2, e2);
  const n2 = Math.ceil(e2 / t2) + 1, r2 = 2 ** (t2 - 1);
  return { windows: n2, windowSize: r2 };
}
function fc(t2, e2) {
  if (!Array.isArray(t2)) throw new Error("array expected");
  t2.forEach((n2, r2) => {
    if (!(n2 instanceof e2)) throw new Error("invalid point at index " + r2);
  });
}
function lc(t2, e2) {
  if (!Array.isArray(t2)) throw new Error("array of scalars expected");
  t2.forEach((n2, r2) => {
    if (!e2.isValid(n2)) throw new Error("invalid scalar at index " + r2);
  });
}
var sn2 = /* @__PURE__ */ new WeakMap();
var Gr = /* @__PURE__ */ new WeakMap();
function cn(t2) {
  return Gr.get(t2) || 1;
}
function dc(t2, e2) {
  return { constTimeNegate: rn, hasPrecomputes(n2) {
    return cn(n2) !== 1;
  }, unsafeLadder(n2, r2, o2 = t2.ZERO) {
    let i4 = n2;
    for (; r2 > Zr; ) r2 & ve && (o2 = o2.add(i4)), i4 = i4.double(), r2 >>= ve;
    return o2;
  }, precomputeWindow(n2, r2) {
    const { windows: o2, windowSize: i4 } = on(r2, e2), s2 = [];
    let c4 = n2, a2 = c4;
    for (let u4 = 0; u4 < o2; u4++) {
      a2 = c4, s2.push(a2);
      for (let l4 = 1; l4 < i4; l4++) a2 = a2.add(c4), s2.push(a2);
      c4 = a2.double();
    }
    return s2;
  }, wNAF(n2, r2, o2) {
    const { windows: i4, windowSize: s2 } = on(n2, e2);
    let c4 = t2.ZERO, a2 = t2.BASE;
    const u4 = BigInt(2 ** n2 - 1), l4 = 2 ** n2, f7 = BigInt(n2);
    for (let h5 = 0; h5 < i4; h5++) {
      const y6 = h5 * s2;
      let E5 = Number(o2 & u4);
      o2 >>= f7, E5 > s2 && (E5 -= l4, o2 += ve);
      const p3 = y6, d3 = y6 + Math.abs(E5) - 1, v4 = h5 % 2 !== 0, m2 = E5 < 0;
      E5 === 0 ? a2 = a2.add(rn(v4, r2[p3])) : c4 = c4.add(rn(m2, r2[d3]));
    }
    return { p: c4, f: a2 };
  }, wNAFUnsafe(n2, r2, o2, i4 = t2.ZERO) {
    const { windows: s2, windowSize: c4 } = on(n2, e2), a2 = BigInt(2 ** n2 - 1), u4 = 2 ** n2, l4 = BigInt(n2);
    for (let f7 = 0; f7 < s2; f7++) {
      const h5 = f7 * c4;
      if (o2 === Zr) break;
      let y6 = Number(o2 & a2);
      if (o2 >>= l4, y6 > c4 && (y6 -= u4, o2 += ve), y6 === 0) continue;
      let E5 = r2[h5 + Math.abs(y6) - 1];
      y6 < 0 && (E5 = E5.negate()), i4 = i4.add(E5);
    }
    return i4;
  }, getPrecomputes(n2, r2, o2) {
    let i4 = sn2.get(r2);
    return i4 || (i4 = this.precomputeWindow(r2, n2), n2 !== 1 && sn2.set(r2, o2(i4))), i4;
  }, wNAFCached(n2, r2, o2) {
    const i4 = cn(n2);
    return this.wNAF(i4, this.getPrecomputes(i4, n2, o2), r2);
  }, wNAFCachedUnsafe(n2, r2, o2, i4) {
    const s2 = cn(n2);
    return s2 === 1 ? this.unsafeLadder(n2, r2, i4) : this.wNAFUnsafe(s2, this.getPrecomputes(s2, n2, o2), r2, i4);
  }, setWindowSize(n2, r2) {
    Yr(r2, e2), Gr.set(n2, r2), sn2.delete(n2);
  } };
}
function hc(t2, e2, n2, r2) {
  if (fc(n2, t2), lc(r2, e2), n2.length !== r2.length) throw new Error("arrays of points and scalars must have equal length");
  const o2 = t2.ZERO, i4 = Pr(BigInt(n2.length)), s2 = i4 > 12 ? i4 - 3 : i4 > 4 ? i4 - 2 : i4 ? 2 : 1, c4 = (1 << s2) - 1, a2 = new Array(c4 + 1).fill(o2), u4 = Math.floor((e2.BITS - 1) / s2) * s2;
  let l4 = o2;
  for (let f7 = u4; f7 >= 0; f7 -= s2) {
    a2.fill(o2);
    for (let y6 = 0; y6 < r2.length; y6++) {
      const E5 = r2[y6], p3 = Number(E5 >> BigInt(f7) & BigInt(c4));
      a2[p3] = a2[p3].add(n2[y6]);
    }
    let h5 = o2;
    for (let y6 = a2.length - 1, E5 = o2; y6 > 0; y6--) E5 = E5.add(a2[y6]), h5 = h5.add(E5);
    if (l4 = l4.add(h5), f7 !== 0) for (let y6 = 0; y6 < s2; y6++) l4 = l4.double();
  }
  return l4;
}
function Wr(t2) {
  return sc(t2.Fp), Dt(t2, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...qr(t2.n, t2.nBitLength), ...t2, p: t2.Fp.ORDER });
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var Ht = BigInt(0);
var an = BigInt(1);
function pc(t2) {
  return Dt(t2, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...t2 });
}
function gc(t2) {
  const e2 = pc(t2), { P: n2 } = e2, r2 = (m2) => X(m2, n2), o2 = e2.montgomeryBits, i4 = Math.ceil(o2 / 8), s2 = e2.nByteLength, c4 = e2.adjustScalarBytes || ((m2) => m2), a2 = e2.powPminus2 || ((m2) => Hr(m2, n2 - BigInt(2), n2));
  function u4(m2, O4, N3) {
    const $4 = r2(m2 * (O4 - N3));
    return O4 = r2(O4 - $4), N3 = r2(N3 + $4), [O4, N3];
  }
  const l4 = (e2.a - BigInt(2)) / BigInt(4);
  function f7(m2, O4) {
    ft("u", m2, Ht, n2), ft("scalar", O4, Ht, n2);
    const N3 = O4, $4 = m2;
    let B3 = an, A4 = Ht, T2 = m2, S4 = an, L3 = Ht, U4;
    for (let j2 = BigInt(o2 - 1); j2 >= Ht; j2--) {
      const g = N3 >> j2 & an;
      L3 ^= g, U4 = u4(L3, B3, T2), B3 = U4[0], T2 = U4[1], U4 = u4(L3, A4, S4), A4 = U4[0], S4 = U4[1], L3 = g;
      const w2 = B3 + A4, b4 = r2(w2 * w2), I3 = B3 - A4, R4 = r2(I3 * I3), x2 = b4 - R4, C5 = T2 + S4, P4 = T2 - S4, k5 = r2(P4 * w2), M4 = r2(C5 * I3), D2 = k5 + M4, z2 = k5 - M4;
      T2 = r2(D2 * D2), S4 = r2($4 * r2(z2 * z2)), B3 = r2(b4 * R4), A4 = r2(x2 * (b4 + r2(l4 * x2)));
    }
    U4 = u4(L3, B3, T2), B3 = U4[0], T2 = U4[1], U4 = u4(L3, A4, S4), A4 = U4[0], S4 = U4[1];
    const _ = a2(A4);
    return r2(B3 * _);
  }
  function h5(m2) {
    return be(r2(m2), i4);
  }
  function y6(m2) {
    const O4 = et("u coordinate", m2, i4);
    return s2 === 32 && (O4[31] &= 127), ee(O4);
  }
  function E5(m2) {
    const O4 = et("scalar", m2), N3 = O4.length;
    if (N3 !== i4 && N3 !== s2) {
      let $4 = "" + i4 + " or " + s2;
      throw new Error("invalid scalar, expected " + $4 + " bytes, got " + N3);
    }
    return ee(c4(O4));
  }
  function p3(m2, O4) {
    const N3 = y6(O4), $4 = E5(m2), B3 = f7(N3, $4);
    if (B3 === Ht) throw new Error("invalid private or public key received");
    return h5(B3);
  }
  const d3 = h5(e2.Gu);
  function v4(m2) {
    return p3(m2, d3);
  }
  return { scalarMult: p3, scalarMultBase: v4, getSharedSecret: (m2, O4) => p3(m2, O4), getPublicKey: (m2) => v4(m2), utils: { randomPrivateKey: () => e2.randomBytes(e2.nByteLength) }, GuBytes: d3 };
}
var un = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var yc = BigInt(1);
var Xr = BigInt(2);
var mc = BigInt(3);
var wc = BigInt(5);
BigInt(8);
function bc(t2) {
  const e2 = BigInt(10), n2 = BigInt(20), r2 = BigInt(40), o2 = BigInt(80), i4 = un, c4 = t2 * t2 % i4 * t2 % i4, a2 = it(c4, Xr, i4) * c4 % i4, u4 = it(a2, yc, i4) * t2 % i4, l4 = it(u4, wc, i4) * u4 % i4, f7 = it(l4, e2, i4) * l4 % i4, h5 = it(f7, n2, i4) * f7 % i4, y6 = it(h5, r2, i4) * h5 % i4, E5 = it(y6, o2, i4) * y6 % i4, p3 = it(E5, o2, i4) * y6 % i4, d3 = it(p3, e2, i4) * l4 % i4;
  return { pow_p_5_8: it(d3, Xr, i4) * t2 % i4, b2: c4 };
}
function Ec(t2) {
  return t2[0] &= 248, t2[31] &= 127, t2[31] |= 64, t2;
}
var fn = gc({ P: un, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (t2) => {
  const e2 = un, { pow_p_5_8: n2, b2: r2 } = bc(t2);
  return X(it(n2, mc, e2) * r2, e2);
}, adjustScalarBytes: Ec, randomBytes: Lt });
function Jr(t2) {
  t2.lowS !== void 0 && Ct("lowS", t2.lowS), t2.prehash !== void 0 && Ct("prehash", t2.prehash);
}
function vc(t2) {
  const e2 = Wr(t2);
  Dt(e2, { a: "field", b: "field" }, { allowedPrivateKeyLengths: "array", wrapPrivateKey: "boolean", isTorsionFree: "function", clearCofactor: "function", allowInfinityPoint: "boolean", fromBytes: "function", toBytes: "function" });
  const { endo: n2, Fp: r2, a: o2 } = e2;
  if (n2) {
    if (!r2.eql(o2, r2.ZERO)) throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
    if (typeof n2 != "object" || typeof n2.beta != "bigint" || typeof n2.splitScalar != "function") throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e2 });
}
var { bytesToNumberBE: xc, hexToBytes: Sc } = ec;
var Oc = class extends Error {
  constructor(e2 = "") {
    super(e2);
  }
};
var lt = { Err: Oc, _tlv: { encode: (t2, e2) => {
  const { Err: n2 } = lt;
  if (t2 < 0 || t2 > 256) throw new n2("tlv.encode: wrong tag");
  if (e2.length & 1) throw new n2("tlv.encode: unpadded data");
  const r2 = e2.length / 2, o2 = kt(r2);
  if (o2.length / 2 & 128) throw new n2("tlv.encode: long form length too big");
  const i4 = r2 > 127 ? kt(o2.length / 2 | 128) : "";
  return kt(t2) + i4 + o2 + e2;
}, decode(t2, e2) {
  const { Err: n2 } = lt;
  let r2 = 0;
  if (t2 < 0 || t2 > 256) throw new n2("tlv.encode: wrong tag");
  if (e2.length < 2 || e2[r2++] !== t2) throw new n2("tlv.decode: wrong tlv");
  const o2 = e2[r2++], i4 = !!(o2 & 128);
  let s2 = 0;
  if (!i4) s2 = o2;
  else {
    const a2 = o2 & 127;
    if (!a2) throw new n2("tlv.decode(long): indefinite length not supported");
    if (a2 > 4) throw new n2("tlv.decode(long): byte length is too big");
    const u4 = e2.subarray(r2, r2 + a2);
    if (u4.length !== a2) throw new n2("tlv.decode: length bytes not complete");
    if (u4[0] === 0) throw new n2("tlv.decode(long): zero leftmost byte");
    for (const l4 of u4) s2 = s2 << 8 | l4;
    if (r2 += a2, s2 < 128) throw new n2("tlv.decode(long): not minimal encoding");
  }
  const c4 = e2.subarray(r2, r2 + s2);
  if (c4.length !== s2) throw new n2("tlv.decode: wrong value length");
  return { v: c4, l: e2.subarray(r2 + s2) };
} }, _int: { encode(t2) {
  const { Err: e2 } = lt;
  if (t2 < dt) throw new e2("integer: negative integers are not allowed");
  let n2 = kt(t2);
  if (Number.parseInt(n2[0], 16) & 8 && (n2 = "00" + n2), n2.length & 1) throw new e2("unexpected DER parsing assertion: unpadded hex");
  return n2;
}, decode(t2) {
  const { Err: e2 } = lt;
  if (t2[0] & 128) throw new e2("invalid signature integer: negative");
  if (t2[0] === 0 && !(t2[1] & 128)) throw new e2("invalid signature integer: unnecessary leading zero");
  return xc(t2);
} }, toSig(t2) {
  const { Err: e2, _int: n2, _tlv: r2 } = lt, o2 = typeof t2 == "string" ? Sc(t2) : t2;
  te(o2);
  const { v: i4, l: s2 } = r2.decode(48, o2);
  if (s2.length) throw new e2("invalid signature: left bytes after parsing");
  const { v: c4, l: a2 } = r2.decode(2, i4), { v: u4, l: l4 } = r2.decode(2, a2);
  if (l4.length) throw new e2("invalid signature: left bytes after parsing");
  return { r: n2.decode(c4), s: n2.decode(u4) };
}, hexFromSig(t2) {
  const { _tlv: e2, _int: n2 } = lt, r2 = e2.encode(2, n2.encode(t2.r)), o2 = e2.encode(2, n2.encode(t2.s)), i4 = r2 + o2;
  return e2.encode(48, i4);
} };
var dt = BigInt(0);
var K2 = BigInt(1);
BigInt(2);
var Qr = BigInt(3);
BigInt(4);
function Ac(t2) {
  const e2 = vc(t2), { Fp: n2 } = e2, r2 = Kr2(e2.n, e2.nBitLength), o2 = e2.toBytes || ((p3, d3, v4) => {
    const m2 = d3.toAffine();
    return ne(Uint8Array.from([4]), n2.toBytes(m2.x), n2.toBytes(m2.y));
  }), i4 = e2.fromBytes || ((p3) => {
    const d3 = p3.subarray(1), v4 = n2.fromBytes(d3.subarray(0, n2.BYTES)), m2 = n2.fromBytes(d3.subarray(n2.BYTES, 2 * n2.BYTES));
    return { x: v4, y: m2 };
  });
  function s2(p3) {
    const { a: d3, b: v4 } = e2, m2 = n2.sqr(p3), O4 = n2.mul(m2, p3);
    return n2.add(n2.add(O4, n2.mul(p3, d3)), v4);
  }
  if (!n2.eql(n2.sqr(e2.Gy), s2(e2.Gx))) throw new Error("bad generator point: equation left != right");
  function c4(p3) {
    return Ee(p3, K2, e2.n);
  }
  function a2(p3) {
    const { allowedPrivateKeyLengths: d3, nByteLength: v4, wrapPrivateKey: m2, n: O4 } = e2;
    if (d3 && typeof p3 != "bigint") {
      if (St(p3) && (p3 = Pt(p3)), typeof p3 != "string" || !d3.includes(p3.length)) throw new Error("invalid private key");
      p3 = p3.padStart(v4 * 2, "0");
    }
    let N3;
    try {
      N3 = typeof p3 == "bigint" ? p3 : Ot(et("private key", p3, v4));
    } catch {
      throw new Error("invalid private key, expected hex or " + v4 + " bytes, got " + typeof p3);
    }
    return m2 && (N3 = X(N3, O4)), ft("private key", N3, K2, O4), N3;
  }
  function u4(p3) {
    if (!(p3 instanceof h5)) throw new Error("ProjectivePoint expected");
  }
  const l4 = tn((p3, d3) => {
    const { px: v4, py: m2, pz: O4 } = p3;
    if (n2.eql(O4, n2.ONE)) return { x: v4, y: m2 };
    const N3 = p3.is0();
    d3 == null && (d3 = N3 ? n2.ONE : n2.inv(O4));
    const $4 = n2.mul(v4, d3), B3 = n2.mul(m2, d3), A4 = n2.mul(O4, d3);
    if (N3) return { x: n2.ZERO, y: n2.ZERO };
    if (!n2.eql(A4, n2.ONE)) throw new Error("invZ was invalid");
    return { x: $4, y: B3 };
  }), f7 = tn((p3) => {
    if (p3.is0()) {
      if (e2.allowInfinityPoint && !n2.is0(p3.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d3, y: v4 } = p3.toAffine();
    if (!n2.isValid(d3) || !n2.isValid(v4)) throw new Error("bad point: x or y not FE");
    const m2 = n2.sqr(v4), O4 = s2(d3);
    if (!n2.eql(m2, O4)) throw new Error("bad point: equation left != right");
    if (!p3.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class h5 {
    constructor(d3, v4, m2) {
      if (this.px = d3, this.py = v4, this.pz = m2, d3 == null || !n2.isValid(d3)) throw new Error("x required");
      if (v4 == null || !n2.isValid(v4)) throw new Error("y required");
      if (m2 == null || !n2.isValid(m2)) throw new Error("z required");
      Object.freeze(this);
    }
    static fromAffine(d3) {
      const { x: v4, y: m2 } = d3 || {};
      if (!d3 || !n2.isValid(v4) || !n2.isValid(m2)) throw new Error("invalid affine point");
      if (d3 instanceof h5) throw new Error("projective point not allowed");
      const O4 = (N3) => n2.eql(N3, n2.ZERO);
      return O4(v4) && O4(m2) ? h5.ZERO : new h5(v4, m2, n2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d3) {
      const v4 = n2.invertBatch(d3.map((m2) => m2.pz));
      return d3.map((m2, O4) => m2.toAffine(v4[O4])).map(h5.fromAffine);
    }
    static fromHex(d3) {
      const v4 = h5.fromAffine(i4(et("pointHex", d3)));
      return v4.assertValidity(), v4;
    }
    static fromPrivateKey(d3) {
      return h5.BASE.multiply(a2(d3));
    }
    static msm(d3, v4) {
      return hc(h5, r2, d3, v4);
    }
    _setWindowSize(d3) {
      E5.setWindowSize(this, d3);
    }
    assertValidity() {
      f7(this);
    }
    hasEvenY() {
      const { y: d3 } = this.toAffine();
      if (n2.isOdd) return !n2.isOdd(d3);
      throw new Error("Field doesn't support isOdd");
    }
    equals(d3) {
      u4(d3);
      const { px: v4, py: m2, pz: O4 } = this, { px: N3, py: $4, pz: B3 } = d3, A4 = n2.eql(n2.mul(v4, B3), n2.mul(N3, O4)), T2 = n2.eql(n2.mul(m2, B3), n2.mul($4, O4));
      return A4 && T2;
    }
    negate() {
      return new h5(this.px, n2.neg(this.py), this.pz);
    }
    double() {
      const { a: d3, b: v4 } = e2, m2 = n2.mul(v4, Qr), { px: O4, py: N3, pz: $4 } = this;
      let B3 = n2.ZERO, A4 = n2.ZERO, T2 = n2.ZERO, S4 = n2.mul(O4, O4), L3 = n2.mul(N3, N3), U4 = n2.mul($4, $4), _ = n2.mul(O4, N3);
      return _ = n2.add(_, _), T2 = n2.mul(O4, $4), T2 = n2.add(T2, T2), B3 = n2.mul(d3, T2), A4 = n2.mul(m2, U4), A4 = n2.add(B3, A4), B3 = n2.sub(L3, A4), A4 = n2.add(L3, A4), A4 = n2.mul(B3, A4), B3 = n2.mul(_, B3), T2 = n2.mul(m2, T2), U4 = n2.mul(d3, U4), _ = n2.sub(S4, U4), _ = n2.mul(d3, _), _ = n2.add(_, T2), T2 = n2.add(S4, S4), S4 = n2.add(T2, S4), S4 = n2.add(S4, U4), S4 = n2.mul(S4, _), A4 = n2.add(A4, S4), U4 = n2.mul(N3, $4), U4 = n2.add(U4, U4), S4 = n2.mul(U4, _), B3 = n2.sub(B3, S4), T2 = n2.mul(U4, L3), T2 = n2.add(T2, T2), T2 = n2.add(T2, T2), new h5(B3, A4, T2);
    }
    add(d3) {
      u4(d3);
      const { px: v4, py: m2, pz: O4 } = this, { px: N3, py: $4, pz: B3 } = d3;
      let A4 = n2.ZERO, T2 = n2.ZERO, S4 = n2.ZERO;
      const L3 = e2.a, U4 = n2.mul(e2.b, Qr);
      let _ = n2.mul(v4, N3), j2 = n2.mul(m2, $4), g = n2.mul(O4, B3), w2 = n2.add(v4, m2), b4 = n2.add(N3, $4);
      w2 = n2.mul(w2, b4), b4 = n2.add(_, j2), w2 = n2.sub(w2, b4), b4 = n2.add(v4, O4);
      let I3 = n2.add(N3, B3);
      return b4 = n2.mul(b4, I3), I3 = n2.add(_, g), b4 = n2.sub(b4, I3), I3 = n2.add(m2, O4), A4 = n2.add($4, B3), I3 = n2.mul(I3, A4), A4 = n2.add(j2, g), I3 = n2.sub(I3, A4), S4 = n2.mul(L3, b4), A4 = n2.mul(U4, g), S4 = n2.add(A4, S4), A4 = n2.sub(j2, S4), S4 = n2.add(j2, S4), T2 = n2.mul(A4, S4), j2 = n2.add(_, _), j2 = n2.add(j2, _), g = n2.mul(L3, g), b4 = n2.mul(U4, b4), j2 = n2.add(j2, g), g = n2.sub(_, g), g = n2.mul(L3, g), b4 = n2.add(b4, g), _ = n2.mul(j2, b4), T2 = n2.add(T2, _), _ = n2.mul(I3, b4), A4 = n2.mul(w2, A4), A4 = n2.sub(A4, _), _ = n2.mul(w2, j2), S4 = n2.mul(I3, S4), S4 = n2.add(S4, _), new h5(A4, T2, S4);
    }
    subtract(d3) {
      return this.add(d3.negate());
    }
    is0() {
      return this.equals(h5.ZERO);
    }
    wNAF(d3) {
      return E5.wNAFCached(this, d3, h5.normalizeZ);
    }
    multiplyUnsafe(d3) {
      const { endo: v4, n: m2 } = e2;
      ft("scalar", d3, dt, m2);
      const O4 = h5.ZERO;
      if (d3 === dt) return O4;
      if (this.is0() || d3 === K2) return this;
      if (!v4 || E5.hasPrecomputes(this)) return E5.wNAFCachedUnsafe(this, d3, h5.normalizeZ);
      let { k1neg: N3, k1: $4, k2neg: B3, k2: A4 } = v4.splitScalar(d3), T2 = O4, S4 = O4, L3 = this;
      for (; $4 > dt || A4 > dt; ) $4 & K2 && (T2 = T2.add(L3)), A4 & K2 && (S4 = S4.add(L3)), L3 = L3.double(), $4 >>= K2, A4 >>= K2;
      return N3 && (T2 = T2.negate()), B3 && (S4 = S4.negate()), S4 = new h5(n2.mul(S4.px, v4.beta), S4.py, S4.pz), T2.add(S4);
    }
    multiply(d3) {
      const { endo: v4, n: m2 } = e2;
      ft("scalar", d3, K2, m2);
      let O4, N3;
      if (v4) {
        const { k1neg: $4, k1: B3, k2neg: A4, k2: T2 } = v4.splitScalar(d3);
        let { p: S4, f: L3 } = this.wNAF(B3), { p: U4, f: _ } = this.wNAF(T2);
        S4 = E5.constTimeNegate($4, S4), U4 = E5.constTimeNegate(A4, U4), U4 = new h5(n2.mul(U4.px, v4.beta), U4.py, U4.pz), O4 = S4.add(U4), N3 = L3.add(_);
      } else {
        const { p: $4, f: B3 } = this.wNAF(d3);
        O4 = $4, N3 = B3;
      }
      return h5.normalizeZ([O4, N3])[0];
    }
    multiplyAndAddUnsafe(d3, v4, m2) {
      const O4 = h5.BASE, N3 = (B3, A4) => A4 === dt || A4 === K2 || !B3.equals(O4) ? B3.multiplyUnsafe(A4) : B3.multiply(A4), $4 = N3(this, v4).add(N3(d3, m2));
      return $4.is0() ? void 0 : $4;
    }
    toAffine(d3) {
      return l4(this, d3);
    }
    isTorsionFree() {
      const { h: d3, isTorsionFree: v4 } = e2;
      if (d3 === K2) return true;
      if (v4) return v4(h5, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: d3, clearCofactor: v4 } = e2;
      return d3 === K2 ? this : v4 ? v4(h5, this) : this.multiplyUnsafe(e2.h);
    }
    toRawBytes(d3 = true) {
      return Ct("isCompressed", d3), this.assertValidity(), o2(h5, this, d3);
    }
    toHex(d3 = true) {
      return Ct("isCompressed", d3), Pt(this.toRawBytes(d3));
    }
  }
  h5.BASE = new h5(e2.Gx, e2.Gy, n2.ONE), h5.ZERO = new h5(n2.ZERO, n2.ONE, n2.ZERO);
  const y6 = e2.nBitLength, E5 = dc(h5, e2.endo ? Math.ceil(y6 / 2) : y6);
  return { CURVE: e2, ProjectivePoint: h5, normPrivateKeyToScalar: a2, weierstrassEquation: s2, isWithinCurveOrder: c4 };
}
function Bc(t2) {
  const e2 = Wr(t2);
  return Dt(e2, { hash: "hash", hmac: "function", randomBytes: "function" }, { bits2int: "function", bits2int_modN: "function", lowS: "boolean" }), Object.freeze({ lowS: true, ...e2 });
}
function Ic(t2) {
  const e2 = Bc(t2), { Fp: n2, n: r2 } = e2, o2 = n2.BYTES + 1, i4 = 2 * n2.BYTES + 1;
  function s2(g) {
    return X(g, r2);
  }
  function c4(g) {
    return nn(g, r2);
  }
  const { ProjectivePoint: a2, normPrivateKeyToScalar: u4, weierstrassEquation: l4, isWithinCurveOrder: f7 } = Ac({ ...e2, toBytes(g, w2, b4) {
    const I3 = w2.toAffine(), R4 = n2.toBytes(I3.x), x2 = ne;
    return Ct("isCompressed", b4), b4 ? x2(Uint8Array.from([w2.hasEvenY() ? 2 : 3]), R4) : x2(Uint8Array.from([4]), R4, n2.toBytes(I3.y));
  }, fromBytes(g) {
    const w2 = g.length, b4 = g[0], I3 = g.subarray(1);
    if (w2 === o2 && (b4 === 2 || b4 === 3)) {
      const R4 = Ot(I3);
      if (!Ee(R4, K2, n2.ORDER)) throw new Error("Point is not on curve");
      const x2 = l4(R4);
      let C5;
      try {
        C5 = n2.sqrt(x2);
      } catch (M4) {
        const D2 = M4 instanceof Error ? ": " + M4.message : "";
        throw new Error("Point is not on curve" + D2);
      }
      const P4 = (C5 & K2) === K2;
      return (b4 & 1) === 1 !== P4 && (C5 = n2.neg(C5)), { x: R4, y: C5 };
    } else if (w2 === i4 && b4 === 4) {
      const R4 = n2.fromBytes(I3.subarray(0, n2.BYTES)), x2 = n2.fromBytes(I3.subarray(n2.BYTES, 2 * n2.BYTES));
      return { x: R4, y: x2 };
    } else {
      const R4 = o2, x2 = i4;
      throw new Error("invalid Point, expected length of " + R4 + ", or uncompressed " + x2 + ", got " + w2);
    }
  } }), h5 = (g) => Pt(Mt(g, e2.nByteLength));
  function y6(g) {
    const w2 = r2 >> K2;
    return g > w2;
  }
  function E5(g) {
    return y6(g) ? s2(-g) : g;
  }
  const p3 = (g, w2, b4) => Ot(g.slice(w2, b4));
  class d3 {
    constructor(w2, b4, I3) {
      this.r = w2, this.s = b4, this.recovery = I3, this.assertValidity();
    }
    static fromCompact(w2) {
      const b4 = e2.nByteLength;
      return w2 = et("compactSignature", w2, b4 * 2), new d3(p3(w2, 0, b4), p3(w2, b4, 2 * b4));
    }
    static fromDER(w2) {
      const { r: b4, s: I3 } = lt.toSig(et("DER", w2));
      return new d3(b4, I3);
    }
    assertValidity() {
      ft("r", this.r, K2, r2), ft("s", this.s, K2, r2);
    }
    addRecoveryBit(w2) {
      return new d3(this.r, this.s, w2);
    }
    recoverPublicKey(w2) {
      const { r: b4, s: I3, recovery: R4 } = this, x2 = B3(et("msgHash", w2));
      if (R4 == null || ![0, 1, 2, 3].includes(R4)) throw new Error("recovery id invalid");
      const C5 = R4 === 2 || R4 === 3 ? b4 + e2.n : b4;
      if (C5 >= n2.ORDER) throw new Error("recovery id 2 or 3 invalid");
      const P4 = (R4 & 1) === 0 ? "02" : "03", k5 = a2.fromHex(P4 + h5(C5)), M4 = c4(C5), D2 = s2(-x2 * M4), z2 = s2(I3 * M4), Z2 = a2.BASE.multiplyAndAddUnsafe(k5, D2, z2);
      if (!Z2) throw new Error("point at infinify");
      return Z2.assertValidity(), Z2;
    }
    hasHighS() {
      return y6(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new d3(this.r, s2(-this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return Vt(this.toDERHex());
    }
    toDERHex() {
      return lt.hexFromSig({ r: this.r, s: this.s });
    }
    toCompactRawBytes() {
      return Vt(this.toCompactHex());
    }
    toCompactHex() {
      return h5(this.r) + h5(this.s);
    }
  }
  const v4 = { isValidPrivateKey(g) {
    try {
      return u4(g), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: u4, randomPrivateKey: () => {
    const g = zr(e2.n);
    return uc(e2.randomBytes(g), e2.n);
  }, precompute(g = 8, w2 = a2.BASE) {
    return w2._setWindowSize(g), w2.multiply(BigInt(3)), w2;
  } };
  function m2(g, w2 = true) {
    return a2.fromPrivateKey(g).toRawBytes(w2);
  }
  function O4(g) {
    const w2 = St(g), b4 = typeof g == "string", I3 = (w2 || b4) && g.length;
    return w2 ? I3 === o2 || I3 === i4 : b4 ? I3 === 2 * o2 || I3 === 2 * i4 : g instanceof a2;
  }
  function N3(g, w2, b4 = true) {
    if (O4(g)) throw new Error("first arg must be private key");
    if (!O4(w2)) throw new Error("second arg must be public key");
    return a2.fromHex(w2).multiply(u4(g)).toRawBytes(b4);
  }
  const $4 = e2.bits2int || function(g) {
    if (g.length > 8192) throw new Error("input is too large");
    const w2 = Ot(g), b4 = g.length * 8 - e2.nBitLength;
    return b4 > 0 ? w2 >> BigInt(b4) : w2;
  }, B3 = e2.bits2int_modN || function(g) {
    return s2($4(g));
  }, A4 = Je(e2.nBitLength);
  function T2(g) {
    return ft("num < 2^" + e2.nBitLength, g, dt, A4), Mt(g, e2.nByteLength);
  }
  function S4(g, w2, b4 = L3) {
    if (["recovered", "canonical"].some((W3) => W3 in b4)) throw new Error("sign() legacy options not supported");
    const { hash: I3, randomBytes: R4 } = e2;
    let { lowS: x2, prehash: C5, extraEntropy: P4 } = b4;
    x2 == null && (x2 = true), g = et("msgHash", g), Jr(b4), C5 && (g = et("prehashed msgHash", I3(g)));
    const k5 = B3(g), M4 = u4(w2), D2 = [T2(M4), T2(k5)];
    if (P4 != null && P4 !== false) {
      const W3 = P4 === true ? R4(n2.BYTES) : P4;
      D2.push(et("extraEntropy", W3));
    }
    const z2 = ne(...D2), Z2 = k5;
    function st2(W3) {
      const J3 = $4(W3);
      if (!f7(J3)) return;
      const Be4 = c4(J3), zt3 = a2.BASE.multiply(J3).toAffine(), vt2 = s2(zt3.x);
      if (vt2 === dt) return;
      const Zt3 = s2(Be4 * s2(Z2 + vt2 * M4));
      if (Zt3 === dt) return;
      let Ut3 = (zt3.x === vt2 ? 0 : 2) | Number(zt3.y & K2), vn2 = Zt3;
      return x2 && y6(Zt3) && (vn2 = E5(Zt3), Ut3 ^= 1), new d3(vt2, vn2, Ut3);
    }
    return { seed: z2, k2sig: st2 };
  }
  const L3 = { lowS: e2.lowS, prehash: false }, U4 = { lowS: e2.lowS, prehash: false };
  function _(g, w2, b4 = L3) {
    const { seed: I3, k2sig: R4 } = S4(g, w2, b4), x2 = e2;
    return Vr(x2.hash.outputLen, x2.nByteLength, x2.hmac)(I3, R4);
  }
  a2.BASE._setWindowSize(8);
  function j2(g, w2, b4, I3 = U4) {
    var _a;
    const R4 = g;
    w2 = et("msgHash", w2), b4 = et("publicKey", b4);
    const { lowS: x2, prehash: C5, format: P4 } = I3;
    if (Jr(I3), "strict" in I3) throw new Error("options.strict was renamed to lowS");
    if (P4 !== void 0 && P4 !== "compact" && P4 !== "der") throw new Error("format must be compact or der");
    const k5 = typeof R4 == "string" || St(R4), M4 = !k5 && !P4 && typeof R4 == "object" && R4 !== null && typeof R4.r == "bigint" && typeof R4.s == "bigint";
    if (!k5 && !M4) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let D2, z2;
    try {
      if (M4 && (D2 = new d3(R4.r, R4.s)), k5) {
        try {
          P4 !== "compact" && (D2 = d3.fromDER(R4));
        } catch (Ut3) {
          if (!(Ut3 instanceof lt.Err)) throw Ut3;
        }
        !D2 && P4 !== "der" && (D2 = d3.fromCompact(R4));
      }
      z2 = a2.fromHex(b4);
    } catch {
      return false;
    }
    if (!D2 || x2 && D2.hasHighS()) return false;
    C5 && (w2 = e2.hash(w2));
    const { r: Z2, s: st2 } = D2, W3 = B3(w2), J3 = c4(st2), Be4 = s2(W3 * J3), zt3 = s2(Z2 * J3), vt2 = (_a = a2.BASE.multiplyAndAddUnsafe(z2, Be4, zt3)) == null ? void 0 : _a.toAffine();
    return vt2 ? s2(vt2.x) === Z2 : false;
  }
  return { CURVE: e2, getPublicKey: m2, getSharedSecret: N3, sign: _, verify: j2, ProjectivePoint: a2, Signature: d3, utils: v4 };
}
function Nc(t2) {
  return { hash: t2, hmac: (e2, ...n2) => ye(t2, e2, Vi(...n2)), randomBytes: Lt };
}
function Uc(t2, e2) {
  const n2 = (r2) => Ic({ ...t2, ...Nc(r2) });
  return { ...n2(e2), create: n2 };
}
var to = Kr2(BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"));
var Tc = to.create(BigInt("-3"));
var Rc = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
var _c = Uc({ a: Tc, b: Rc, Fp: to, n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"), h: BigInt(1), lowS: false }, Qt);
var ln = "base10";
var G = "base16";
var qt = "base64pad";
var xe = "base64url";
var Kt = "utf8";
var dn = 0;
var Ft = 1;
var re = 2;
var $c = 0;
var eo = 1;
var oe = 12;
var hn = 32;
function Lc() {
  const t2 = fn.utils.randomPrivateKey(), e2 = fn.getPublicKey(t2);
  return { privateKey: toString(t2, G), publicKey: toString(e2, G) };
}
function jc() {
  const t2 = Lt(hn);
  return toString(t2, G);
}
function Cc(t2, e2) {
  const n2 = fn.getSharedSecret(fromString(t2, G), fromString(e2, G)), r2 = Vs(Qt, n2, void 0, void 0, hn);
  return toString(r2, G);
}
function Pc(t2) {
  const e2 = Qt(fromString(t2, G));
  return toString(e2, G);
}
function kc(t2) {
  const e2 = Qt(fromString(t2, Kt));
  return toString(e2, G);
}
function pn(t2) {
  return fromString(`${t2}`, ln);
}
function Bt(t2) {
  return Number(toString(t2, ln));
}
function no(t2) {
  return t2.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ro(t2) {
  const e2 = t2.replace(/-/g, "+").replace(/_/g, "/"), n2 = (4 - e2.length % 4) % 4;
  return e2 + "=".repeat(n2);
}
function Vc(t2) {
  const e2 = pn(typeof t2.type < "u" ? t2.type : dn);
  if (Bt(e2) === Ft && typeof t2.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n2 = typeof t2.senderPublicKey < "u" ? fromString(t2.senderPublicKey, G) : void 0, r2 = typeof t2.iv < "u" ? fromString(t2.iv, G) : Lt(oe), o2 = fromString(t2.symKey, G), i4 = $r(o2, r2).encrypt(fromString(t2.message, Kt)), s2 = gn({ type: e2, sealed: i4, iv: r2, senderPublicKey: n2 });
  return t2.encoding === xe ? no(s2) : s2;
}
function Mc(t2) {
  const e2 = fromString(t2.symKey, G), { sealed: n2, iv: r2 } = Se({ encoded: t2.encoded, encoding: t2.encoding }), o2 = $r(e2, r2).decrypt(n2);
  if (o2 === null) throw new Error("Failed to decrypt");
  return toString(o2, Kt);
}
function Dc(t2, e2) {
  const n2 = pn(re), r2 = Lt(oe), o2 = fromString(t2, Kt), i4 = gn({ type: n2, sealed: o2, iv: r2 });
  return e2 === xe ? no(i4) : i4;
}
function Hc(t2, e2) {
  const { sealed: n2 } = Se({ encoded: t2, encoding: e2 });
  return toString(n2, Kt);
}
function gn(t2) {
  if (Bt(t2.type) === re) return toString(concat([t2.type, t2.sealed]), qt);
  if (Bt(t2.type) === Ft) {
    if (typeof t2.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString(concat([t2.type, t2.senderPublicKey, t2.iv, t2.sealed]), qt);
  }
  return toString(concat([t2.type, t2.iv, t2.sealed]), qt);
}
function Se(t2) {
  const e2 = (t2.encoding || qt) === xe ? ro(t2.encoded) : t2.encoded, n2 = fromString(e2, qt), r2 = n2.slice($c, eo), o2 = eo;
  if (Bt(r2) === Ft) {
    const a2 = o2 + hn, u4 = a2 + oe, l4 = n2.slice(o2, a2), f7 = n2.slice(a2, u4), h5 = n2.slice(u4);
    return { type: r2, sealed: h5, iv: f7, senderPublicKey: l4 };
  }
  if (Bt(r2) === re) {
    const a2 = n2.slice(o2), u4 = Lt(oe);
    return { type: r2, sealed: a2, iv: u4 };
  }
  const i4 = o2 + oe, s2 = n2.slice(o2, i4), c4 = n2.slice(i4);
  return { type: r2, sealed: c4, iv: s2 };
}
function qc(t2, e2) {
  const n2 = Se({ encoded: t2, encoding: e2 == null ? void 0 : e2.encoding });
  return oo({ type: Bt(n2.type), senderPublicKey: typeof n2.senderPublicKey < "u" ? toString(n2.senderPublicKey, G) : void 0, receiverPublicKey: e2 == null ? void 0 : e2.receiverPublicKey });
}
function oo(t2) {
  const e2 = (t2 == null ? void 0 : t2.type) || dn;
  if (e2 === Ft) {
    if (typeof (t2 == null ? void 0 : t2.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (t2 == null ? void 0 : t2.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: e2, senderPublicKey: t2 == null ? void 0 : t2.senderPublicKey, receiverPublicKey: t2 == null ? void 0 : t2.receiverPublicKey };
}
function Kc(t2) {
  return t2.type === Ft && typeof t2.senderPublicKey == "string" && typeof t2.receiverPublicKey == "string";
}
function Fc(t2) {
  return t2.type === re;
}
function io(t2) {
  const e2 = Buffer.from(t2.x, "base64"), n2 = Buffer.from(t2.y, "base64");
  return concat([new Uint8Array([4]), e2, n2]);
}
function zc(t2, e2) {
  const [n2, r2, o2] = t2.split("."), i4 = Buffer.from(ro(o2), "base64");
  if (i4.length !== 64) throw new Error("Invalid signature length");
  const s2 = i4.slice(0, 32), c4 = i4.slice(32, 64), a2 = `${n2}.${r2}`, u4 = Qt(a2), l4 = io(e2);
  if (!_c.verify(concat([s2, c4]), u4, l4)) throw new Error("Invalid signature");
  return sn(t2).payload;
}
var so = "irn";
function Zc(t2) {
  return (t2 == null ? void 0 : t2.relay) || { protocol: so };
}
function Yc(t2) {
  const e2 = C[t2];
  if (typeof e2 > "u") throw new Error(`Relay Protocol not supported: ${t2}`);
  return e2;
}
function co(t2, e2 = "-") {
  const n2 = {}, r2 = "relay" + e2;
  return Object.keys(t2).forEach((o2) => {
    if (o2.startsWith(r2)) {
      const i4 = o2.replace(r2, ""), s2 = t2[o2];
      n2[i4] = s2;
    }
  }), n2;
}
function Gc(t2) {
  if (!t2.includes("wc:")) {
    const u4 = je(t2);
    u4 != null && u4.includes("wc:") && (t2 = u4);
  }
  t2 = t2.includes("wc://") ? t2.replace("wc://", "") : t2, t2 = t2.includes("wc:") ? t2.replace("wc:", "") : t2;
  const e2 = t2.indexOf(":"), n2 = t2.indexOf("?") !== -1 ? t2.indexOf("?") : void 0, r2 = t2.substring(0, e2), o2 = t2.substring(e2 + 1, n2).split("@"), i4 = typeof n2 < "u" ? t2.substring(n2) : "", s2 = new URLSearchParams(i4), c4 = {};
  s2.forEach((u4, l4) => {
    c4[l4] = u4;
  });
  const a2 = typeof c4.methods == "string" ? c4.methods.split(",") : void 0;
  return { protocol: r2, topic: ao(o2[0]), version: parseInt(o2[1], 10), symKey: c4.symKey, relay: co(c4), methods: a2, expiryTimestamp: c4.expiryTimestamp ? parseInt(c4.expiryTimestamp, 10) : void 0 };
}
function ao(t2) {
  return t2.startsWith("//") ? t2.substring(2) : t2;
}
function uo(t2, e2 = "-") {
  const n2 = "relay", r2 = {};
  return Object.keys(t2).forEach((o2) => {
    const i4 = o2, s2 = n2 + e2 + i4;
    t2[i4] && (r2[s2] = t2[i4]);
  }), r2;
}
function Wc(t2) {
  const e2 = new URLSearchParams(), n2 = uo(t2.relay);
  Object.keys(n2).sort().forEach((o2) => {
    e2.set(o2, n2[o2]);
  }), e2.set("symKey", t2.symKey), t2.expiryTimestamp && e2.set("expiryTimestamp", t2.expiryTimestamp.toString()), t2.methods && e2.set("methods", t2.methods.join(","));
  const r2 = e2.toString();
  return `${t2.protocol}:${t2.topic}@${t2.version}?${r2}`;
}
function Xc(t2, e2, n2) {
  return `${t2}?wc_ev=${n2}&topic=${e2}`;
}
var Jc = Object.defineProperty;
var Qc = Object.defineProperties;
var ta = Object.getOwnPropertyDescriptors;
var fo = Object.getOwnPropertySymbols;
var ea = Object.prototype.hasOwnProperty;
var na = Object.prototype.propertyIsEnumerable;
var lo = (t2, e2, n2) => e2 in t2 ? Jc(t2, e2, { enumerable: true, configurable: true, writable: true, value: n2 }) : t2[e2] = n2;
var ra = (t2, e2) => {
  for (var n2 in e2 || (e2 = {})) ea.call(e2, n2) && lo(t2, n2, e2[n2]);
  if (fo) for (var n2 of fo(e2)) na.call(e2, n2) && lo(t2, n2, e2[n2]);
  return t2;
};
var oa = (t2, e2) => Qc(t2, ta(e2));
function It(t2) {
  const e2 = [];
  return t2.forEach((n2) => {
    const [r2, o2] = n2.split(":");
    e2.push(`${r2}:${o2}`);
  }), e2;
}
function ho(t2) {
  const e2 = [];
  return Object.values(t2).forEach((n2) => {
    e2.push(...It(n2.accounts));
  }), e2;
}
function po(t2, e2) {
  const n2 = [];
  return Object.values(t2).forEach((r2) => {
    It(r2.accounts).includes(e2) && n2.push(...r2.methods);
  }), n2;
}
function go(t2, e2) {
  const n2 = [];
  return Object.values(t2).forEach((r2) => {
    It(r2.accounts).includes(e2) && n2.push(...r2.events);
  }), n2;
}
function yn(t2) {
  return t2.includes(":");
}
function yo(t2) {
  return yn(t2) ? t2.split(":")[0] : t2;
}
function ie(t2) {
  var e2, n2, r2;
  const o2 = {};
  if (!Oe(t2)) return o2;
  for (const [i4, s2] of Object.entries(t2)) {
    const c4 = yn(i4) ? [i4] : s2.chains, a2 = s2.methods || [], u4 = s2.events || [], l4 = yo(i4);
    o2[l4] = oa(ra({}, o2[l4]), { chains: ot(c4, (e2 = o2[l4]) == null ? void 0 : e2.chains), methods: ot(a2, (n2 = o2[l4]) == null ? void 0 : n2.methods), events: ot(u4, (r2 = o2[l4]) == null ? void 0 : r2.events) });
  }
  return o2;
}
function mo(t2) {
  const e2 = {};
  return t2 == null ? void 0 : t2.forEach((n2) => {
    var r2;
    const [o2, i4] = n2.split(":");
    e2[o2] || (e2[o2] = { accounts: [], chains: [], events: [], methods: [] }), e2[o2].accounts.push(n2), (r2 = e2[o2].chains) == null || r2.push(`${o2}:${i4}`);
  }), e2;
}
function ca(t2, e2) {
  e2 = e2.map((r2) => r2.replace("did:pkh:", ""));
  const n2 = mo(e2);
  for (const [r2, o2] of Object.entries(n2)) o2.methods ? o2.methods = ot(o2.methods, t2) : o2.methods = t2, o2.events = ["chainChanged", "accountsChanged"];
  return n2;
}
function aa(t2, e2) {
  var n2, r2, o2, i4, s2, c4;
  const a2 = ie(t2), u4 = ie(e2), l4 = {}, f7 = Object.keys(a2).concat(Object.keys(u4));
  for (const h5 of f7) l4[h5] = { chains: ot((n2 = a2[h5]) == null ? void 0 : n2.chains, (r2 = u4[h5]) == null ? void 0 : r2.chains), methods: ot((o2 = a2[h5]) == null ? void 0 : o2.methods, (i4 = u4[h5]) == null ? void 0 : i4.methods), events: ot((s2 = a2[h5]) == null ? void 0 : s2.events, (c4 = u4[h5]) == null ? void 0 : c4.events) };
  return l4;
}
var wo = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var bo = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function ht(t2, e2) {
  const { message: n2, code: r2 } = bo[t2];
  return { message: e2 ? `${n2} ${e2}` : n2, code: r2 };
}
function Nt(t2, e2) {
  const { message: n2, code: r2 } = wo[t2];
  return { message: e2 ? `${n2} ${e2}` : n2, code: r2 };
}
function se(t2, e2) {
  return Array.isArray(t2) ? typeof e2 < "u" && t2.length ? t2.every(e2) : true : false;
}
function Oe(t2) {
  return Object.getPrototypeOf(t2) === Object.prototype && Object.keys(t2).length;
}
function Et(t2) {
  return typeof t2 > "u";
}
function nt(t2, e2) {
  return e2 && Et(t2) ? true : typeof t2 == "string" && !!t2.trim().length;
}
function Ae(t2, e2) {
  return e2 && Et(t2) ? true : typeof t2 == "number" && !isNaN(t2);
}
function ua(t2, e2) {
  const { requiredNamespaces: n2 } = e2, r2 = Object.keys(t2.namespaces), o2 = Object.keys(n2);
  let i4 = true;
  return gt(o2, r2) ? (r2.forEach((s2) => {
    const { accounts: c4, methods: a2, events: u4 } = t2.namespaces[s2], l4 = It(c4), f7 = n2[s2];
    (!gt(ue(s2, f7), l4) || !gt(f7.methods, a2) || !gt(f7.events, u4)) && (i4 = false);
  }), i4) : false;
}
function ce(t2) {
  return nt(t2, false) && t2.includes(":") ? t2.split(":").length === 2 : false;
}
function Eo(t2) {
  if (nt(t2, false) && t2.includes(":")) {
    const e2 = t2.split(":");
    if (e2.length === 3) {
      const n2 = e2[0] + ":" + e2[1];
      return !!e2[2] && ce(n2);
    }
  }
  return false;
}
function fa(t2) {
  function e2(n2) {
    try {
      return typeof new URL(n2) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (nt(t2, false)) {
      if (e2(t2)) return true;
      const n2 = je(t2);
      return e2(n2);
    }
  } catch {
  }
  return false;
}
function la(t2) {
  var e2;
  return (e2 = t2 == null ? void 0 : t2.proposer) == null ? void 0 : e2.publicKey;
}
function da(t2) {
  return t2 == null ? void 0 : t2.topic;
}
function ha(t2, e2) {
  let n2 = null;
  return nt(t2 == null ? void 0 : t2.publicKey, false) || (n2 = ht("MISSING_OR_INVALID", `${e2} controller public key should be a string`)), n2;
}
function mn(t2) {
  let e2 = true;
  return se(t2) ? t2.length && (e2 = t2.every((n2) => nt(n2, false))) : e2 = false, e2;
}
function vo(t2, e2, n2) {
  let r2 = null;
  return se(e2) && e2.length ? e2.forEach((o2) => {
    r2 || ce(o2) || (r2 = Nt("UNSUPPORTED_CHAINS", `${n2}, chain ${o2} should be a string and conform to "namespace:chainId" format`));
  }) : ce(t2) || (r2 = Nt("UNSUPPORTED_CHAINS", `${n2}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r2;
}
function xo(t2, e2, n2) {
  let r2 = null;
  return Object.entries(t2).forEach(([o2, i4]) => {
    if (r2) return;
    const s2 = vo(o2, ue(o2, i4), `${e2} ${n2}`);
    s2 && (r2 = s2);
  }), r2;
}
function So(t2, e2) {
  let n2 = null;
  return se(t2) ? t2.forEach((r2) => {
    n2 || Eo(r2) || (n2 = Nt("UNSUPPORTED_ACCOUNTS", `${e2}, account ${r2} should be a string and conform to "namespace:chainId:address" format`));
  }) : n2 = Nt("UNSUPPORTED_ACCOUNTS", `${e2}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n2;
}
function Oo(t2, e2) {
  let n2 = null;
  return Object.values(t2).forEach((r2) => {
    if (n2) return;
    const o2 = So(r2 == null ? void 0 : r2.accounts, `${e2} namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function Ao(t2, e2) {
  let n2 = null;
  return mn(t2 == null ? void 0 : t2.methods) ? mn(t2 == null ? void 0 : t2.events) || (n2 = Nt("UNSUPPORTED_EVENTS", `${e2}, events should be an array of strings or empty array for no events`)) : n2 = Nt("UNSUPPORTED_METHODS", `${e2}, methods should be an array of strings or empty array for no methods`), n2;
}
function wn(t2, e2) {
  let n2 = null;
  return Object.values(t2).forEach((r2) => {
    if (n2) return;
    const o2 = Ao(r2, `${e2}, namespace`);
    o2 && (n2 = o2);
  }), n2;
}
function pa(t2, e2, n2) {
  let r2 = null;
  if (t2 && Oe(t2)) {
    const o2 = wn(t2, e2);
    o2 && (r2 = o2);
    const i4 = xo(t2, e2, n2);
    i4 && (r2 = i4);
  } else r2 = ht("MISSING_OR_INVALID", `${e2}, ${n2} should be an object with data`);
  return r2;
}
function Bo(t2, e2) {
  let n2 = null;
  if (t2 && Oe(t2)) {
    const r2 = wn(t2, e2);
    r2 && (n2 = r2);
    const o2 = Oo(t2, e2);
    o2 && (n2 = o2);
  } else n2 = ht("MISSING_OR_INVALID", `${e2}, namespaces should be an object with data`);
  return n2;
}
function Io(t2) {
  return nt(t2.protocol, true);
}
function ga(t2, e2) {
  let n2 = false;
  return e2 && !t2 ? n2 = true : t2 && se(t2) && t2.length && t2.forEach((r2) => {
    n2 = Io(r2);
  }), n2;
}
function ya(t2) {
  return typeof t2 == "number";
}
function ma(t2) {
  return typeof t2 < "u" && typeof t2 !== null;
}
function wa(t2) {
  return !(!t2 || typeof t2 != "object" || !t2.code || !Ae(t2.code, false) || !t2.message || !nt(t2.message, false));
}
function ba(t2) {
  return !(Et(t2) || !nt(t2.method, false));
}
function Ea(t2) {
  return !(Et(t2) || Et(t2.result) && Et(t2.error) || !Ae(t2.id, false) || !nt(t2.jsonrpc, false));
}
function va(t2) {
  return !(Et(t2) || !nt(t2.name, false));
}
function xa(t2, e2) {
  return !(!ce(e2) || !ho(t2).includes(e2));
}
function Sa(t2, e2, n2) {
  return nt(n2, false) ? po(t2, e2).includes(n2) : false;
}
function Oa(t2, e2, n2) {
  return nt(n2, false) ? go(t2, e2).includes(n2) : false;
}
function No(t2, e2, n2) {
  let r2 = null;
  const o2 = Aa(t2), i4 = Ba(e2), s2 = Object.keys(o2), c4 = Object.keys(i4), a2 = Uo(Object.keys(t2)), u4 = Uo(Object.keys(e2)), l4 = a2.filter((f7) => !u4.includes(f7));
  return l4.length && (r2 = ht("NON_CONFORMING_NAMESPACES", `${n2} namespaces keys don't satisfy requiredNamespaces.
      Required: ${l4.toString()}
      Received: ${Object.keys(e2).toString()}`)), gt(s2, c4) || (r2 = ht("NON_CONFORMING_NAMESPACES", `${n2} namespaces chains don't satisfy required namespaces.
      Required: ${s2.toString()}
      Approved: ${c4.toString()}`)), Object.keys(e2).forEach((f7) => {
    if (!f7.includes(":") || r2) return;
    const h5 = It(e2[f7].accounts);
    h5.includes(f7) || (r2 = ht("NON_CONFORMING_NAMESPACES", `${n2} namespaces accounts don't satisfy namespace accounts for ${f7}
        Required: ${f7}
        Approved: ${h5.toString()}`));
  }), s2.forEach((f7) => {
    r2 || (gt(o2[f7].methods, i4[f7].methods) ? gt(o2[f7].events, i4[f7].events) || (r2 = ht("NON_CONFORMING_NAMESPACES", `${n2} namespaces events don't satisfy namespace events for ${f7}`)) : r2 = ht("NON_CONFORMING_NAMESPACES", `${n2} namespaces methods don't satisfy namespace methods for ${f7}`));
  }), r2;
}
function Aa(t2) {
  const e2 = {};
  return Object.keys(t2).forEach((n2) => {
    var r2;
    n2.includes(":") ? e2[n2] = t2[n2] : (r2 = t2[n2].chains) == null || r2.forEach((o2) => {
      e2[o2] = { methods: t2[n2].methods, events: t2[n2].events };
    });
  }), e2;
}
function Uo(t2) {
  return [...new Set(t2.map((e2) => e2.includes(":") ? e2.split(":")[0] : e2))];
}
function Ba(t2) {
  const e2 = {};
  return Object.keys(t2).forEach((n2) => {
    if (n2.includes(":")) e2[n2] = t2[n2];
    else {
      const r2 = It(t2[n2].accounts);
      r2 == null ? void 0 : r2.forEach((o2) => {
        e2[o2] = { accounts: t2[n2].accounts.filter((i4) => i4.includes(`${o2}:`)), methods: t2[n2].methods, events: t2[n2].events };
      });
    }
  }), e2;
}
function Ia(t2, e2) {
  return Ae(t2, false) && t2 <= e2.max && t2 >= e2.min;
}
function Na() {
  const t2 = xt();
  return new Promise((e2) => {
    switch (t2) {
      case Y.browser:
        e2(To());
        break;
      case Y.reactNative:
        e2(Ro());
        break;
      case Y.node:
        e2(_o());
        break;
      default:
        e2(true);
    }
  });
}
function To() {
  return Tt() && (navigator == null ? void 0 : navigator.onLine);
}
async function Ro() {
  if (pt() && typeof global < "u" && global != null && global.NetInfo) {
    const t2 = await (global == null ? void 0 : global.NetInfo.fetch());
    return t2 == null ? void 0 : t2.isConnected;
  }
  return true;
}
function _o() {
  return true;
}
function Ua(t2) {
  switch (xt()) {
    case Y.browser:
      $o(t2);
      break;
    case Y.reactNative:
      Lo(t2);
      break;
    case Y.node:
      break;
  }
}
function $o(t2) {
  !pt() && Tt() && (window.addEventListener("online", () => t2(true)), window.addEventListener("offline", () => t2(false)));
}
function Lo(t2) {
  pt() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e2) => t2(e2 == null ? void 0 : e2.isConnected)));
}
function Ta() {
  var t2;
  return Tt() && (0, import_window_getters.getDocument)() ? ((t2 = (0, import_window_getters.getDocument)()) == null ? void 0 : t2.visibilityState) === "visible" : true;
}
var bn = {};
var Ra = class {
  static get(e2) {
    return bn[e2];
  }
  static set(e2, n2) {
    bn[e2] = n2;
  }
  static delete(e2) {
    delete bn[e2];
  }
};

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/core/dist/index.es.js
var import_window_getters2 = __toESM(require_cjs2());
var ze2 = "wc";
var Le = 2;
var he2 = "core";
var B = `${ze2}@2:${he2}:`;
var Et2 = { name: he2, logger: "error" };
var It2 = { database: ":memory:" };
var Tt2 = "crypto";
var ke2 = "client_ed25519_seed";
var Ct2 = import_time2.ONE_DAY;
var Pt2 = "keychain";
var St2 = "0.3";
var Ot2 = "messages";
var Rt2 = "0.3";
var je2 = import_time2.SIX_HOURS;
var At2 = "publisher";
var xt2 = "irn";
var Nt2 = "error";
var Ue = "wss://relay.walletconnect.org";
var $t2 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt = "_subscription";
var L = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt2 = 0.1;
var _e2 = "2.21.0";
var Q = { link_mode: "link_mode", relay: "relay" };
var le2 = { inbound: "inbound", outbound: "outbound" };
var kt2 = "0.3";
var jt2 = "WALLETCONNECT_CLIENT_ID";
var Fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut = "subscription";
var Ft2 = "0.3";
var Ys2 = import_time2.FIVE_SECONDS * 1e3;
var Mt2 = "pairing";
var Kt2 = "0.3";
var se2 = { wc_pairingDelete: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 } } };
var re2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt2 = "history";
var Vt2 = "0.3";
var qt2 = "expirer";
var M2 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt = "0.3";
var Wt2 = "verify-api";
var Zs2 = "https://verify.walletconnect.com";
var Ht2 = "https://verify.walletconnect.org";
var ue2 = Ht2;
var Yt2 = `${ue2}/v3`;
var Jt2 = [Zs2, Ht2];
var Xt2 = "echo";
var Zt = "https://echo.walletconnect.com";
var G2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var er2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var tr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var ir2 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var sr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt2 = 0.1;
var ei2 = "event-client";
var ti = 86400;
var ii = "https://pulse.walletconnect.org/batch";
function rr2(r2, e2) {
  if (r2.length >= 255) throw new TypeError("Alphabet too long");
  for (var t2 = new Uint8Array(256), i4 = 0; i4 < t2.length; i4++) t2[i4] = 255;
  for (var s2 = 0; s2 < r2.length; s2++) {
    var n2 = r2.charAt(s2), o2 = n2.charCodeAt(0);
    if (t2[o2] !== 255) throw new TypeError(n2 + " is ambiguous");
    t2[o2] = s2;
  }
  var a2 = r2.length, c4 = r2.charAt(0), h5 = Math.log(a2) / Math.log(256), l4 = Math.log(256) / Math.log(a2);
  function d3(u4) {
    if (u4 instanceof Uint8Array || (ArrayBuffer.isView(u4) ? u4 = new Uint8Array(u4.buffer, u4.byteOffset, u4.byteLength) : Array.isArray(u4) && (u4 = Uint8Array.from(u4))), !(u4 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u4.length === 0) return "";
    for (var b4 = 0, x2 = 0, I3 = 0, D2 = u4.length; I3 !== D2 && u4[I3] === 0; ) I3++, b4++;
    for (var j2 = (D2 - I3) * l4 + 1 >>> 0, T2 = new Uint8Array(j2); I3 !== D2; ) {
      for (var q3 = u4[I3], J3 = 0, K4 = j2 - 1; (q3 !== 0 || J3 < x2) && K4 !== -1; K4--, J3++) q3 += 256 * T2[K4] >>> 0, T2[K4] = q3 % a2 >>> 0, q3 = q3 / a2 >>> 0;
      if (q3 !== 0) throw new Error("Non-zero carry");
      x2 = J3, I3++;
    }
    for (var H3 = j2 - x2; H3 !== j2 && T2[H3] === 0; ) H3++;
    for (var me4 = c4.repeat(b4); H3 < j2; ++H3) me4 += r2.charAt(T2[H3]);
    return me4;
  }
  function g(u4) {
    if (typeof u4 != "string") throw new TypeError("Expected String");
    if (u4.length === 0) return new Uint8Array();
    var b4 = 0;
    if (u4[b4] !== " ") {
      for (var x2 = 0, I3 = 0; u4[b4] === c4; ) x2++, b4++;
      for (var D2 = (u4.length - b4) * h5 + 1 >>> 0, j2 = new Uint8Array(D2); u4[b4]; ) {
        var T2 = t2[u4.charCodeAt(b4)];
        if (T2 === 255) return;
        for (var q3 = 0, J3 = D2 - 1; (T2 !== 0 || q3 < I3) && J3 !== -1; J3--, q3++) T2 += a2 * j2[J3] >>> 0, j2[J3] = T2 % 256 >>> 0, T2 = T2 / 256 >>> 0;
        if (T2 !== 0) throw new Error("Non-zero carry");
        I3 = q3, b4++;
      }
      if (u4[b4] !== " ") {
        for (var K4 = D2 - I3; K4 !== D2 && j2[K4] === 0; ) K4++;
        for (var H3 = new Uint8Array(x2 + (D2 - K4)), me4 = x2; K4 !== D2; ) H3[me4++] = j2[K4++];
        return H3;
      }
    }
  }
  function _(u4) {
    var b4 = g(u4);
    if (b4) return b4;
    throw new Error(`Non-${e2} character`);
  }
  return { encode: d3, decodeUnsafe: g, decode: _ };
}
var nr2 = rr2;
var or2 = nr2;
var si2 = (r2) => {
  if (r2 instanceof Uint8Array && r2.constructor.name === "Uint8Array") return r2;
  if (r2 instanceof ArrayBuffer) return new Uint8Array(r2);
  if (ArrayBuffer.isView(r2)) return new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ar2 = (r2) => new TextEncoder().encode(r2);
var cr2 = (r2) => new TextDecoder().decode(r2);
var hr2 = class {
  constructor(e2, t2, i4) {
    this.name = e2, this.prefix = t2, this.baseEncode = i4;
  }
  encode(e2) {
    if (e2 instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e2)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var lr2 = class {
  constructor(e2, t2, i4) {
    if (this.name = e2, this.prefix = t2, t2.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t2.codePointAt(0), this.baseDecode = i4;
  }
  decode(e2) {
    if (typeof e2 == "string") {
      if (e2.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e2)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e2.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e2) {
    return ri2(this, e2);
  }
};
var ur2 = class {
  constructor(e2) {
    this.decoders = e2;
  }
  or(e2) {
    return ri2(this, e2);
  }
  decode(e2) {
    const t2 = e2[0], i4 = this.decoders[t2];
    if (i4) return i4.decode(e2);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e2)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r2, e2) => new ur2({ ...r2.decoders || { [r2.prefix]: r2 }, ...e2.decoders || { [e2.prefix]: e2 } });
var dr2 = class {
  constructor(e2, t2, i4, s2) {
    this.name = e2, this.prefix = t2, this.baseEncode = i4, this.baseDecode = s2, this.encoder = new hr2(e2, t2, i4), this.decoder = new lr2(e2, t2, s2);
  }
  encode(e2) {
    return this.encoder.encode(e2);
  }
  decode(e2) {
    return this.decoder.decode(e2);
  }
};
var Ee2 = ({ name: r2, prefix: e2, encode: t2, decode: i4 }) => new dr2(r2, e2, t2, i4);
var de2 = ({ prefix: r2, name: e2, alphabet: t2 }) => {
  const { encode: i4, decode: s2 } = or2(t2, e2);
  return Ee2({ prefix: r2, name: e2, encode: i4, decode: (n2) => si2(s2(n2)) });
};
var gr = (r2, e2, t2, i4) => {
  const s2 = {};
  for (let l4 = 0; l4 < e2.length; ++l4) s2[e2[l4]] = l4;
  let n2 = r2.length;
  for (; r2[n2 - 1] === "="; ) --n2;
  const o2 = new Uint8Array(n2 * t2 / 8 | 0);
  let a2 = 0, c4 = 0, h5 = 0;
  for (let l4 = 0; l4 < n2; ++l4) {
    const d3 = s2[r2[l4]];
    if (d3 === void 0) throw new SyntaxError(`Non-${i4} character`);
    c4 = c4 << t2 | d3, a2 += t2, a2 >= 8 && (a2 -= 8, o2[h5++] = 255 & c4 >> a2);
  }
  if (a2 >= t2 || 255 & c4 << 8 - a2) throw new SyntaxError("Unexpected end of data");
  return o2;
};
var pr = (r2, e2, t2) => {
  const i4 = e2[e2.length - 1] === "=", s2 = (1 << t2) - 1;
  let n2 = "", o2 = 0, a2 = 0;
  for (let c4 = 0; c4 < r2.length; ++c4) for (a2 = a2 << 8 | r2[c4], o2 += 8; o2 > t2; ) o2 -= t2, n2 += e2[s2 & a2 >> o2];
  if (o2 && (n2 += e2[s2 & a2 << t2 - o2]), i4) for (; n2.length * t2 & 7; ) n2 += "=";
  return n2;
};
var P3 = ({ name: r2, prefix: e2, bitsPerChar: t2, alphabet: i4 }) => Ee2({ prefix: e2, name: r2, encode(s2) {
  return pr(s2, i4, t2);
}, decode(s2) {
  return gr(s2, i4, t2, r2);
} });
var yr = Ee2({ prefix: "\0", name: "identity", encode: (r2) => cr2(r2), decode: (r2) => ar2(r2) });
var br2 = Object.freeze({ __proto__: null, identity: yr });
var mr2 = P3({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var fr2 = Object.freeze({ __proto__: null, base2: mr2 });
var Dr2 = P3({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var vr2 = Object.freeze({ __proto__: null, base8: Dr2 });
var wr2 = de2({ prefix: "9", name: "base10", alphabet: "0123456789" });
var _r2 = Object.freeze({ __proto__: null, base10: wr2 });
var Er = P3({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Ir2 = P3({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Tr2 = Object.freeze({ __proto__: null, base16: Er, base16upper: Ir2 });
var Cr2 = P3({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr2 = P3({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Sr2 = P3({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Or2 = P3({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Rr2 = P3({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var Ar2 = P3({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var xr = P3({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var Nr2 = P3({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var $r2 = P3({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var zr2 = Object.freeze({ __proto__: null, base32: Cr2, base32upper: Pr2, base32pad: Sr2, base32padupper: Or2, base32hex: Rr2, base32hexupper: Ar2, base32hexpad: xr, base32hexpadupper: Nr2, base32z: $r2 });
var Lr2 = de2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var kr2 = de2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var jr2 = Object.freeze({ __proto__: null, base36: Lr2, base36upper: kr2 });
var Ur2 = de2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Fr2 = de2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Mr2 = Object.freeze({ __proto__: null, base58btc: Ur2, base58flickr: Fr2 });
var Kr3 = P3({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Br2 = P3({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Vr2 = P3({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var qr2 = P3({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Gr2 = Object.freeze({ __proto__: null, base64: Kr3, base64pad: Br2, base64url: Vr2, base64urlpad: qr2 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Wr2 = ni2.reduce((r2, e2, t2) => (r2[t2] = e2, r2), []);
var Hr2 = ni2.reduce((r2, e2, t2) => (r2[e2.codePointAt(0)] = t2, r2), []);
function Yr2(r2) {
  return r2.reduce((e2, t2) => (e2 += Wr2[t2], e2), "");
}
function Jr2(r2) {
  const e2 = [];
  for (const t2 of r2) {
    const i4 = Hr2[t2.codePointAt(0)];
    if (i4 === void 0) throw new Error(`Non-base256emoji character: ${t2}`);
    e2.push(i4);
  }
  return new Uint8Array(e2);
}
var Xr2 = Ee2({ prefix: "🚀", name: "base256emoji", encode: Yr2, decode: Jr2 });
var Zr2 = Object.freeze({ __proto__: null, base256emoji: Xr2 });
var Qr2 = ai;
var oi2 = 128;
var en2 = 127;
var tn2 = ~en2;
var sn3 = Math.pow(2, 31);
function ai(r2, e2, t2) {
  e2 = e2 || [], t2 = t2 || 0;
  for (var i4 = t2; r2 >= sn3; ) e2[t2++] = r2 & 255 | oi2, r2 /= 128;
  for (; r2 & tn2; ) e2[t2++] = r2 & 255 | oi2, r2 >>>= 7;
  return e2[t2] = r2 | 0, ai.bytes = t2 - i4 + 1, e2;
}
var rn2 = Me2;
var nn2 = 128;
var ci = 127;
function Me2(r2, i4) {
  var t2 = 0, i4 = i4 || 0, s2 = 0, n2 = i4, o2, a2 = r2.length;
  do {
    if (n2 >= a2) throw Me2.bytes = 0, new RangeError("Could not decode varint");
    o2 = r2[n2++], t2 += s2 < 28 ? (o2 & ci) << s2 : (o2 & ci) * Math.pow(2, s2), s2 += 7;
  } while (o2 >= nn2);
  return Me2.bytes = n2 - i4, t2;
}
var on2 = Math.pow(2, 7);
var an2 = Math.pow(2, 14);
var cn2 = Math.pow(2, 21);
var hn2 = Math.pow(2, 28);
var ln2 = Math.pow(2, 35);
var un2 = Math.pow(2, 42);
var dn2 = Math.pow(2, 49);
var gn2 = Math.pow(2, 56);
var pn2 = Math.pow(2, 63);
var yn2 = function(r2) {
  return r2 < on2 ? 1 : r2 < an2 ? 2 : r2 < cn2 ? 3 : r2 < hn2 ? 4 : r2 < ln2 ? 5 : r2 < un2 ? 6 : r2 < dn2 ? 7 : r2 < gn2 ? 8 : r2 < pn2 ? 9 : 10;
};
var bn2 = { encode: Qr2, decode: rn2, encodingLength: yn2 };
var hi = bn2;
var li2 = (r2, e2, t2 = 0) => (hi.encode(r2, e2, t2), e2);
var ui = (r2) => hi.encodingLength(r2);
var Ke2 = (r2, e2) => {
  const t2 = e2.byteLength, i4 = ui(r2), s2 = i4 + ui(t2), n2 = new Uint8Array(s2 + t2);
  return li2(r2, n2, 0), li2(t2, n2, i4), n2.set(e2, s2), new mn2(r2, t2, e2, n2);
};
var mn2 = class {
  constructor(e2, t2, i4, s2) {
    this.code = e2, this.size = t2, this.digest = i4, this.bytes = s2;
  }
};
var di = ({ name: r2, code: e2, encode: t2 }) => new fn2(r2, e2, t2);
var fn2 = class {
  constructor(e2, t2, i4) {
    this.name = e2, this.code = t2, this.encode = i4;
  }
  digest(e2) {
    if (e2 instanceof Uint8Array) {
      const t2 = this.encode(e2);
      return t2 instanceof Uint8Array ? Ke2(this.code, t2) : t2.then((i4) => Ke2(this.code, i4));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r2) => async (e2) => new Uint8Array(await crypto.subtle.digest(r2, e2));
var Dn = di({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var vn = di({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var wn2 = Object.freeze({ __proto__: null, sha256: Dn, sha512: vn });
var pi = 0;
var _n2 = "identity";
var yi2 = si2;
var En2 = (r2) => Ke2(pi, yi2(r2));
var In = { code: pi, name: _n2, encode: yi2, digest: En2 };
var Tn2 = Object.freeze({ __proto__: null, identity: In });
new TextEncoder(), new TextDecoder();
var bi2 = { ...br2, ...fr2, ...vr2, ..._r2, ...Tr2, ...zr2, ...jr2, ...Mr2, ...Gr2, ...Zr2 };
({ ...wn2, ...Tn2 });
function Cn2(r2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r2) : new Uint8Array(r2);
}
function mi2(r2, e2, t2, i4) {
  return { name: r2, prefix: e2, encoder: { name: r2, prefix: e2, encode: t2 }, decoder: { decode: i4 } };
}
var fi2 = mi2("utf8", "u", (r2) => "u" + new TextDecoder("utf8").decode(r2), (r2) => new TextEncoder().encode(r2.substring(1)));
var Be = mi2("ascii", "a", (r2) => {
  let e2 = "a";
  for (let t2 = 0; t2 < r2.length; t2++) e2 += String.fromCharCode(r2[t2]);
  return e2;
}, (r2) => {
  r2 = r2.substring(1);
  const e2 = Cn2(r2.length);
  for (let t2 = 0; t2 < r2.length; t2++) e2[t2] = r2.charCodeAt(t2);
  return e2;
});
var Pn2 = { utf8: fi2, "utf-8": fi2, hex: bi2.base16, latin1: Be, ascii: Be, binary: Be, ...bi2 };
function Sn2(r2, e2 = "utf8") {
  const t2 = Pn2[e2];
  if (!t2) throw new Error(`Unsupported encoding "${e2}"`);
  return (e2 === "utf8" || e2 === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r2, "utf8") : t2.decoder.decode(`${t2.prefix}${r2}`);
}
var On2 = Object.defineProperty;
var Rn2 = (r2, e2, t2) => e2 in r2 ? On2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var W = (r2, e2, t2) => Rn2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Di2 = class {
  constructor(e2, t2) {
    this.core = e2, this.logger = t2, W(this, "keychain", /* @__PURE__ */ new Map()), W(this, "name", Pt2), W(this, "version", St2), W(this, "initialized", false), W(this, "storagePrefix", B), W(this, "init", async () => {
      if (!this.initialized) {
        const i4 = await this.getKeyChain();
        typeof i4 < "u" && (this.keychain = i4), this.initialized = true;
      }
    }), W(this, "has", (i4) => (this.isInitialized(), this.keychain.has(i4))), W(this, "set", async (i4, s2) => {
      this.isInitialized(), this.keychain.set(i4, s2), await this.persist();
    }), W(this, "get", (i4) => {
      this.isInitialized();
      const s2 = this.keychain.get(i4);
      if (typeof s2 > "u") {
        const { message: n2 } = ht("NO_MATCHING_KEY", `${this.name}: ${i4}`);
        throw new Error(n2);
      }
      return s2;
    }), W(this, "del", async (i4) => {
      this.isInitialized(), this.keychain.delete(i4), await this.persist();
    }), this.core = e2, this.logger = E(t2, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e2) {
    await this.core.storage.setItem(this.storageKey, fi(e2));
  }
  async getKeyChain() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? li(e2) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var An = Object.defineProperty;
var xn2 = (r2, e2, t2) => e2 in r2 ? An(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var S2 = (r2, e2, t2) => xn2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var vi2 = class {
  constructor(e2, t2, i4) {
    this.core = e2, this.logger = t2, S2(this, "name", Tt2), S2(this, "keychain"), S2(this, "randomSessionIdentifier", jc()), S2(this, "initialized", false), S2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S2(this, "hasKeys", (s2) => (this.isInitialized(), this.keychain.has(s2))), S2(this, "getClientId", async () => {
      this.isInitialized();
      const s2 = await this.getClientSeed(), n2 = Po(s2);
      return Qe(n2.publicKey);
    }), S2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s2 = Lc();
      return this.setPrivateKey(s2.publicKey, s2.privateKey);
    }), S2(this, "signJWT", async (s2) => {
      this.isInitialized();
      const n2 = await this.getClientSeed(), o2 = Po(n2), a2 = this.randomSessionIdentifier, c4 = Ct2;
      return await Qo(a2, s2, c4, o2);
    }), S2(this, "generateSharedKey", (s2, n2, o2) => {
      this.isInitialized();
      const a2 = this.getPrivateKey(s2), c4 = Cc(a2, n2);
      return this.setSymKey(c4, o2);
    }), S2(this, "setSymKey", async (s2, n2) => {
      this.isInitialized();
      const o2 = n2 || Pc(s2);
      return await this.keychain.set(o2, s2), o2;
    }), S2(this, "deleteKeyPair", async (s2) => {
      this.isInitialized(), await this.keychain.del(s2);
    }), S2(this, "deleteSymKey", async (s2) => {
      this.isInitialized(), await this.keychain.del(s2);
    }), S2(this, "encode", async (s2, n2, o2) => {
      this.isInitialized();
      const a2 = oo(o2), c4 = safeJsonStringify(n2);
      if (Fc(a2)) return Dc(c4, o2 == null ? void 0 : o2.encoding);
      if (Kc(a2)) {
        const g = a2.senderPublicKey, _ = a2.receiverPublicKey;
        s2 = await this.generateSharedKey(g, _);
      }
      const h5 = this.getSymKey(s2), { type: l4, senderPublicKey: d3 } = a2;
      return Vc({ type: l4, symKey: h5, message: c4, senderPublicKey: d3, encoding: o2 == null ? void 0 : o2.encoding });
    }), S2(this, "decode", async (s2, n2, o2) => {
      this.isInitialized();
      const a2 = qc(n2, o2);
      if (Fc(a2)) {
        const c4 = Hc(n2, o2 == null ? void 0 : o2.encoding);
        return safeJsonParse(c4);
      }
      if (Kc(a2)) {
        const c4 = a2.receiverPublicKey, h5 = a2.senderPublicKey;
        s2 = await this.generateSharedKey(c4, h5);
      }
      try {
        const c4 = this.getSymKey(s2), h5 = Mc({ symKey: c4, encoded: n2, encoding: o2 == null ? void 0 : o2.encoding });
        return safeJsonParse(h5);
      } catch (c4) {
        this.logger.error(`Failed to decode message from topic: '${s2}', clientId: '${await this.getClientId()}'`), this.logger.error(c4);
      }
    }), S2(this, "getPayloadType", (s2, n2 = qt) => {
      const o2 = Se({ encoded: s2, encoding: n2 });
      return Bt(o2.type);
    }), S2(this, "getPayloadSenderPublicKey", (s2, n2 = qt) => {
      const o2 = Se({ encoded: s2, encoding: n2 });
      return o2.senderPublicKey ? toString(o2.senderPublicKey, G) : void 0;
    }), this.core = e2, this.logger = E(t2, this.name), this.keychain = i4 || new Di2(this.core, this.logger);
  }
  get context() {
    return y(this.logger);
  }
  async setPrivateKey(e2, t2) {
    return await this.keychain.set(e2, t2), e2;
  }
  getPrivateKey(e2) {
    return this.keychain.get(e2);
  }
  async getClientSeed() {
    let e2 = "";
    try {
      e2 = this.keychain.get(ke2);
    } catch {
      e2 = jc(), await this.keychain.set(ke2, e2);
    }
    return Sn2(e2, "base16");
  }
  getSymKey(e2) {
    return this.keychain.get(e2);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Nn = Object.defineProperty;
var $n2 = Object.defineProperties;
var zn2 = Object.getOwnPropertyDescriptors;
var wi2 = Object.getOwnPropertySymbols;
var Ln = Object.prototype.hasOwnProperty;
var kn2 = Object.prototype.propertyIsEnumerable;
var Ve2 = (r2, e2, t2) => e2 in r2 ? Nn(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var jn2 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) Ln.call(e2, t2) && Ve2(r2, t2, e2[t2]);
  if (wi2) for (var t2 of wi2(e2)) kn2.call(e2, t2) && Ve2(r2, t2, e2[t2]);
  return r2;
};
var Un = (r2, e2) => $n2(r2, zn2(e2));
var k3 = (r2, e2, t2) => Ve2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var _i2 = class extends y3 {
  constructor(e2, t2) {
    super(e2, t2), this.logger = e2, this.core = t2, k3(this, "messages", /* @__PURE__ */ new Map()), k3(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k3(this, "name", Ot2), k3(this, "version", Rt2), k3(this, "initialized", false), k3(this, "storagePrefix", B), k3(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i4 = await this.getRelayerMessages();
          typeof i4 < "u" && (this.messages = i4);
          const s2 = await this.getRelayerMessagesWithoutClientAck();
          typeof s2 < "u" && (this.messagesWithoutClientAck = s2), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i4) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i4);
        } finally {
          this.initialized = true;
        }
      }
    }), k3(this, "set", async (i4, s2, n2) => {
      this.isInitialized();
      const o2 = kc(s2);
      let a2 = this.messages.get(i4);
      if (typeof a2 > "u" && (a2 = {}), typeof a2[o2] < "u") return o2;
      if (a2[o2] = s2, this.messages.set(i4, a2), n2 === le2.inbound) {
        const c4 = this.messagesWithoutClientAck.get(i4) || {};
        this.messagesWithoutClientAck.set(i4, Un(jn2({}, c4), { [o2]: s2 }));
      }
      return await this.persist(), o2;
    }), k3(this, "get", (i4) => {
      this.isInitialized();
      let s2 = this.messages.get(i4);
      return typeof s2 > "u" && (s2 = {}), s2;
    }), k3(this, "getWithoutAck", (i4) => {
      this.isInitialized();
      const s2 = {};
      for (const n2 of i4) {
        const o2 = this.messagesWithoutClientAck.get(n2) || {};
        s2[n2] = Object.values(o2);
      }
      return s2;
    }), k3(this, "has", (i4, s2) => {
      this.isInitialized();
      const n2 = this.get(i4), o2 = kc(s2);
      return typeof n2[o2] < "u";
    }), k3(this, "ack", async (i4, s2) => {
      this.isInitialized();
      const n2 = this.messagesWithoutClientAck.get(i4);
      if (typeof n2 > "u") return;
      const o2 = kc(s2);
      delete n2[o2], Object.keys(n2).length === 0 ? this.messagesWithoutClientAck.delete(i4) : this.messagesWithoutClientAck.set(i4, n2), await this.persist();
    }), k3(this, "del", async (i4) => {
      this.isInitialized(), this.messages.delete(i4), this.messagesWithoutClientAck.delete(i4), await this.persist();
    }), this.logger = E(e2, this.name), this.core = t2;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e2) {
    await this.core.storage.setItem(this.storageKey, fi(e2));
  }
  async setRelayerMessagesWithoutClientAck(e2) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, fi(e2));
  }
  async getRelayerMessages() {
    const e2 = await this.core.storage.getItem(this.storageKey);
    return typeof e2 < "u" ? li(e2) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e2 = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e2 < "u" ? li(e2) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Fn2 = Object.defineProperty;
var Mn2 = Object.defineProperties;
var Kn2 = Object.getOwnPropertyDescriptors;
var Ei2 = Object.getOwnPropertySymbols;
var Bn = Object.prototype.hasOwnProperty;
var Vn2 = Object.prototype.propertyIsEnumerable;
var qe2 = (r2, e2, t2) => e2 in r2 ? Fn2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var Ie2 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) Bn.call(e2, t2) && qe2(r2, t2, e2[t2]);
  if (Ei2) for (var t2 of Ei2(e2)) Vn2.call(e2, t2) && qe2(r2, t2, e2[t2]);
  return r2;
};
var Ge2 = (r2, e2) => Mn2(r2, Kn2(e2));
var V3 = (r2, e2, t2) => qe2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var qn = class extends m {
  constructor(e2, t2) {
    super(e2, t2), this.relayer = e2, this.logger = t2, V3(this, "events", new import_events3.EventEmitter()), V3(this, "name", At2), V3(this, "queue", /* @__PURE__ */ new Map()), V3(this, "publishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), V3(this, "initialPublishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), V3(this, "needsTransportRestart", false), V3(this, "publish", async (i4, s2, n2) => {
      var o2;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i4, message: s2, opts: n2 } });
      const a2 = (n2 == null ? void 0 : n2.ttl) || je2, c4 = Zc(n2), h5 = (n2 == null ? void 0 : n2.prompt) || false, l4 = (n2 == null ? void 0 : n2.tag) || 0, d3 = (n2 == null ? void 0 : n2.id) || getBigIntRpcId().toString(), g = { topic: i4, message: s2, opts: { ttl: a2, relay: c4, prompt: h5, tag: l4, id: d3, attestation: n2 == null ? void 0 : n2.attestation, tvf: n2 == null ? void 0 : n2.tvf } }, _ = `Failed to publish payload, please try again. id:${d3} tag:${l4}`;
      try {
        const u4 = new Promise(async (b4) => {
          const x2 = ({ id: D2 }) => {
            g.opts.id === D2 && (this.removeRequestFromQueue(D2), this.relayer.events.removeListener(C2.publish, x2), b4(g));
          };
          this.relayer.events.on(C2.publish, x2);
          const I3 = yi(new Promise((D2, j2) => {
            this.rpcPublish({ topic: i4, message: s2, ttl: a2, prompt: h5, tag: l4, id: d3, attestation: n2 == null ? void 0 : n2.attestation, tvf: n2 == null ? void 0 : n2.tvf }).then(D2).catch((T2) => {
              this.logger.warn(T2, T2 == null ? void 0 : T2.message), j2(T2);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d3} tag:${l4}`);
          try {
            await I3, this.events.removeListener(C2.publish, x2);
          } catch (D2) {
            this.queue.set(d3, Ge2(Ie2({}, g), { attempt: 1 })), this.logger.warn(D2, D2 == null ? void 0 : D2.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d3, topic: i4, message: s2, opts: n2 } }), await yi(u4, this.publishTimeout, _);
      } catch (u4) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(u4), (o2 = n2 == null ? void 0 : n2.internal) != null && o2.throwOnFailedPublish) throw u4;
      } finally {
        this.queue.delete(d3);
      }
    }), V3(this, "on", (i4, s2) => {
      this.events.on(i4, s2);
    }), V3(this, "once", (i4, s2) => {
      this.events.once(i4, s2);
    }), V3(this, "off", (i4, s2) => {
      this.events.off(i4, s2);
    }), V3(this, "removeListener", (i4, s2) => {
      this.events.removeListener(i4, s2);
    }), this.relayer = e2, this.logger = E(t2, this.name), this.registerEventListeners();
  }
  get context() {
    return y(this.logger);
  }
  async rpcPublish(e2) {
    var t2, i4, s2, n2;
    const { topic: o2, message: a2, ttl: c4 = je2, prompt: h5, tag: l4, id: d3, attestation: g, tvf: _ } = e2, u4 = { method: Yc(Zc().protocol).publish, params: Ie2({ topic: o2, message: a2, ttl: c4, prompt: h5, tag: l4, attestation: g }, _), id: d3 };
    Et((t2 = u4.params) == null ? void 0 : t2.prompt) && ((i4 = u4.params) == null || delete i4.prompt), Et((s2 = u4.params) == null ? void 0 : s2.tag) && ((n2 = u4.params) == null || delete n2.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: u4 });
    const b4 = await this.relayer.request(u4);
    return this.relayer.events.emit(C2.publish, e2), this.logger.debug("Successfully Published Payload"), b4;
  }
  removeRequestFromQueue(e2) {
    this.queue.delete(e2);
  }
  checkQueue() {
    this.queue.forEach(async (e2, t2) => {
      const i4 = e2.attempt + 1;
      this.queue.set(t2, Ge2(Ie2({}, e2), { attempt: i4 }));
      const { topic: s2, message: n2, opts: o2, attestation: a2 } = e2;
      this.logger.warn({}, `Publisher: queue->publishing: ${e2.opts.id}, tag: ${e2.opts.tag}, attempt: ${i4}`), await this.rpcPublish(Ge2(Ie2({}, e2), { topic: s2, message: n2, ttl: o2.ttl, prompt: o2.prompt, tag: o2.tag, id: o2.id, attestation: a2, tvf: o2.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e2.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e2) => {
      this.removeRequestFromQueue(e2.id.toString());
    });
  }
};
var Gn2 = Object.defineProperty;
var Wn2 = (r2, e2, t2) => e2 in r2 ? Gn2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var ne2 = (r2, e2, t2) => Wn2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Hn = class {
  constructor() {
    ne2(this, "map", /* @__PURE__ */ new Map()), ne2(this, "set", (e2, t2) => {
      const i4 = this.get(e2);
      this.exists(e2, t2) || this.map.set(e2, [...i4, t2]);
    }), ne2(this, "get", (e2) => this.map.get(e2) || []), ne2(this, "exists", (e2, t2) => this.get(e2).includes(t2)), ne2(this, "delete", (e2, t2) => {
      if (typeof t2 > "u") {
        this.map.delete(e2);
        return;
      }
      if (!this.map.has(e2)) return;
      const i4 = this.get(e2);
      if (!this.exists(e2, t2)) return;
      const s2 = i4.filter((n2) => n2 !== t2);
      if (!s2.length) {
        this.map.delete(e2);
        return;
      }
      this.map.set(e2, s2);
    }), ne2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Yn2 = Object.defineProperty;
var Jn2 = Object.defineProperties;
var Xn2 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Zn2 = Object.prototype.hasOwnProperty;
var Qn2 = Object.prototype.propertyIsEnumerable;
var We2 = (r2, e2, t2) => e2 in r2 ? Yn2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var ge2 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) Zn2.call(e2, t2) && We2(r2, t2, e2[t2]);
  if (Ii2) for (var t2 of Ii2(e2)) Qn2.call(e2, t2) && We2(r2, t2, e2[t2]);
  return r2;
};
var He2 = (r2, e2) => Jn2(r2, Xn2(e2));
var f6 = (r2, e2, t2) => We2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Ti2 = class extends P2 {
  constructor(e2, t2) {
    super(e2, t2), this.relayer = e2, this.logger = t2, f6(this, "subscriptions", /* @__PURE__ */ new Map()), f6(this, "topicMap", new Hn()), f6(this, "events", new import_events3.EventEmitter()), f6(this, "name", Ut), f6(this, "version", Ft2), f6(this, "pending", /* @__PURE__ */ new Map()), f6(this, "cached", []), f6(this, "initialized", false), f6(this, "storagePrefix", B), f6(this, "subscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), f6(this, "initialSubscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), f6(this, "clientId"), f6(this, "batchSubscribeTopicsLimit", 500), f6(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f6(this, "subscribe", async (i4, s2) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i4, opts: s2 } });
      try {
        const n2 = Zc(s2), o2 = { topic: i4, relay: n2, transportType: s2 == null ? void 0 : s2.transportType };
        this.pending.set(i4, o2);
        const a2 = await this.rpcSubscribe(i4, n2, s2);
        return typeof a2 == "string" && (this.onSubscribe(a2, o2), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i4, opts: s2 } })), a2;
      } catch (n2) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n2), n2;
      }
    }), f6(this, "unsubscribe", async (i4, s2) => {
      this.isInitialized(), typeof (s2 == null ? void 0 : s2.id) < "u" ? await this.unsubscribeById(i4, s2.id, s2) : await this.unsubscribeByTopic(i4, s2);
    }), f6(this, "isSubscribed", (i4) => new Promise((s2) => {
      s2(this.topicMap.topics.includes(i4));
    })), f6(this, "isKnownTopic", (i4) => new Promise((s2) => {
      s2(this.topicMap.topics.includes(i4) || this.pending.has(i4) || this.cached.some((n2) => n2.topic === i4));
    })), f6(this, "on", (i4, s2) => {
      this.events.on(i4, s2);
    }), f6(this, "once", (i4, s2) => {
      this.events.once(i4, s2);
    }), f6(this, "off", (i4, s2) => {
      this.events.off(i4, s2);
    }), f6(this, "removeListener", (i4, s2) => {
      this.events.removeListener(i4, s2);
    }), f6(this, "start", async () => {
      await this.onConnect();
    }), f6(this, "stop", async () => {
      await this.onDisconnect();
    }), f6(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f6(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i4 = [];
      this.pending.forEach((s2) => {
        i4.push(s2);
      }), await this.batchSubscribe(i4);
    }), f6(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (i4) => {
        const s2 = $.created;
        this.logger.info(`Emitting ${s2}`), this.logger.debug({ type: "event", event: s2, data: i4 }), await this.persist();
      }), this.events.on($.deleted, async (i4) => {
        const s2 = $.deleted;
        this.logger.info(`Emitting ${s2}`), this.logger.debug({ type: "event", event: s2, data: i4 }), await this.persist();
      });
    }), this.relayer = e2, this.logger = E(t2, this.name), this.clientId = "";
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e2, t2) {
    let i4 = false;
    try {
      i4 = this.getSubscription(e2).topic === t2;
    } catch {
    }
    return i4;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e2, t2) {
    const i4 = this.topicMap.get(e2);
    await Promise.all(i4.map(async (s2) => await this.unsubscribeById(e2, s2, t2)));
  }
  async unsubscribeById(e2, t2, i4) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t2, opts: i4 } });
    try {
      const s2 = Zc(i4);
      await this.restartToComplete({ topic: e2, id: t2, relay: s2 }), await this.rpcUnsubscribe(e2, t2, s2);
      const n2 = Nt("USER_DISCONNECTED", `${this.name}, ${e2}`);
      await this.onUnsubscribe(e2, t2, n2), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e2, id: t2, opts: i4 } });
    } catch (s2) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s2), s2;
    }
  }
  async rpcSubscribe(e2, t2, i4) {
    var s2;
    (!i4 || (i4 == null ? void 0 : i4.transportType) === Q.relay) && await this.restartToComplete({ topic: e2, id: e2, relay: t2 });
    const n2 = { method: Yc(t2.protocol).subscribe, params: { topic: e2 } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n2 });
    const o2 = (s2 = i4 == null ? void 0 : i4.internal) == null ? void 0 : s2.throwOnFailedPublish;
    try {
      const a2 = await this.getSubscriptionId(e2);
      if ((i4 == null ? void 0 : i4.transportType) === Q.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n2).catch((l4) => this.logger.warn(l4));
      }, (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), a2;
      const c4 = new Promise(async (l4) => {
        const d3 = (g) => {
          g.topic === e2 && (this.events.removeListener($.created, d3), l4(g.id));
        };
        this.events.on($.created, d3);
        try {
          const g = await yi(new Promise((_, u4) => {
            this.relayer.request(n2).catch((b4) => {
              this.logger.warn(b4, b4 == null ? void 0 : b4.message), u4(b4);
            }).then(_);
          }), this.initialSubscribeTimeout, `Subscribing to ${e2} failed, please try again`);
          this.events.removeListener($.created, d3), l4(g);
        } catch {
        }
      }), h5 = await yi(c4, this.subscribeTimeout, `Subscribing to ${e2} failed, please try again`);
      if (!h5 && o2) throw new Error(`Subscribing to ${e2} failed, please try again`);
      return h5 ? a2 : null;
    } catch (a2) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), o2) throw a2;
    }
    return null;
  }
  async rpcBatchSubscribe(e2) {
    if (!e2.length) return;
    const t2 = e2[0].relay, i4 = { method: Yc(t2.protocol).batchSubscribe, params: { topics: e2.map((s2) => s2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 });
    try {
      await await yi(new Promise((s2) => {
        this.relayer.request(i4).catch((n2) => this.logger.warn(n2)).then(s2);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e2) {
    if (!e2.length) return;
    const t2 = e2[0].relay, i4 = { method: Yc(t2.protocol).batchFetchMessages, params: { topics: e2.map((n2) => n2.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i4 });
    let s2;
    try {
      s2 = await await yi(new Promise((n2, o2) => {
        this.relayer.request(i4).catch((a2) => {
          this.logger.warn(a2), o2(a2);
        }).then(n2);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s2;
  }
  rpcUnsubscribe(e2, t2, i4) {
    const s2 = { method: Yc(i4.protocol).unsubscribe, params: { topic: e2, id: t2 } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s2 }), this.relayer.request(s2);
  }
  onSubscribe(e2, t2) {
    this.setSubscription(e2, He2(ge2({}, t2), { id: e2 })), this.pending.delete(t2.topic);
  }
  onBatchSubscribe(e2) {
    e2.length && e2.forEach((t2) => {
      this.setSubscription(t2.id, ge2({}, t2)), this.pending.delete(t2.topic);
    });
  }
  async onUnsubscribe(e2, t2, i4) {
    this.events.removeAllListeners(t2), this.hasSubscription(t2, e2) && this.deleteSubscription(t2, i4), await this.relayer.messages.del(e2);
  }
  async setRelayerSubscriptions(e2) {
    await this.relayer.core.storage.setItem(this.storageKey, e2);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e2, t2) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e2, subscription: t2 }), this.addSubscription(e2, t2);
  }
  addSubscription(e2, t2) {
    this.subscriptions.set(e2, ge2({}, t2)), this.topicMap.set(t2.topic, e2), this.events.emit($.created, t2);
  }
  getSubscription(e2) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e2 });
    const t2 = this.subscriptions.get(e2);
    if (!t2) {
      const { message: i4 } = ht("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i4);
    }
    return t2;
  }
  deleteSubscription(e2, t2) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e2, reason: t2 });
    const i4 = this.getSubscription(e2);
    this.subscriptions.delete(e2), this.topicMap.delete(i4.topic, e2), this.events.emit($.deleted, He2(ge2({}, i4), { reason: t2 }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e2 = [...this.cached], t2 = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i4 = 0; i4 < t2; i4++) {
        const s2 = e2.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s2);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e2 = await this.getRelayerSubscriptions();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.subscriptions.size) {
        const { message: t2 } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t2);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e2);
    }
  }
  async batchSubscribe(e2) {
    e2.length && (await this.rpcBatchSubscribe(e2), this.onBatchSubscribe(await Promise.all(e2.map(async (t2) => He2(ge2({}, t2), { id: await this.getSubscriptionId(t2.topic) })))));
  }
  async batchFetchMessages(e2) {
    if (!e2.length) return;
    this.logger.trace(`Fetching batch messages for ${e2.length} subscriptions`);
    const t2 = await this.rpcBatchFetchMessages(e2);
    t2 && t2.messages && (await Ni((0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t2.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async restartToComplete(e2) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e2), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e2) {
    return kc(e2 + await this.getClientId());
  }
};
var eo2 = Object.defineProperty;
var Ci2 = Object.getOwnPropertySymbols;
var to2 = Object.prototype.hasOwnProperty;
var io2 = Object.prototype.propertyIsEnumerable;
var Ye2 = (r2, e2, t2) => e2 in r2 ? eo2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var Pi3 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) to2.call(e2, t2) && Ye2(r2, t2, e2[t2]);
  if (Ci2) for (var t2 of Ci2(e2)) io2.call(e2, t2) && Ye2(r2, t2, e2[t2]);
  return r2;
};
var y4 = (r2, e2, t2) => Ye2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Si2 = class extends d {
  constructor(e2) {
    super(e2), y4(this, "protocol", "wc"), y4(this, "version", 2), y4(this, "core"), y4(this, "logger"), y4(this, "events", new import_events3.EventEmitter()), y4(this, "provider"), y4(this, "messages"), y4(this, "subscriber"), y4(this, "publisher"), y4(this, "name", $t2), y4(this, "transportExplicitlyClosed", false), y4(this, "initialized", false), y4(this, "connectionAttemptInProgress", false), y4(this, "relayUrl"), y4(this, "projectId"), y4(this, "packageName"), y4(this, "bundleId"), y4(this, "hasExperiencedNetworkDisruption", false), y4(this, "pingTimeout"), y4(this, "heartBeatTimeout", (0, import_time2.toMiliseconds)(import_time2.THIRTY_SECONDS + import_time2.FIVE_SECONDS)), y4(this, "reconnectTimeout"), y4(this, "connectPromise"), y4(this, "reconnectInProgress", false), y4(this, "requestsInFlight", []), y4(this, "connectTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), y4(this, "request", async (t2) => {
      var i4, s2;
      this.logger.debug("Publishing Request Payload");
      const n2 = t2.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n2, method: t2.method, topic: (i4 = t2.params) == null ? void 0 : i4.topic }, "relayer.request - publishing...");
        const o2 = `${n2}:${((s2 = t2.params) == null ? void 0 : s2.tag) || ""}`;
        this.requestsInFlight.push(o2);
        const a2 = await this.provider.request(t2);
        return this.requestsInFlight = this.requestsInFlight.filter((c4) => c4 !== o2), a2;
      } catch (o2) {
        throw this.logger.debug(`Failed to Publish Request: ${n2}`), o2;
      }
    }), y4(this, "resetPingTimeout", () => {
      _e() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t2, i4, s2, n2;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n2 = (s2 = (i4 = (t2 = this.provider) == null ? void 0 : t2.connection) == null ? void 0 : i4.socket) == null ? void 0 : s2.terminate) == null || n2.call(s2);
        } catch (o2) {
          this.logger.warn(o2, o2 == null ? void 0 : o2.message);
        }
      }, this.heartBeatTimeout));
    }), y4(this, "onPayloadHandler", (t2) => {
      this.onProviderPayload(t2), this.resetPingTimeout();
    }), y4(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), y4(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y4(this, "onProviderErrorHandler", (t2) => {
      this.logger.fatal(`Fatal socket error: ${t2.message}`), this.events.emit(C2.error, t2), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y4(this, "registerProviderListeners", () => {
      this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);
    }), this.core = e2.core, this.logger = typeof e2.logger < "u" && typeof e2.logger != "string" ? E(e2.logger, this.name) : (0, import_pino.default)(k({ level: e2.logger || Nt2 })), this.messages = new _i2(this.logger, e2.core), this.subscriber = new Ti2(this, this.logger), this.publisher = new qn(this, this.logger), this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || Ue, this.projectId = e2.projectId, ei() ? this.packageName = ri() : ni() && (this.bundleId = ri()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.hasAnyTopics) try {
      await this.transportOpen();
    } catch (e2) {
      this.logger.warn(e2, e2 == null ? void 0 : e2.message);
    }
  }
  get context() {
    return y(this.logger);
  }
  get connected() {
    var e2, t2, i4;
    return ((i4 = (t2 = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t2.socket) == null ? void 0 : i4.readyState) === 1 || false;
  }
  get connecting() {
    var e2, t2, i4;
    return ((i4 = (t2 = (e2 = this.provider) == null ? void 0 : e2.connection) == null ? void 0 : t2.socket) == null ? void 0 : i4.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e2, t2, i4) {
    this.isInitialized(), await this.publisher.publish(e2, t2, i4), await this.recordMessageEvent({ topic: e2, message: t2, publishedAt: Date.now(), transportType: Q.relay }, le2.outbound);
  }
  async subscribe(e2, t2) {
    var i4, s2, n2;
    this.isInitialized(), (!(t2 != null && t2.transportType) || (t2 == null ? void 0 : t2.transportType) === "relay") && await this.toEstablishConnection();
    const o2 = typeof ((i4 = t2 == null ? void 0 : t2.internal) == null ? void 0 : i4.throwOnFailedPublish) > "u" ? true : (s2 = t2 == null ? void 0 : t2.internal) == null ? void 0 : s2.throwOnFailedPublish;
    let a2 = ((n2 = this.subscriber.topicMap.get(e2)) == null ? void 0 : n2[0]) || "", c4;
    const h5 = (l4) => {
      l4.topic === e2 && (this.subscriber.off($.created, h5), c4());
    };
    return await Promise.all([new Promise((l4) => {
      c4 = l4, this.subscriber.on($.created, h5);
    }), new Promise(async (l4, d3) => {
      a2 = await this.subscriber.subscribe(e2, Pi3({ internal: { throwOnFailedPublish: o2 } }, t2)).catch((g) => {
        o2 && d3(g);
      }) || a2, l4();
    })]), a2;
  }
  async unsubscribe(e2, t2) {
    this.isInitialized(), await this.subscriber.unsubscribe(e2, t2);
  }
  on(e2, t2) {
    this.events.on(e2, t2);
  }
  once(e2, t2) {
    this.events.once(e2, t2);
  }
  off(e2, t2) {
    this.events.off(e2, t2);
  }
  removeListener(e2, t2) {
    this.events.removeListener(e2, t2);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await yi(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e2) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t2, i4) => {
      await this.connect(e2).then(t2).catch(i4).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e2) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e2 || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Na()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e2) {
    if ((e2 == null ? void 0 : e2.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t2 = e2.sort((i4, s2) => i4.publishedAt - s2.publishedAt);
    this.logger.debug(`Batch of ${t2.length} message events sorted`);
    for (const i4 of t2) try {
      await this.onMessageEvent(i4);
    } catch (s2) {
      this.logger.warn(s2, "Error while processing batch message event: " + (s2 == null ? void 0 : s2.message));
    }
    this.logger.trace(`Batch of ${t2.length} message events processed`);
  }
  async onLinkMessageEvent(e2, t2) {
    const { topic: i4 } = e2;
    if (!t2.sessionExists) {
      const s2 = Ei(import_time2.FIVE_MINUTES), n2 = { topic: i4, expiry: s2, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i4, n2);
    }
    this.events.emit(C2.message, e2), await this.recordMessageEvent(e2, le2.inbound);
  }
  async connect(e2) {
    await this.confirmOnlineStateOrThrow(), e2 && e2 !== this.relayUrl && (this.relayUrl = e2, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t2 = 1;
    for (; t2 < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t2}...`), await this.createProvider(), await new Promise(async (i4, s2) => {
          const n2 = () => {
            s2(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(L.disconnect, n2), await yi(new Promise((o2, a2) => {
            this.provider.connect().then(o2).catch(a2);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o2) => {
            s2(o2);
          }).finally(() => {
            this.provider.off(L.disconnect, n2), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o2, a2) => {
            const c4 = () => {
              a2(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L.disconnect, c4), await this.subscriber.start().then(o2).catch(a2).finally(() => {
              this.provider.off(L.disconnect, c4);
            });
          }), this.hasExperiencedNetworkDisruption = false, i4();
        });
      } catch (i4) {
        await this.subscriber.stop();
        const s2 = i4;
        this.logger.warn({}, s2.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t2}`);
        break;
      }
      await new Promise((i4) => setTimeout(i4, (0, import_time2.toMiliseconds)(t2 * 1))), t2++;
    }
  }
  startPingTimeout() {
    var e2, t2, i4, s2, n2;
    if (_e()) try {
      (t2 = (e2 = this.provider) == null ? void 0 : e2.connection) != null && t2.socket && ((n2 = (s2 = (i4 = this.provider) == null ? void 0 : i4.connection) == null ? void 0 : s2.socket) == null || n2.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o2) {
      this.logger.warn(o2, o2 == null ? void 0 : o2.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e2 = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f(si({ sdkVersion: _e2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e2, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e2, t2) {
    const { topic: i4, message: s2 } = e2;
    await this.messages.set(i4, s2, t2);
  }
  async shouldIgnoreMessageEvent(e2) {
    const { topic: t2, message: i4 } = e2;
    if (!i4 || i4.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i4}`), true;
    if (!await this.subscriber.isKnownTopic(t2)) return this.logger.warn(`Ignoring message for unknown topic ${t2}`), true;
    const s2 = this.messages.has(t2, i4);
    return s2 && this.logger.warn(`Ignoring duplicate message: ${i4}`), s2;
  }
  async onProviderPayload(e2) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e2 }), isJsonRpcRequest(e2)) {
      if (!e2.method.endsWith(zt)) return;
      const t2 = e2.params, { topic: i4, message: s2, publishedAt: n2, attestation: o2 } = t2.data, a2 = { topic: i4, message: s2, publishedAt: n2, transportType: Q.relay, attestation: o2 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Pi3({ type: "event", event: t2.id }, a2)), this.events.emit(t2.id, a2), await this.acknowledgePayload(e2), await this.onMessageEvent(a2);
    } else isJsonRpcResponse(e2) && this.events.emit(C2.message_ack, e2);
  }
  async onMessageEvent(e2) {
    await this.shouldIgnoreMessageEvent(e2) || (await this.recordMessageEvent(e2, le2.inbound), this.events.emit(C2.message, e2));
  }
  async acknowledgePayload(e2) {
    const t2 = formatJsonRpcResult(e2.id, true);
    await this.provider.connection.send(t2);
  }
  unregisterProviderListeners() {
    this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e2 = await Na();
    Ua(async (t2) => {
      e2 !== t2 && (e2 = t2, t2 ? await this.transportOpen().catch((i4) => this.logger.error(i4, i4 == null ? void 0 : i4.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Ta()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t2) {
        this.logger.warn(t2, t2 == null ? void 0 : t2.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e2) => this.logger.error(e2, e2 == null ? void 0 : e2.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time2.toMiliseconds)(Lt2)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function so2() {
}
function Oi2(r2) {
  if (!r2 || typeof r2 != "object") return false;
  const e2 = Object.getPrototypeOf(r2);
  return e2 === null || e2 === Object.prototype || Object.getPrototypeOf(e2) === null ? Object.prototype.toString.call(r2) === "[object Object]" : false;
}
function Ri2(r2) {
  return Object.getOwnPropertySymbols(r2).filter((e2) => Object.prototype.propertyIsEnumerable.call(r2, e2));
}
function Ai2(r2) {
  return r2 == null ? r2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r2);
}
var ro2 = "[object RegExp]";
var no2 = "[object String]";
var oo2 = "[object Number]";
var ao2 = "[object Boolean]";
var xi2 = "[object Arguments]";
var co2 = "[object Symbol]";
var ho2 = "[object Date]";
var lo2 = "[object Map]";
var uo2 = "[object Set]";
var go2 = "[object Array]";
var po2 = "[object Function]";
var yo2 = "[object ArrayBuffer]";
var Je2 = "[object Object]";
var bo2 = "[object Error]";
var mo2 = "[object DataView]";
var fo2 = "[object Uint8Array]";
var Do = "[object Uint8ClampedArray]";
var vo2 = "[object Uint16Array]";
var wo2 = "[object Uint32Array]";
var _o2 = "[object BigUint64Array]";
var Eo2 = "[object Int8Array]";
var Io2 = "[object Int16Array]";
var To2 = "[object Int32Array]";
var Co2 = "[object BigInt64Array]";
var Po3 = "[object Float32Array]";
var So2 = "[object Float64Array]";
function Oo2(r2, e2) {
  return r2 === e2 || Number.isNaN(r2) && Number.isNaN(e2);
}
function Ro2(r2, e2, t2) {
  return pe2(r2, e2, void 0, void 0, void 0, void 0, t2);
}
function pe2(r2, e2, t2, i4, s2, n2, o2) {
  const a2 = o2(r2, e2, t2, i4, s2, n2);
  if (a2 !== void 0) return a2;
  if (typeof r2 == typeof e2) switch (typeof r2) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r2 === e2;
    case "number":
      return r2 === e2 || Object.is(r2, e2);
    case "function":
      return r2 === e2;
    case "object":
      return ye2(r2, e2, n2, o2);
  }
  return ye2(r2, e2, n2, o2);
}
function ye2(r2, e2, t2, i4) {
  if (Object.is(r2, e2)) return true;
  let s2 = Ai2(r2), n2 = Ai2(e2);
  if (s2 === xi2 && (s2 = Je2), n2 === xi2 && (n2 = Je2), s2 !== n2) return false;
  switch (s2) {
    case no2:
      return r2.toString() === e2.toString();
    case oo2: {
      const c4 = r2.valueOf(), h5 = e2.valueOf();
      return Oo2(c4, h5);
    }
    case ao2:
    case ho2:
    case co2:
      return Object.is(r2.valueOf(), e2.valueOf());
    case ro2:
      return r2.source === e2.source && r2.flags === e2.flags;
    case po2:
      return r2 === e2;
  }
  t2 = t2 ?? /* @__PURE__ */ new Map();
  const o2 = t2.get(r2), a2 = t2.get(e2);
  if (o2 != null && a2 != null) return o2 === e2;
  t2.set(r2, e2), t2.set(e2, r2);
  try {
    switch (s2) {
      case lo2: {
        if (r2.size !== e2.size) return false;
        for (const [c4, h5] of r2.entries()) if (!e2.has(c4) || !pe2(h5, e2.get(c4), c4, r2, e2, t2, i4)) return false;
        return true;
      }
      case uo2: {
        if (r2.size !== e2.size) return false;
        const c4 = Array.from(r2.values()), h5 = Array.from(e2.values());
        for (let l4 = 0; l4 < c4.length; l4++) {
          const d3 = c4[l4], g = h5.findIndex((_) => pe2(d3, _, void 0, r2, e2, t2, i4));
          if (g === -1) return false;
          h5.splice(g, 1);
        }
        return true;
      }
      case go2:
      case fo2:
      case Do:
      case vo2:
      case wo2:
      case _o2:
      case Eo2:
      case Io2:
      case To2:
      case Co2:
      case Po3:
      case So2: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r2) !== Buffer.isBuffer(e2) || r2.length !== e2.length) return false;
        for (let c4 = 0; c4 < r2.length; c4++) if (!pe2(r2[c4], e2[c4], c4, r2, e2, t2, i4)) return false;
        return true;
      }
      case yo2:
        return r2.byteLength !== e2.byteLength ? false : ye2(new Uint8Array(r2), new Uint8Array(e2), t2, i4);
      case mo2:
        return r2.byteLength !== e2.byteLength || r2.byteOffset !== e2.byteOffset ? false : ye2(new Uint8Array(r2), new Uint8Array(e2), t2, i4);
      case bo2:
        return r2.name === e2.name && r2.message === e2.message;
      case Je2: {
        if (!(ye2(r2.constructor, e2.constructor, t2, i4) || Oi2(r2) && Oi2(e2))) return false;
        const h5 = [...Object.keys(r2), ...Ri2(r2)], l4 = [...Object.keys(e2), ...Ri2(e2)];
        if (h5.length !== l4.length) return false;
        for (let d3 = 0; d3 < h5.length; d3++) {
          const g = h5[d3], _ = r2[g];
          if (!Object.hasOwn(e2, g)) return false;
          const u4 = e2[g];
          if (!pe2(_, u4, g, r2, e2, t2, i4)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t2.delete(r2), t2.delete(e2);
  }
}
function Ao2(r2, e2) {
  return Ro2(r2, e2, so2);
}
var xo2 = Object.defineProperty;
var Ni2 = Object.getOwnPropertySymbols;
var No2 = Object.prototype.hasOwnProperty;
var $o2 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r2, e2, t2) => e2 in r2 ? xo2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var $i2 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) No2.call(e2, t2) && Xe2(r2, t2, e2[t2]);
  if (Ni2) for (var t2 of Ni2(e2)) $o2.call(e2, t2) && Xe2(r2, t2, e2[t2]);
  return r2;
};
var z = (r2, e2, t2) => Xe2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var zi2 = class extends f4 {
  constructor(e2, t2, i4, s2 = B, n2 = void 0) {
    super(e2, t2, i4, s2), this.core = e2, this.logger = t2, this.name = i4, z(this, "map", /* @__PURE__ */ new Map()), z(this, "version", kt2), z(this, "cached", []), z(this, "initialized", false), z(this, "getKey"), z(this, "storagePrefix", B), z(this, "recentlyDeleted", []), z(this, "recentlyDeletedLimit", 200), z(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o2) => {
        this.getKey && o2 !== null && !Et(o2) ? this.map.set(this.getKey(o2), o2) : la(o2) ? this.map.set(o2.id, o2) : da(o2) && this.map.set(o2.topic, o2);
      }), this.cached = [], this.initialized = true);
    }), z(this, "set", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) ? await this.update(o2, a2) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o2, value: a2 }), this.map.set(o2, a2), await this.persist());
    }), z(this, "get", (o2) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o2 }), this.getData(o2))), z(this, "getAll", (o2) => (this.isInitialized(), o2 ? this.values.filter((a2) => Object.keys(o2).every((c4) => Ao2(a2[c4], o2[c4]))) : this.values)), z(this, "update", async (o2, a2) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o2, update: a2 });
      const c4 = $i2($i2({}, this.getData(o2)), a2);
      this.map.set(o2, c4), await this.persist();
    }), z(this, "delete", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o2, reason: a2 }), this.map.delete(o2), this.addToRecentlyDeleted(o2), await this.persist());
    }), this.logger = E(t2, this.name), this.storagePrefix = s2, this.getKey = n2;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e2) {
    this.recentlyDeleted.push(e2), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e2) {
    const t2 = this.map.get(e2);
    if (!t2) {
      if (this.recentlyDeleted.includes(e2)) {
        const { message: s2 } = ht("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e2}`);
        throw this.logger.error(s2), new Error(s2);
      }
      const { message: i4 } = ht("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.error(i4), new Error(i4);
    }
    return t2;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e2 = await this.getDataStore();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.map.size) {
        const { message: t2 } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var zo = Object.defineProperty;
var Lo2 = (r2, e2, t2) => e2 in r2 ? zo(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var p2 = (r2, e2, t2) => Lo2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Li2 = class {
  constructor(e2, t2) {
    this.core = e2, this.logger = t2, p2(this, "name", Mt2), p2(this, "version", Kt2), p2(this, "events", new import_events3.default()), p2(this, "pairings"), p2(this, "initialized", false), p2(this, "storagePrefix", B), p2(this, "ignoredPayloadTypes", [Ft]), p2(this, "registeredMethods", []), p2(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p2(this, "register", ({ methods: i4 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i4])];
    }), p2(this, "create", async (i4) => {
      this.isInitialized();
      const s2 = jc(), n2 = await this.core.crypto.setSymKey(s2), o2 = Ei(import_time2.FIVE_MINUTES), a2 = { protocol: xt2 }, c4 = { topic: n2, expiry: o2, relay: a2, active: false, methods: i4 == null ? void 0 : i4.methods }, h5 = Wc({ protocol: this.core.protocol, version: this.core.version, topic: n2, symKey: s2, relay: a2, expiryTimestamp: o2, methods: i4 == null ? void 0 : i4.methods });
      return this.events.emit(re2.create, c4), this.core.expirer.set(n2, o2), await this.pairings.set(n2, c4), await this.core.relayer.subscribe(n2, { transportType: i4 == null ? void 0 : i4.transportType }), { topic: n2, uri: h5 };
    }), p2(this, "pair", async (i4) => {
      this.isInitialized();
      const s2 = this.core.eventClient.createEvent({ properties: { topic: i4 == null ? void 0 : i4.uri, trace: [G2.pairing_started] } });
      this.isValidPair(i4, s2);
      const { topic: n2, symKey: o2, relay: a2, expiryTimestamp: c4, methods: h5 } = Gc(i4.uri);
      s2.props.properties.topic = n2, s2.addTrace(G2.pairing_uri_validation_success), s2.addTrace(G2.pairing_uri_not_expired);
      let l4;
      if (this.pairings.keys.includes(n2)) {
        if (l4 = this.pairings.get(n2), s2.addTrace(G2.existing_pairing), l4.active) throw s2.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n2}. Please try again with a new connection URI.`);
        s2.addTrace(G2.pairing_not_expired);
      }
      const d3 = c4 || Ei(import_time2.FIVE_MINUTES), g = { topic: n2, relay: a2, expiry: d3, active: false, methods: h5 };
      this.core.expirer.set(n2, d3), await this.pairings.set(n2, g), s2.addTrace(G2.store_new_pairing), i4.activatePairing && await this.activate({ topic: n2 }), this.events.emit(re2.create, g), s2.addTrace(G2.emit_inactive_pairing), this.core.crypto.keychain.has(n2) || await this.core.crypto.setSymKey(o2, n2), s2.addTrace(G2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s2.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n2, { relay: a2 });
      } catch (_) {
        throw s2.setError(Y2.subscribe_pairing_topic_failure), _;
      }
      return s2.addTrace(G2.subscribe_pairing_topic_success), g;
    }), p2(this, "activate", async ({ topic: i4 }) => {
      this.isInitialized();
      const s2 = Ei(import_time2.FIVE_MINUTES);
      this.core.expirer.set(i4, s2), await this.pairings.update(i4, { active: true, expiry: s2 });
    }), p2(this, "ping", async (i4) => {
      this.isInitialized(), await this.isValidPing(i4), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s2 } = i4;
      if (this.pairings.keys.includes(s2)) {
        const n2 = await this.sendRequest(s2, "wc_pairingPing", {}), { done: o2, resolve: a2, reject: c4 } = gi();
        this.events.once(xi("pairing_ping", n2), ({ error: h5 }) => {
          h5 ? c4(h5) : a2();
        }), await o2();
      }
    }), p2(this, "updateExpiry", async ({ topic: i4, expiry: s2 }) => {
      this.isInitialized(), await this.pairings.update(i4, { expiry: s2 });
    }), p2(this, "updateMetadata", async ({ topic: i4, metadata: s2 }) => {
      this.isInitialized(), await this.pairings.update(i4, { peerMetadata: s2 });
    }), p2(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p2(this, "disconnect", async (i4) => {
      this.isInitialized(), await this.isValidDisconnect(i4);
      const { topic: s2 } = i4;
      this.pairings.keys.includes(s2) && (await this.sendRequest(s2, "wc_pairingDelete", Nt("USER_DISCONNECTED")), await this.deletePairing(s2));
    }), p2(this, "formatUriFromPairing", (i4) => {
      this.isInitialized();
      const { topic: s2, relay: n2, expiry: o2, methods: a2 } = i4, c4 = this.core.crypto.keychain.get(s2);
      return Wc({ protocol: this.core.protocol, version: this.core.version, topic: s2, symKey: c4, relay: n2, expiryTimestamp: o2, methods: a2 });
    }), p2(this, "sendRequest", async (i4, s2, n2) => {
      const o2 = formatJsonRpcRequest(s2, n2), a2 = await this.core.crypto.encode(i4, o2), c4 = se2[s2].req;
      return this.core.history.set(i4, o2), this.core.relayer.publish(i4, a2, c4), o2.id;
    }), p2(this, "sendResult", async (i4, s2, n2) => {
      const o2 = formatJsonRpcResult(i4, n2), a2 = await this.core.crypto.encode(s2, o2), c4 = (await this.core.history.get(s2, i4)).request.method, h5 = se2[c4].res;
      await this.core.relayer.publish(s2, a2, h5), await this.core.history.resolve(o2);
    }), p2(this, "sendError", async (i4, s2, n2) => {
      const o2 = formatJsonRpcError(i4, n2), a2 = await this.core.crypto.encode(s2, o2), c4 = (await this.core.history.get(s2, i4)).request.method, h5 = se2[c4] ? se2[c4].res : se2.unregistered_method.res;
      await this.core.relayer.publish(s2, a2, h5), await this.core.history.resolve(o2);
    }), p2(this, "deletePairing", async (i4, s2) => {
      await this.core.relayer.unsubscribe(i4), await Promise.all([this.pairings.delete(i4, Nt("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i4), s2 ? Promise.resolve() : this.core.expirer.del(i4)]);
    }), p2(this, "cleanup", async () => {
      const i4 = this.pairings.getAll().filter((s2) => vi(s2.expiry));
      await Promise.all(i4.map((s2) => this.deletePairing(s2.topic)));
    }), p2(this, "onRelayEventRequest", async (i4) => {
      const { topic: s2, payload: n2 } = i4;
      switch (n2.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s2, n2);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s2, n2);
        default:
          return await this.onUnknownRpcMethodRequest(s2, n2);
      }
    }), p2(this, "onRelayEventResponse", async (i4) => {
      const { topic: s2, payload: n2 } = i4, o2 = (await this.core.history.get(s2, n2.id)).request.method;
      switch (o2) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s2, n2);
        default:
          return this.onUnknownRpcMethodResponse(o2);
      }
    }), p2(this, "onPairingPingRequest", async (i4, s2) => {
      const { id: n2 } = s2;
      try {
        this.isValidPing({ topic: i4 }), await this.sendResult(n2, i4, true), this.events.emit(re2.ping, { id: n2, topic: i4 });
      } catch (o2) {
        await this.sendError(n2, i4, o2), this.logger.error(o2);
      }
    }), p2(this, "onPairingPingResponse", (i4, s2) => {
      const { id: n2 } = s2;
      setTimeout(() => {
        isJsonRpcResult(s2) ? this.events.emit(xi("pairing_ping", n2), {}) : isJsonRpcError(s2) && this.events.emit(xi("pairing_ping", n2), { error: s2.error });
      }, 500);
    }), p2(this, "onPairingDeleteRequest", async (i4, s2) => {
      const { id: n2 } = s2;
      try {
        this.isValidDisconnect({ topic: i4 }), await this.deletePairing(i4), this.events.emit(re2.delete, { id: n2, topic: i4 });
      } catch (o2) {
        await this.sendError(n2, i4, o2), this.logger.error(o2);
      }
    }), p2(this, "onUnknownRpcMethodRequest", async (i4, s2) => {
      const { id: n2, method: o2 } = s2;
      try {
        if (this.registeredMethods.includes(o2)) return;
        const a2 = Nt("WC_METHOD_UNSUPPORTED", o2);
        await this.sendError(n2, i4, a2), this.logger.error(a2);
      } catch (a2) {
        await this.sendError(n2, i4, a2), this.logger.error(a2);
      }
    }), p2(this, "onUnknownRpcMethodResponse", (i4) => {
      this.registeredMethods.includes(i4) || this.logger.error(Nt("WC_METHOD_UNSUPPORTED", i4));
    }), p2(this, "isValidPair", (i4, s2) => {
      var n2;
      if (!ma(i4)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `pair() params: ${i4}`);
        throw s2.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!fa(i4.uri)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `pair() uri: ${i4.uri}`);
        throw s2.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      const o2 = Gc(i4 == null ? void 0 : i4.uri);
      if (!((n2 = o2 == null ? void 0 : o2.relay) != null && n2.protocol)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s2.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!(o2 != null && o2.symKey)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s2.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (o2 != null && o2.expiryTimestamp && (0, import_time2.toMiliseconds)(o2 == null ? void 0 : o2.expiryTimestamp) < Date.now()) {
        s2.setError(Y2.pairing_expired);
        const { message: a2 } = ht("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a2);
      }
    }), p2(this, "isValidPing", async (i4) => {
      if (!ma(i4)) {
        const { message: n2 } = ht("MISSING_OR_INVALID", `ping() params: ${i4}`);
        throw new Error(n2);
      }
      const { topic: s2 } = i4;
      await this.isValidPairingTopic(s2);
    }), p2(this, "isValidDisconnect", async (i4) => {
      if (!ma(i4)) {
        const { message: n2 } = ht("MISSING_OR_INVALID", `disconnect() params: ${i4}`);
        throw new Error(n2);
      }
      const { topic: s2 } = i4;
      await this.isValidPairingTopic(s2);
    }), p2(this, "isValidPairingTopic", async (i4) => {
      if (!nt(i4, false)) {
        const { message: s2 } = ht("MISSING_OR_INVALID", `pairing topic should be a string: ${i4}`);
        throw new Error(s2);
      }
      if (!this.pairings.keys.includes(i4)) {
        const { message: s2 } = ht("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i4}`);
        throw new Error(s2);
      }
      if (vi(this.pairings.get(i4).expiry)) {
        await this.deletePairing(i4);
        const { message: s2 } = ht("EXPIRED", `pairing topic: ${i4}`);
        throw new Error(s2);
      }
    }), this.core = e2, this.logger = E(t2, this.name), this.pairings = new zi2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e2) => {
      const { topic: t2, message: i4, transportType: s2 } = e2;
      if (this.pairings.keys.includes(t2) && s2 !== Q.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i4))) try {
        const n2 = await this.core.crypto.decode(t2, i4);
        isJsonRpcRequest(n2) ? (this.core.history.set(t2, n2), await this.onRelayEventRequest({ topic: t2, payload: n2 })) : isJsonRpcResponse(n2) && (await this.core.history.resolve(n2), await this.onRelayEventResponse({ topic: t2, payload: n2 }), this.core.history.delete(t2, n2.id)), await this.core.relayer.messages.ack(t2, i4);
      } catch (n2) {
        this.logger.error(n2);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M2.expired, async (e2) => {
      const { topic: t2 } = bi(e2.target);
      t2 && this.pairings.keys.includes(t2) && (await this.deletePairing(t2, true), this.events.emit(re2.expire, { topic: t2 }));
    });
  }
};
var ko = Object.defineProperty;
var jo = (r2, e2, t2) => e2 in r2 ? ko(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var O2 = (r2, e2, t2) => jo(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var ki2 = class extends I {
  constructor(e2, t2) {
    super(e2, t2), this.core = e2, this.logger = t2, O2(this, "records", /* @__PURE__ */ new Map()), O2(this, "events", new import_events3.EventEmitter()), O2(this, "name", Bt2), O2(this, "version", Vt2), O2(this, "cached", []), O2(this, "initialized", false), O2(this, "storagePrefix", B), O2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i4) => this.records.set(i4.id, i4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), O2(this, "set", (i4, s2, n2) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i4, request: s2, chainId: n2 }), this.records.has(s2.id)) return;
      const o2 = { id: s2.id, topic: i4, request: { method: s2.method, params: s2.params || null }, chainId: n2, expiry: Ei(import_time2.THIRTY_DAYS) };
      this.records.set(o2.id, o2), this.persist(), this.events.emit(F2.created, o2);
    }), O2(this, "resolve", async (i4) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i4 }), !this.records.has(i4.id)) return;
      const s2 = await this.getRecord(i4.id);
      typeof s2.response > "u" && (s2.response = isJsonRpcError(i4) ? { error: i4.error } : { result: i4.result }, this.records.set(s2.id, s2), this.persist(), this.events.emit(F2.updated, s2));
    }), O2(this, "get", async (i4, s2) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i4, id: s2 }), await this.getRecord(s2))), O2(this, "delete", (i4, s2) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s2 }), this.values.forEach((n2) => {
        if (n2.topic === i4) {
          if (typeof s2 < "u" && n2.id !== s2) return;
          this.records.delete(n2.id), this.events.emit(F2.deleted, n2);
        }
      }), this.persist();
    }), O2(this, "exists", async (i4, s2) => (this.isInitialized(), this.records.has(s2) ? (await this.getRecord(s2)).topic === i4 : false)), O2(this, "on", (i4, s2) => {
      this.events.on(i4, s2);
    }), O2(this, "once", (i4, s2) => {
      this.events.once(i4, s2);
    }), O2(this, "off", (i4, s2) => {
      this.events.off(i4, s2);
    }), O2(this, "removeListener", (i4, s2) => {
      this.events.removeListener(i4, s2);
    }), this.logger = E(t2, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e2 = [];
    return this.values.forEach((t2) => {
      if (typeof t2.response < "u") return;
      const i4 = { topic: t2.topic, request: formatJsonRpcRequest(t2.request.method, t2.request.params, t2.id), chainId: t2.chainId };
      return e2.push(i4);
    }), e2;
  }
  async setJsonRpcRecords(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e2) {
    this.isInitialized();
    const t2 = this.records.get(e2);
    if (!t2) {
      const { message: i4 } = ht("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw new Error(i4);
    }
    return t2;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e2 = await this.getJsonRpcRecords();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.records.size) {
        const { message: t2 } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e2);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e2) => {
      const t2 = F2.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e2 });
    }), this.events.on(F2.updated, (e2) => {
      const t2 = F2.updated;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e2 });
    }), this.events.on(F2.deleted, (e2) => {
      const t2 = F2.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, record: e2 });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e2 = false;
      this.records.forEach((t2) => {
        (0, import_time2.toMiliseconds)(t2.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t2.id}`), this.records.delete(t2.id), this.events.emit(F2.deleted, t2, false), e2 = true);
      }), e2 && this.persist();
    } catch (e2) {
      this.logger.warn(e2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Uo2 = Object.defineProperty;
var Fo = (r2, e2, t2) => e2 in r2 ? Uo2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var A2 = (r2, e2, t2) => Fo(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var ji2 = class extends S {
  constructor(e2, t2) {
    super(e2, t2), this.core = e2, this.logger = t2, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events3.EventEmitter()), A2(this, "name", qt2), A2(this, "version", Gt), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i4) => this.expirations.set(i4.target, i4)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (i4) => {
      try {
        const s2 = this.formatTarget(i4);
        return typeof this.getExpiration(s2) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (i4, s2) => {
      this.isInitialized();
      const n2 = this.formatTarget(i4), o2 = { target: n2, expiry: s2 };
      this.expirations.set(n2, o2), this.checkExpiry(n2, o2), this.events.emit(M2.created, { target: n2, expiration: o2 });
    }), A2(this, "get", (i4) => {
      this.isInitialized();
      const s2 = this.formatTarget(i4);
      return this.getExpiration(s2);
    }), A2(this, "del", (i4) => {
      if (this.isInitialized(), this.has(i4)) {
        const s2 = this.formatTarget(i4), n2 = this.getExpiration(s2);
        this.expirations.delete(s2), this.events.emit(M2.deleted, { target: s2, expiration: n2 });
      }
    }), A2(this, "on", (i4, s2) => {
      this.events.on(i4, s2);
    }), A2(this, "once", (i4, s2) => {
      this.events.once(i4, s2);
    }), A2(this, "off", (i4, s2) => {
      this.events.off(i4, s2);
    }), A2(this, "removeListener", (i4, s2) => {
      this.events.removeListener(i4, s2);
    }), this.logger = E(t2, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e2) {
    if (typeof e2 == "string") return mi(e2);
    if (typeof e2 == "number") return wi(e2);
    const { message: t2 } = ht("UNKNOWN_TYPE", `Target type: ${typeof e2}`);
    throw new Error(t2);
  }
  async setExpirations(e2) {
    await this.core.storage.setItem(this.storageKey, e2);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M2.sync);
  }
  async restore() {
    try {
      const e2 = await this.getExpirations();
      if (typeof e2 > "u" || !e2.length) return;
      if (this.expirations.size) {
        const { message: t2 } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t2), new Error(t2);
      }
      this.cached = e2, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e2) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e2);
    }
  }
  getExpiration(e2) {
    const t2 = this.expirations.get(e2);
    if (!t2) {
      const { message: i4 } = ht("NO_MATCHING_KEY", `${this.name}: ${e2}`);
      throw this.logger.warn(i4), new Error(i4);
    }
    return t2;
  }
  checkExpiry(e2, t2) {
    const { expiry: i4 } = t2;
    (0, import_time2.toMiliseconds)(i4) - Date.now() <= 0 && this.expire(e2, t2);
  }
  expire(e2, t2) {
    this.expirations.delete(e2), this.events.emit(M2.expired, { target: e2, expiration: t2 });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e2, t2) => this.checkExpiry(t2, e2));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(M2.created, (e2) => {
      const t2 = M2.created;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e2 }), this.persist();
    }), this.events.on(M2.expired, (e2) => {
      const t2 = M2.expired;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e2 }), this.persist();
    }), this.events.on(M2.deleted, (e2) => {
      const t2 = M2.deleted;
      this.logger.info(`Emitting ${t2}`), this.logger.debug({ type: "event", event: t2, data: e2 }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e2);
    }
  }
};
var Mo = Object.defineProperty;
var Ko = (r2, e2, t2) => e2 in r2 ? Mo(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var w = (r2, e2, t2) => Ko(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Ui2 = class extends M {
  constructor(e2, t2, i4) {
    super(e2, t2, i4), this.core = e2, this.logger = t2, this.store = i4, w(this, "name", Wt2), w(this, "abortController"), w(this, "isDevEnv"), w(this, "verifyUrlV3", Yt2), w(this, "storagePrefix", B), w(this, "version", Le), w(this, "publicKey"), w(this, "fetchPromise"), w(this, "init", async () => {
      var s2;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time2.toMiliseconds)((s2 = this.publicKey) == null ? void 0 : s2.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w(this, "register", async (s2) => {
      if (!Tt() || this.isDevEnv) return;
      const n2 = window.location.origin, { id: o2, decryptedId: a2 } = s2, c4 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n2}&id=${o2}&decryptedId=${a2}`;
      try {
        const h5 = (0, import_window_getters2.getDocument)(), l4 = this.startAbortTimer(import_time2.ONE_SECOND * 5), d3 = await new Promise((g, _) => {
          const u4 = () => {
            window.removeEventListener("message", x2), h5.body.removeChild(b4), _("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u4);
          const b4 = h5.createElement("iframe");
          b4.src = c4, b4.style.display = "none", b4.addEventListener("error", u4, { signal: this.abortController.signal });
          const x2 = (I3) => {
            if (I3.data && typeof I3.data == "string") try {
              const D2 = JSON.parse(I3.data);
              if (D2.type === "verify_attestation") {
                if (sn(D2.attestation).payload.id !== o2) return;
                clearInterval(l4), h5.body.removeChild(b4), this.abortController.signal.removeEventListener("abort", u4), window.removeEventListener("message", x2), g(D2.attestation === null ? "" : D2.attestation);
              }
            } catch (D2) {
              this.logger.warn(D2);
            }
          };
          h5.body.appendChild(b4), window.addEventListener("message", x2, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d3), d3;
      } catch (h5) {
        this.logger.warn(h5);
      }
      return "";
    }), w(this, "resolve", async (s2) => {
      if (this.isDevEnv) return "";
      const { attestationId: n2, hash: o2, encryptedId: a2 } = s2;
      if (n2 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n2) {
        if (sn(n2).payload.id !== a2) return;
        const h5 = await this.isValidJwtAttestation(n2);
        if (h5) {
          if (!h5.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h5;
        }
      }
      if (!o2) return;
      const c4 = this.getVerifyUrl(s2 == null ? void 0 : s2.verifyUrl);
      return this.fetchAttestation(o2, c4);
    }), w(this, "fetchAttestation", async (s2, n2) => {
      this.logger.debug(`resolving attestation: ${s2} from url: ${n2}`);
      const o2 = this.startAbortTimer(import_time2.ONE_SECOND * 5), a2 = await fetch(`${n2}/attestation/${s2}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o2), a2.status === 200 ? await a2.json() : void 0;
    }), w(this, "getVerifyUrl", (s2) => {
      let n2 = s2 || ue2;
      return Jt2.includes(n2) || (this.logger.info(`verify url: ${n2}, not included in trusted list, assigning default: ${ue2}`), n2 = ue2), n2;
    }), w(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s2 = this.startAbortTimer(import_time2.FIVE_SECONDS), n2 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s2), await n2.json();
      } catch (s2) {
        this.logger.warn(s2);
      }
    }), w(this, "persistPublicKey", async (s2) => {
      this.logger.debug("persisting public key to local storage", s2), await this.store.setItem(this.storeKey, s2), this.publicKey = s2;
    }), w(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w(this, "isValidJwtAttestation", async (s2) => {
      const n2 = await this.getPublicKey();
      try {
        if (n2) return this.validateAttestation(s2, n2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
      const o2 = await this.fetchAndPersistPublicKey();
      try {
        if (o2) return this.validateAttestation(s2, o2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
    }), w(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n2) => {
        const o2 = await this.fetchPublicKey();
        o2 && (await this.persistPublicKey(o2), n2(o2));
      });
      const s2 = await this.fetchPromise;
      return this.fetchPromise = void 0, s2;
    }), w(this, "validateAttestation", (s2, n2) => {
      const o2 = zc(s2, n2.publicKey), a2 = { hasExpired: (0, import_time2.toMiliseconds)(o2.exp) < Date.now(), payload: o2 };
      if (a2.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a2.payload.origin, isScam: a2.payload.isScam, isVerified: a2.payload.isVerified };
    }), this.logger = E(t2, this.name), this.abortController = new AbortController(), this.isDevEnv = Ii(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y(this.logger);
  }
  startAbortTimer(e2) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time2.toMiliseconds)(e2));
  }
};
var Bo2 = Object.defineProperty;
var Vo = (r2, e2, t2) => e2 in r2 ? Bo2(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var Fi2 = (r2, e2, t2) => Vo(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Mi2 = class extends O {
  constructor(e2, t2) {
    super(e2, t2), this.projectId = e2, this.logger = t2, Fi2(this, "context", Xt2), Fi2(this, "registerDeviceToken", async (i4) => {
      const { clientId: s2, token: n2, notificationType: o2, enableEncrypted: a2 = false } = i4, c4 = `${Zt}/${this.projectId}/clients`;
      await fetch(c4, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s2, type: o2, token: n2, always_raw: a2 }) });
    }), this.logger = E(t2, this.context);
  }
};
var qo = Object.defineProperty;
var Ki2 = Object.getOwnPropertySymbols;
var Go2 = Object.prototype.hasOwnProperty;
var Wo2 = Object.prototype.propertyIsEnumerable;
var Ze2 = (r2, e2, t2) => e2 in r2 ? qo(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var be2 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) Go2.call(e2, t2) && Ze2(r2, t2, e2[t2]);
  if (Ki2) for (var t2 of Ki2(e2)) Wo2.call(e2, t2) && Ze2(r2, t2, e2[t2]);
  return r2;
};
var E2 = (r2, e2, t2) => Ze2(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Bi2 = class extends R {
  constructor(e2, t2, i4 = true) {
    super(e2, t2, i4), this.core = e2, this.logger = t2, E2(this, "context", ei2), E2(this, "storagePrefix", B), E2(this, "storageVersion", Qt2), E2(this, "events", /* @__PURE__ */ new Map()), E2(this, "shouldPersist", false), E2(this, "init", async () => {
      if (!Ii()) try {
        const s2 = { eventId: Bi(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Mn(this.core.relayer.protocol, this.core.relayer.version, _e2) } } };
        await this.sendEvent([s2]);
      } catch (s2) {
        this.logger.warn(s2);
      }
    }), E2(this, "createEvent", (s2) => {
      const { event: n2 = "ERROR", type: o2 = "", properties: { topic: a2, trace: c4 } } = s2, h5 = Bi(), l4 = this.core.projectId || "", d3 = Date.now(), g = be2({ eventId: h5, timestamp: d3, props: { event: n2, type: o2, properties: { topic: a2, trace: c4 } }, bundleId: l4, domain: this.getAppDomain() }, this.setMethods(h5));
      return this.telemetryEnabled && (this.events.set(h5, g), this.shouldPersist = true), g;
    }), E2(this, "getEvent", (s2) => {
      const { eventId: n2, topic: o2 } = s2;
      if (n2) return this.events.get(n2);
      const a2 = Array.from(this.events.values()).find((c4) => c4.props.properties.topic === o2);
      if (a2) return be2(be2({}, a2), this.setMethods(a2.eventId));
    }), E2(this, "deleteEvent", (s2) => {
      const { eventId: n2 } = s2;
      this.events.delete(n2), this.shouldPersist = true;
    }), E2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s2) => {
          (0, import_time2.fromMiliseconds)(Date.now()) - (0, import_time2.fromMiliseconds)(s2.timestamp) > ti && (this.events.delete(s2.eventId), this.shouldPersist = true);
        });
      });
    }), E2(this, "setMethods", (s2) => ({ addTrace: (n2) => this.addTrace(s2, n2), setError: (n2) => this.setError(s2, n2) })), E2(this, "addTrace", (s2, n2) => {
      const o2 = this.events.get(s2);
      o2 && (o2.props.properties.trace.push(n2), this.events.set(s2, o2), this.shouldPersist = true);
    }), E2(this, "setError", (s2, n2) => {
      const o2 = this.events.get(s2);
      o2 && (o2.props.type = n2, o2.timestamp = Date.now(), this.events.set(s2, o2), this.shouldPersist = true);
    }), E2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E2(this, "restore", async () => {
      try {
        const s2 = await this.core.storage.getItem(this.storageKey) || [];
        if (!s2.length) return;
        s2.forEach((n2) => {
          this.events.set(n2.eventId, be2(be2({}, n2), this.setMethods(n2.eventId)));
        });
      } catch (s2) {
        this.logger.warn(s2);
      }
    }), E2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s2 = [];
      for (const [n2, o2] of this.events) o2.props.type && s2.push(o2);
      if (s2.length !== 0) try {
        if ((await this.sendEvent(s2)).ok) for (const n2 of s2) this.events.delete(n2.eventId), this.shouldPersist = true;
      } catch (n2) {
        this.logger.warn(n2);
      }
    }), E2(this, "sendEvent", async (s2) => {
      const n2 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e2}${n2}`, { method: "POST", body: JSON.stringify(s2) });
    }), E2(this, "getAppDomain", () => Pn().url), this.logger = E(t2, this.context), this.telemetryEnabled = i4, i4 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Ho = Object.defineProperty;
var Vi2 = Object.getOwnPropertySymbols;
var Yo2 = Object.prototype.hasOwnProperty;
var Jo2 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r2, e2, t2) => e2 in r2 ? Ho(r2, e2, { enumerable: true, configurable: true, writable: true, value: t2 }) : r2[e2] = t2;
var qi2 = (r2, e2) => {
  for (var t2 in e2 || (e2 = {})) Yo2.call(e2, t2) && Qe3(r2, t2, e2[t2]);
  if (Vi2) for (var t2 of Vi2(e2)) Jo2.call(e2, t2) && Qe3(r2, t2, e2[t2]);
  return r2;
};
var v2 = (r2, e2, t2) => Qe3(r2, typeof e2 != "symbol" ? e2 + "" : e2, t2);
var Te = class _Te extends h3 {
  constructor(e2) {
    var t2;
    super(e2), v2(this, "protocol", ze2), v2(this, "version", Le), v2(this, "name", he2), v2(this, "relayUrl"), v2(this, "projectId"), v2(this, "customStoragePrefix"), v2(this, "events", new import_events3.EventEmitter()), v2(this, "logger"), v2(this, "heartbeat"), v2(this, "relayer"), v2(this, "crypto"), v2(this, "storage"), v2(this, "history"), v2(this, "expirer"), v2(this, "pairing"), v2(this, "verify"), v2(this, "echoClient"), v2(this, "linkModeSupportedApps"), v2(this, "eventClient"), v2(this, "initialized", false), v2(this, "logChunkController"), v2(this, "on", (a2, c4) => this.events.on(a2, c4)), v2(this, "once", (a2, c4) => this.events.once(a2, c4)), v2(this, "off", (a2, c4) => this.events.off(a2, c4)), v2(this, "removeListener", (a2, c4) => this.events.removeListener(a2, c4)), v2(this, "dispatchEnvelope", ({ topic: a2, message: c4, sessionExists: h5 }) => {
      if (!a2 || !c4) return;
      const l4 = { topic: a2, message: c4, publishedAt: Date.now(), transportType: Q.link_mode };
      this.relayer.onLinkMessageEvent(l4, { sessionExists: h5 });
    });
    const i4 = this.getGlobalCore(e2 == null ? void 0 : e2.customStoragePrefix);
    if (i4) try {
      return this.customStoragePrefix = i4.customStoragePrefix, this.logger = i4.logger, this.heartbeat = i4.heartbeat, this.crypto = i4.crypto, this.history = i4.history, this.expirer = i4.expirer, this.storage = i4.storage, this.relayer = i4.relayer, this.pairing = i4.pairing, this.verify = i4.verify, this.echoClient = i4.echoClient, this.linkModeSupportedApps = i4.linkModeSupportedApps, this.eventClient = i4.eventClient, this.initialized = i4.initialized, this.logChunkController = i4.logChunkController, i4;
    } catch (a2) {
      console.warn("Failed to copy global core", a2);
    }
    this.projectId = e2 == null ? void 0 : e2.projectId, this.relayUrl = (e2 == null ? void 0 : e2.relayUrl) || Ue, this.customStoragePrefix = e2 != null && e2.customStoragePrefix ? `:${e2.customStoragePrefix}` : "";
    const s2 = k({ level: typeof (e2 == null ? void 0 : e2.logger) == "string" && e2.logger ? e2.logger : Et2.logger, name: he2 }), { logger: n2, chunkLoggerController: o2 } = A({ opts: s2, maxSizeInBytes: e2 == null ? void 0 : e2.maxLogBlobSizeInBytes, loggerOverride: e2 == null ? void 0 : e2.logger });
    this.logChunkController = o2, (t2 = this.logChunkController) != null && t2.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a2, c4;
      (a2 = this.logChunkController) != null && a2.downloadLogsBlobInBrowser && ((c4 = this.logChunkController) == null || c4.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E(n2, this.name), this.heartbeat = new i(), this.crypto = new vi2(this, this.logger, e2 == null ? void 0 : e2.keychain), this.history = new ki2(this, this.logger), this.expirer = new ji2(this, this.logger), this.storage = e2 != null && e2.storage ? e2.storage : new h(qi2(qi2({}, It2), e2 == null ? void 0 : e2.storageOptions)), this.relayer = new Si2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Li2(this, this.logger), this.verify = new Ui2(this, this.logger, this.storage), this.echoClient = new Mi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi2(this, this.logger, e2 == null ? void 0 : e2.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e2) {
    const t2 = new _Te(e2);
    await t2.initialize();
    const i4 = await t2.crypto.getClientId();
    return await t2.storage.setItem(jt2, i4), t2;
  }
  get context() {
    return y(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e2;
    return (e2 = this.logChunkController) == null ? void 0 : e2.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e2) {
    this.linkModeSupportedApps.includes(e2) || (this.linkModeSupportedApps.push(e2), await this.storage.setItem(Fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e2) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e2), this.logger.error(e2.message), e2;
    }
  }
  getGlobalCore(e2 = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t2 = `_walletConnectCore_${e2}`, i4 = `${t2}_count`;
      return globalThis[i4] = (globalThis[i4] || 0) + 1, globalThis[i4] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i4]} times.`), globalThis[t2];
    } catch (t2) {
      console.warn("Failed to get global WalletConnect core", t2);
      return;
    }
  }
  setGlobalCore(e2) {
    var t2;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i4 = `_walletConnectCore_${((t2 = e2.opts) == null ? void 0 : t2.customStoragePrefix) || ""}`;
      globalThis[i4] = e2;
    } catch (i4) {
      console.warn("Failed to set global WalletConnect core", i4);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var Xo2 = Te;

// node_modules/@walletconnect/universal-provider/node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_events4 = __toESM(require_events());
var De2 = "wc";
var Le2 = 2;
var ke3 = "client";
var we2 = `${De2}@${Le2}:${ke3}:`;
var me2 = { name: ke3, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Me3 = "WALLETCONNECT_DEEPLINK_CHOICE";
var pt2 = "proposal";
var $e2 = "Proposal expired";
var ht2 = "session";
var J2 = import_time3.SEVEN_DAYS;
var dt2 = "engine";
var N = { wc_sessionPropose: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time3.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time3.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e3 = { min: import_time3.FIVE_MINUTES, max: import_time3.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var Ke3 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" } };
var ut2 = "request";
var gt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var yt2 = "wc";
var wt2 = "auth";
var mt2 = "authKeys";
var _t2 = "pairingTopics";
var Et3 = "requests";
var ae2 = `${yt2}@${1.5}:${wt2}:`;
var ce2 = `${ae2}:PUB_KEY`;
var vs2 = Object.defineProperty;
var Is2 = Object.defineProperties;
var Ts2 = Object.getOwnPropertyDescriptors;
var ft2 = Object.getOwnPropertySymbols;
var qs3 = Object.prototype.hasOwnProperty;
var Ps2 = Object.prototype.propertyIsEnumerable;
var Ue2 = (S4, n2, e2) => n2 in S4 ? vs2(S4, n2, { enumerable: true, configurable: true, writable: true, value: e2 }) : S4[n2] = e2;
var v3 = (S4, n2) => {
  for (var e2 in n2 || (n2 = {})) qs3.call(n2, e2) && Ue2(S4, e2, n2[e2]);
  if (ft2) for (var e2 of ft2(n2)) Ps2.call(n2, e2) && Ue2(S4, e2, n2[e2]);
  return S4;
};
var b2 = (S4, n2) => Is2(S4, Ts2(n2));
var c3 = (S4, n2, e2) => Ue2(S4, typeof n2 != "symbol" ? n2 + "" : n2, e2);
var Ns2 = class extends V {
  constructor(n2) {
    super(n2), c3(this, "name", dt2), c3(this, "events", new import_events4.default()), c3(this, "initialized", false), c3(this, "requestQueue", { state: $2.idle, queue: [] }), c3(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c3(this, "requestQueueDelay", import_time3.ONE_SECOND), c3(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c3(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c3(this, "recentlyDeletedLimit", 200), c3(this, "relayMessageCache", []), c3(this, "pendingSessions", /* @__PURE__ */ new Map()), c3(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay)));
    }), c3(this, "connect", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t2 = b2(v3({}, e2), { requiredNamespaces: e2.requiredNamespaces || {}, optionalNamespaces: e2.optionalNamespaces || {} });
      await this.isValidConnect(t2), t2.optionalNamespaces = aa(t2.requiredNamespaces, t2.optionalNamespaces), t2.requiredNamespaces = {};
      const { pairingTopic: s2, requiredNamespaces: i4, optionalNamespaces: r2, sessionProperties: o2, scopedProperties: a2, relays: l4 } = t2;
      let p3 = s2, h5, u4 = false;
      try {
        if (p3) {
          const T2 = this.client.core.pairing.pairings.get(p3);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u4 = T2.active;
        }
      } catch (T2) {
        throw this.client.logger.error(`connect() -> pairing.get(${p3}) failed`), T2;
      }
      if (!p3 || !u4) {
        const { topic: T2, uri: K4 } = await this.client.core.pairing.create();
        p3 = T2, h5 = K4;
      }
      if (!p3) {
        const { message: T2 } = ht("NO_MATCHING_KEY", `connect() pairing topic: ${p3}`);
        throw new Error(T2);
      }
      const d3 = await this.client.core.crypto.generateKeyPair(), w2 = N.wc_sessionPropose.req.ttl || import_time3.FIVE_MINUTES, m2 = Ei(w2), f7 = b2(v3(v3({ requiredNamespaces: i4, optionalNamespaces: r2, relays: l4 ?? [{ protocol: xt2 }], proposer: { publicKey: d3, metadata: this.client.metadata }, expiryTimestamp: m2, pairingTopic: p3 }, o2 && { sessionProperties: o2 }), a2 && { scopedProperties: a2 }), { id: payloadId() }), _ = xi("session_connect", f7.id), { reject: g, resolve: A4, done: D2 } = gi(w2, $e2), I3 = ({ id: T2 }) => {
        T2 === f7.id && (this.client.events.off("proposal_expire", I3), this.pendingSessions.delete(f7.id), this.events.emit(_, { error: { message: $e2, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I3), this.events.once(_, ({ error: T2, session: K4 }) => {
        this.client.events.off("proposal_expire", I3), T2 ? g(T2) : K4 && A4(K4);
      }), await this.sendRequest({ topic: p3, method: "wc_sessionPropose", params: f7, throwOnFailedPublish: true, clientRpcId: f7.id }), await this.setProposal(f7.id, f7), { uri: h5, approval: D2 };
    }), c3(this, "pair", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e2);
      } catch (t2) {
        throw this.client.logger.error("pair() failed"), t2;
      }
    }), c3(this, "approve", async (e2) => {
      var t2, s2, i4;
      const r2 = this.client.core.eventClient.createEvent({ properties: { topic: (t2 = e2 == null ? void 0 : e2.id) == null ? void 0 : t2.toString(), trace: [er2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q3) {
        throw r2.setError(tr2.no_internet_connection), q3;
      }
      try {
        await this.isValidProposalId(e2 == null ? void 0 : e2.id);
      } catch (q3) {
        throw this.client.logger.error(`approve() -> proposal.get(${e2 == null ? void 0 : e2.id}) failed`), r2.setError(tr2.proposal_not_found), q3;
      }
      try {
        await this.isValidApprove(e2);
      } catch (q3) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r2.setError(tr2.session_approve_namespace_validation_failure), q3;
      }
      const { id: o2, relayProtocol: a2, namespaces: l4, sessionProperties: p3, scopedProperties: h5, sessionConfig: u4 } = e2, d3 = this.client.proposal.get(o2);
      this.client.core.eventClient.deleteEvent({ eventId: r2.eventId });
      const { pairingTopic: w2, proposer: m2, requiredNamespaces: f7, optionalNamespaces: _ } = d3;
      let g = (s2 = this.client.core.eventClient) == null ? void 0 : s2.getEvent({ topic: w2 });
      g || (g = (i4 = this.client.core.eventClient) == null ? void 0 : i4.createEvent({ type: er2.session_approve_started, properties: { topic: w2, trace: [er2.session_approve_started, er2.session_namespaces_validation_success] } }));
      const A4 = await this.client.core.crypto.generateKeyPair(), D2 = m2.publicKey, I3 = await this.client.core.crypto.generateSharedKey(A4, D2), T2 = v3(v3(v3({ relay: { protocol: a2 ?? "irn" }, namespaces: l4, controller: { publicKey: A4, metadata: this.client.metadata }, expiry: Ei(J2) }, p3 && { sessionProperties: p3 }), h5 && { scopedProperties: h5 }), u4 && { sessionConfig: u4 }), K4 = Q.relay;
      g.addTrace(er2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I3, { transportType: K4 });
      } catch (q3) {
        throw g.setError(tr2.subscribe_session_topic_failure), q3;
      }
      g.addTrace(er2.subscribe_session_topic_success);
      const fe3 = b2(v3({}, T2), { topic: I3, requiredNamespaces: f7, optionalNamespaces: _, pairingTopic: w2, acknowledged: false, self: T2.controller, peer: { publicKey: m2.publicKey, metadata: m2.metadata }, controller: A4, transportType: Q.relay });
      await this.client.session.set(I3, fe3), g.addTrace(er2.store_session);
      try {
        g.addTrace(er2.publishing_session_settle), await this.sendRequest({ topic: I3, method: "wc_sessionSettle", params: T2, throwOnFailedPublish: true }).catch((q3) => {
          throw g == null ? void 0 : g.setError(tr2.session_settle_publish_failure), q3;
        }), g.addTrace(er2.session_settle_publish_success), g.addTrace(er2.publishing_session_approve), await this.sendResult({ id: o2, topic: w2, result: { relay: { protocol: a2 ?? "irn" }, responderPublicKey: A4 }, throwOnFailedPublish: true }).catch((q3) => {
          throw g == null ? void 0 : g.setError(tr2.session_approve_publish_failure), q3;
        }), g.addTrace(er2.session_approve_publish_success);
      } catch (q3) {
        throw this.client.logger.error(q3), this.client.session.delete(I3, Nt("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I3), q3;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: g.eventId }), await this.client.core.pairing.updateMetadata({ topic: w2, metadata: m2.metadata }), await this.client.proposal.delete(o2, Nt("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: w2 }), await this.setExpiry(I3, Ei(J2)), { topic: I3, acknowledged: () => Promise.resolve(this.client.session.get(I3)) };
    }), c3(this, "reject", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e2);
      } catch (r2) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r2;
      }
      const { id: t2, reason: s2 } = e2;
      let i4;
      try {
        i4 = this.client.proposal.get(t2).pairingTopic;
      } catch (r2) {
        throw this.client.logger.error(`reject() -> proposal.get(${t2}) failed`), r2;
      }
      i4 && (await this.sendError({ id: t2, topic: i4, error: s2, rpcOpts: N.wc_sessionPropose.reject }), await this.client.proposal.delete(t2, Nt("USER_DISCONNECTED")));
    }), c3(this, "update", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e2);
      } catch (h5) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h5;
      }
      const { topic: t2, namespaces: s2 } = e2, { done: i4, resolve: r2, reject: o2 } = gi(), a2 = payloadId(), l4 = getBigIntRpcId().toString(), p3 = this.client.session.get(t2).namespaces;
      return this.events.once(xi("session_update", a2), ({ error: h5 }) => {
        h5 ? o2(h5) : r2();
      }), await this.client.session.update(t2, { namespaces: s2 }), await this.sendRequest({ topic: t2, method: "wc_sessionUpdate", params: { namespaces: s2 }, throwOnFailedPublish: true, clientRpcId: a2, relayRpcId: l4 }).catch((h5) => {
        this.client.logger.error(h5), this.client.session.update(t2, { namespaces: p3 }), o2(h5);
      }), { acknowledged: i4 };
    }), c3(this, "extend", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e2);
      } catch (a2) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a2;
      }
      const { topic: t2 } = e2, s2 = payloadId(), { done: i4, resolve: r2, reject: o2 } = gi();
      return this.events.once(xi("session_extend", s2), ({ error: a2 }) => {
        a2 ? o2(a2) : r2();
      }), await this.setExpiry(t2, Ei(J2)), this.sendRequest({ topic: t2, method: "wc_sessionExtend", params: {}, clientRpcId: s2, throwOnFailedPublish: true }).catch((a2) => {
        o2(a2);
      }), { acknowledged: i4 };
    }), c3(this, "request", async (e2) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e2);
      } catch (_) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), _;
      }
      const { chainId: t2, request: s2, topic: i4, expiry: r2 = N.wc_sessionRequest.req.ttl } = e2, o2 = this.client.session.get(i4);
      (o2 == null ? void 0 : o2.transportType) === Q.relay && await this.confirmOnlineStateOrThrow();
      const a2 = payloadId(), l4 = getBigIntRpcId().toString(), { done: p3, resolve: h5, reject: u4 } = gi(r2, "Request expired. Please try again.");
      this.events.once(xi("session_request", a2), ({ error: _, result: g }) => {
        _ ? u4(_) : h5(g);
      });
      const d3 = "wc_sessionRequest", w2 = this.getAppLinkIfEnabled(o2.peer.metadata, o2.transportType);
      if (w2) return await this.sendRequest({ clientRpcId: a2, relayRpcId: l4, topic: i4, method: d3, params: { request: b2(v3({}, s2), { expiryTimestamp: Ei(r2) }), chainId: t2 }, expiry: r2, throwOnFailedPublish: true, appLink: w2 }).catch((_) => u4(_)), this.client.events.emit("session_request_sent", { topic: i4, request: s2, chainId: t2, id: a2 }), await p3();
      const m2 = { request: b2(v3({}, s2), { expiryTimestamp: Ei(r2) }), chainId: t2 }, f7 = this.shouldSetTVF(d3, m2);
      return await Promise.all([new Promise(async (_) => {
        await this.sendRequest(v3({ clientRpcId: a2, relayRpcId: l4, topic: i4, method: d3, params: m2, expiry: r2, throwOnFailedPublish: true }, f7 && { tvf: this.getTVFParams(a2, m2) })).catch((g) => u4(g)), this.client.events.emit("session_request_sent", { topic: i4, request: s2, chainId: t2, id: a2 }), _();
      }), new Promise(async (_) => {
        var g;
        if (!((g = o2.sessionConfig) != null && g.disableDeepLink)) {
          const A4 = await Oi(this.client.core.storage, Me3);
          await Si({ id: a2, topic: i4, wcDeepLink: A4 });
        }
        _();
      }), p3()]).then((_) => _[2]);
    }), c3(this, "respond", async (e2) => {
      this.isInitialized(), await this.isValidRespond(e2);
      const { topic: t2, response: s2 } = e2, { id: i4 } = s2, r2 = this.client.session.get(t2);
      r2.transportType === Q.relay && await this.confirmOnlineStateOrThrow();
      const o2 = this.getAppLinkIfEnabled(r2.peer.metadata, r2.transportType);
      isJsonRpcResult(s2) ? await this.sendResult({ id: i4, topic: t2, result: s2.result, throwOnFailedPublish: true, appLink: o2 }) : isJsonRpcError(s2) && await this.sendError({ id: i4, topic: t2, error: s2.error, appLink: o2 }), this.cleanupAfterResponse(e2);
    }), c3(this, "ping", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e2);
      } catch (s2) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s2;
      }
      const { topic: t2 } = e2;
      if (this.client.session.keys.includes(t2)) {
        const s2 = payloadId(), i4 = getBigIntRpcId().toString(), { done: r2, resolve: o2, reject: a2 } = gi();
        this.events.once(xi("session_ping", s2), ({ error: l4 }) => {
          l4 ? a2(l4) : o2();
        }), await Promise.all([this.sendRequest({ topic: t2, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s2, relayRpcId: i4 }), r2()]);
      } else this.client.core.pairing.pairings.keys.includes(t2) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: t2 }));
    }), c3(this, "emit", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e2);
      const { topic: t2, event: s2, chainId: i4 } = e2, r2 = getBigIntRpcId().toString(), o2 = payloadId();
      await this.sendRequest({ topic: t2, method: "wc_sessionEvent", params: { event: s2, chainId: i4 }, throwOnFailedPublish: true, relayRpcId: r2, clientRpcId: o2 });
    }), c3(this, "disconnect", async (e2) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e2);
      const { topic: t2 } = e2;
      if (this.client.session.keys.includes(t2)) await this.sendRequest({ topic: t2, method: "wc_sessionDelete", params: Nt("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t2, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t2)) await this.client.core.pairing.disconnect({ topic: t2 });
      else {
        const { message: s2 } = ht("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t2}`);
        throw new Error(s2);
      }
    }), c3(this, "find", (e2) => (this.isInitialized(), this.client.session.getAll().filter((t2) => ua(t2, e2)))), c3(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c3(this, "authenticate", async (e2, t2) => {
      var s2;
      this.isInitialized(), this.isValidAuthenticate(e2);
      const i4 = t2 && this.client.core.linkModeSupportedApps.includes(t2) && ((s2 = this.client.metadata.redirect) == null ? void 0 : s2.linkMode), r2 = i4 ? Q.link_mode : Q.relay;
      r2 === Q.relay && await this.confirmOnlineStateOrThrow();
      const { chains: o2, statement: a2 = "", uri: l4, domain: p3, nonce: h5, type: u4, exp: d3, nbf: w2, methods: m2 = [], expiry: f7 } = e2, _ = [...e2.resources || []], { topic: g, uri: A4 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r2 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: g, uri: A4 } });
      const D2 = await this.client.core.crypto.generateKeyPair(), I3 = Pc(D2);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: I3, publicKey: D2 }), this.client.auth.pairingTopics.set(I3, { topic: I3, pairingTopic: g })]), await this.client.core.relayer.subscribe(I3, { transportType: r2 }), this.client.logger.info(`sending request to new pairing topic: ${g}`), m2.length > 0) {
        const { namespace: x2 } = Ne(o2[0]);
        let L3 = fs(x2, "request", m2);
        pe(_) && (L3 = ls(L3, _.pop())), _.push(L3);
      }
      const T2 = f7 && f7 > N.wc_sessionAuthenticate.req.ttl ? f7 : N.wc_sessionAuthenticate.req.ttl, K4 = { authPayload: { type: u4 ?? "caip122", chains: o2, statement: a2, aud: l4, domain: p3, version: "1", nonce: h5, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d3, nbf: w2, resources: _ }, requester: { publicKey: D2, metadata: this.client.metadata }, expiryTimestamp: Ei(T2) }, fe3 = { eip155: { chains: o2, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m2])], events: ["chainChanged", "accountsChanged"] } }, q3 = { requiredNamespaces: {}, optionalNamespaces: fe3, relays: [{ protocol: "irn" }], pairingTopic: g, proposer: { publicKey: D2, metadata: this.client.metadata }, expiryTimestamp: Ei(N.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Rt4, resolve: je4, reject: Se4 } = gi(T2, "Request expired"), te3 = payloadId(), le4 = xi("session_connect", q3.id), Re2 = xi("session_request", te3), pe4 = async ({ error: x2, session: L3 }) => {
        this.events.off(Re2, ve3), x2 ? Se4(x2) : L3 && je4({ session: L3 });
      }, ve3 = async (x2) => {
        var L3, Fe4, Qe5;
        if (await this.deletePendingAuthRequest(te3, { message: "fulfilled", code: 0 }), x2.error) {
          const ie4 = Nt("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return x2.error.code === ie4.code ? void 0 : (this.events.off(le4, pe4), Se4(x2.error.message));
        }
        await this.deleteProposal(q3.id), this.events.off(le4, pe4);
        const { cacaos: He4, responder: Q3 } = x2.result, Te3 = [], ze4 = [];
        for (const ie4 of He4) {
          await is({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se4(Nt("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe4 } = ie4, Pe4 = pe(qe4.resources), Ye4 = [dr(qe4.iss)], vt2 = De(qe4.iss);
          if (Pe4) {
            const Ne3 = ds(Pe4), It4 = hs(Pe4);
            Te3.push(...Ne3), Ye4.push(...It4);
          }
          for (const Ne3 of Ye4) ze4.push(`${Ne3}:${vt2}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(D2, Q3.publicKey);
        let he4;
        Te3.length > 0 && (he4 = { topic: se4, acknowledged: true, self: { publicKey: D2, metadata: this.client.metadata }, peer: Q3, controller: Q3.publicKey, expiry: Ei(J2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: g, namespaces: ca([...new Set(Te3)], [...new Set(ze4)]), transportType: r2 }, await this.client.core.relayer.subscribe(se4, { transportType: r2 }), await this.client.session.set(se4, he4), g && await this.client.core.pairing.updateMetadata({ topic: g, metadata: Q3.metadata }), he4 = this.client.session.get(se4)), (L3 = this.client.metadata.redirect) != null && L3.linkMode && (Fe4 = Q3.metadata.redirect) != null && Fe4.linkMode && (Qe5 = Q3.metadata.redirect) != null && Qe5.universal && t2 && (this.client.core.addLinkModeSupportedApp(Q3.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q.link_mode })), je4({ auths: He4, session: he4 });
      };
      this.events.once(le4, pe4), this.events.once(Re2, ve3);
      let Ie4;
      try {
        if (i4) {
          const x2 = formatJsonRpcRequest("wc_sessionAuthenticate", K4, te3);
          this.client.core.history.set(g, x2);
          const L3 = await this.client.core.crypto.encode("", x2, { type: re, encoding: xe });
          Ie4 = Xc(t2, g, L3);
        } else await Promise.all([this.sendRequest({ topic: g, method: "wc_sessionAuthenticate", params: K4, expiry: e2.expiry, throwOnFailedPublish: true, clientRpcId: te3 }), this.sendRequest({ topic: g, method: "wc_sessionPropose", params: q3, expiry: N.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q3.id })]);
      } catch (x2) {
        throw this.events.off(le4, pe4), this.events.off(Re2, ve3), x2;
      }
      return await this.setProposal(q3.id, q3), await this.setAuthRequest(te3, { request: b2(v3({}, K4), { verifyContext: {} }), pairingTopic: g, transportType: r2 }), { uri: Ie4 ?? A4, response: Rt4 };
    }), c3(this, "approveSessionAuthenticate", async (e2) => {
      const { id: t2, auths: s2 } = e2, i4 = this.client.core.eventClient.createEvent({ properties: { topic: t2.toString(), trace: [ir2.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (f7) {
        throw i4.setError(sr2.no_internet_connection), f7;
      }
      const r2 = this.getPendingAuthRequest(t2);
      if (!r2) throw i4.setError(sr2.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t2}`);
      const o2 = r2.transportType || Q.relay;
      o2 === Q.relay && await this.confirmOnlineStateOrThrow();
      const a2 = r2.requester.publicKey, l4 = await this.client.core.crypto.generateKeyPair(), p3 = Pc(a2), h5 = { type: Ft, receiverPublicKey: a2, senderPublicKey: l4 }, u4 = [], d3 = [];
      for (const f7 of s2) {
        if (!await is({ cacao: f7, projectId: this.client.core.projectId })) {
          i4.setError(sr2.invalid_cacao);
          const I3 = Nt("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t2, topic: p3, error: I3, encodeOpts: h5 }), new Error(I3.message);
        }
        i4.addTrace(ir2.cacaos_verified);
        const { p: _ } = f7, g = pe(_.resources), A4 = [dr(_.iss)], D2 = De(_.iss);
        if (g) {
          const I3 = ds(g), T2 = hs(g);
          u4.push(...I3), A4.push(...T2);
        }
        for (const I3 of A4) d3.push(`${I3}:${D2}`);
      }
      const w2 = await this.client.core.crypto.generateSharedKey(l4, a2);
      i4.addTrace(ir2.create_authenticated_session_topic);
      let m2;
      if ((u4 == null ? void 0 : u4.length) > 0) {
        m2 = { topic: w2, acknowledged: true, self: { publicKey: l4, metadata: this.client.metadata }, peer: { publicKey: a2, metadata: r2.requester.metadata }, controller: a2, expiry: Ei(J2), authentication: s2, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r2.pairingTopic, namespaces: ca([...new Set(u4)], [...new Set(d3)]), transportType: o2 }, i4.addTrace(ir2.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w2, { transportType: o2 });
        } catch (f7) {
          throw i4.setError(sr2.subscribe_authenticated_session_topic_failure), f7;
        }
        i4.addTrace(ir2.subscribe_authenticated_session_topic_success), await this.client.session.set(w2, m2), i4.addTrace(ir2.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r2.pairingTopic, metadata: r2.requester.metadata });
      }
      i4.addTrace(ir2.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p3, id: t2, result: { cacaos: s2, responder: { publicKey: l4, metadata: this.client.metadata } }, encodeOpts: h5, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r2.requester.metadata, o2) });
      } catch (f7) {
        throw i4.setError(sr2.authenticated_session_approve_publish_failure), f7;
      }
      return await this.client.auth.requests.delete(t2, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r2.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i4.eventId }), { session: m2 };
    }), c3(this, "rejectSessionAuthenticate", async (e2) => {
      this.isInitialized();
      const { id: t2, reason: s2 } = e2, i4 = this.getPendingAuthRequest(t2);
      if (!i4) throw new Error(`Could not find pending auth request with id ${t2}`);
      i4.transportType === Q.relay && await this.confirmOnlineStateOrThrow();
      const r2 = i4.requester.publicKey, o2 = await this.client.core.crypto.generateKeyPair(), a2 = Pc(r2), l4 = { type: Ft, receiverPublicKey: r2, senderPublicKey: o2 };
      await this.sendError({ id: t2, topic: a2, error: s2, encodeOpts: l4, rpcOpts: N.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i4.requester.metadata, i4.transportType) }), await this.client.auth.requests.delete(t2, { message: "rejected", code: 0 }), await this.client.proposal.delete(t2, Nt("USER_DISCONNECTED"));
    }), c3(this, "formatAuthMessage", (e2) => {
      this.isInitialized();
      const { request: t2, iss: s2 } = e2;
      return hr(t2, s2);
    }), c3(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e2 = this.relayMessageCache.shift();
          e2 && await this.onRelayMessage(e2);
        } catch (e2) {
          this.client.logger.error(e2);
        }
      }, 50);
    }), c3(this, "cleanupDuplicatePairings", async (e2) => {
      if (e2.pairingTopic) try {
        const t2 = this.client.core.pairing.pairings.get(e2.pairingTopic), s2 = this.client.core.pairing.pairings.getAll().filter((i4) => {
          var r2, o2;
          return ((r2 = i4.peerMetadata) == null ? void 0 : r2.url) && ((o2 = i4.peerMetadata) == null ? void 0 : o2.url) === e2.peer.metadata.url && i4.topic && i4.topic !== t2.topic;
        });
        if (s2.length === 0) return;
        this.client.logger.info(`Cleaning up ${s2.length} duplicate pairing(s)`), await Promise.all(s2.map((i4) => this.client.core.pairing.disconnect({ topic: i4.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t2) {
        this.client.logger.error(t2);
      }
    }), c3(this, "deleteSession", async (e2) => {
      var t2;
      const { topic: s2, expirerHasDeleted: i4 = false, emitEvent: r2 = true, id: o2 = 0 } = e2, { self: a2 } = this.client.session.get(s2);
      await this.client.core.relayer.unsubscribe(s2), await this.client.session.delete(s2, Nt("USER_DISCONNECTED")), this.addToRecentlyDeleted(s2, "session"), this.client.core.crypto.keychain.has(a2.publicKey) && await this.client.core.crypto.deleteKeyPair(a2.publicKey), this.client.core.crypto.keychain.has(s2) && await this.client.core.crypto.deleteSymKey(s2), i4 || this.client.core.expirer.del(s2), this.client.core.storage.removeItem(Me3).catch((l4) => this.client.logger.warn(l4)), this.getPendingSessionRequests().forEach((l4) => {
        l4.topic === s2 && this.deletePendingSessionRequest(l4.id, Nt("USER_DISCONNECTED"));
      }), s2 === ((t2 = this.sessionRequestQueue.queue[0]) == null ? void 0 : t2.topic) && (this.sessionRequestQueue.state = $2.idle), r2 && this.client.events.emit("session_delete", { id: o2, topic: s2 });
    }), c3(this, "deleteProposal", async (e2, t2) => {
      if (t2) try {
        const s2 = this.client.proposal.get(e2), i4 = this.client.core.eventClient.getEvent({ topic: s2.pairingTopic });
        i4 == null ? void 0 : i4.setError(tr2.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e2, Nt("USER_DISCONNECTED")), t2 ? Promise.resolve() : this.client.core.expirer.del(e2)]), this.addToRecentlyDeleted(e2, "proposal");
    }), c3(this, "deletePendingSessionRequest", async (e2, t2, s2 = false) => {
      await Promise.all([this.client.pendingRequest.delete(e2, t2), s2 ? Promise.resolve() : this.client.core.expirer.del(e2)]), this.addToRecentlyDeleted(e2, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i4) => i4.id !== e2), s2 && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: e2 }));
    }), c3(this, "deletePendingAuthRequest", async (e2, t2, s2 = false) => {
      await Promise.all([this.client.auth.requests.delete(e2, t2), s2 ? Promise.resolve() : this.client.core.expirer.del(e2)]);
    }), c3(this, "setExpiry", async (e2, t2) => {
      this.client.session.keys.includes(e2) && (this.client.core.expirer.set(e2, t2), await this.client.session.update(e2, { expiry: t2 }));
    }), c3(this, "setProposal", async (e2, t2) => {
      this.client.core.expirer.set(e2, Ei(N.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e2, t2);
    }), c3(this, "setAuthRequest", async (e2, t2) => {
      const { request: s2, pairingTopic: i4, transportType: r2 = Q.relay } = t2;
      this.client.core.expirer.set(e2, s2.expiryTimestamp), await this.client.auth.requests.set(e2, { authPayload: s2.authPayload, requester: s2.requester, expiryTimestamp: s2.expiryTimestamp, id: e2, pairingTopic: i4, verifyContext: s2.verifyContext, transportType: r2 });
    }), c3(this, "setPendingSessionRequest", async (e2) => {
      const { id: t2, topic: s2, params: i4, verifyContext: r2 } = e2, o2 = i4.request.expiryTimestamp || Ei(N.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t2, o2), await this.client.pendingRequest.set(t2, { id: t2, topic: s2, params: i4, verifyContext: r2 });
    }), c3(this, "sendRequest", async (e2) => {
      const { topic: t2, method: s2, params: i4, expiry: r2, relayRpcId: o2, clientRpcId: a2, throwOnFailedPublish: l4, appLink: p3, tvf: h5 } = e2, u4 = formatJsonRpcRequest(s2, i4, a2);
      let d3;
      const w2 = !!p3;
      try {
        const _ = w2 ? xe : qt;
        d3 = await this.client.core.crypto.encode(t2, u4, { encoding: _ });
      } catch (_) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t2} failed`), _;
      }
      let m2;
      if (gt2.includes(s2)) {
        const _ = kc(JSON.stringify(u4)), g = kc(d3);
        m2 = await this.client.core.verify.register({ id: g, decryptedId: _ });
      }
      const f7 = N[s2].req;
      if (f7.attestation = m2, r2 && (f7.ttl = r2), o2 && (f7.id = o2), this.client.core.history.set(t2, u4), w2) {
        const _ = Xc(p3, t2, d3);
        await global.Linking.openURL(_, this.client.name);
      } else {
        const _ = N[s2].req;
        r2 && (_.ttl = r2), o2 && (_.id = o2), _.tvf = b2(v3({}, h5), { correlationId: u4.id }), l4 ? (_.internal = b2(v3({}, _.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t2, d3, _)) : this.client.core.relayer.publish(t2, d3, _).catch((g) => this.client.logger.error(g));
      }
      return u4.id;
    }), c3(this, "sendResult", async (e2) => {
      const { id: t2, topic: s2, result: i4, throwOnFailedPublish: r2, encodeOpts: o2, appLink: a2 } = e2, l4 = formatJsonRpcResult(t2, i4);
      let p3;
      const h5 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w2 = h5 ? xe : qt;
        p3 = await this.client.core.crypto.encode(s2, l4, b2(v3({}, o2 || {}), { encoding: w2 }));
      } catch (w2) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s2} failed`), w2;
      }
      let u4, d3;
      try {
        u4 = await this.client.core.history.get(s2, t2);
        const w2 = u4.request;
        try {
          this.shouldSetTVF(w2.method, w2.params) && (d3 = this.getTVFParams(t2, w2.params, i4));
        } catch (m2) {
          this.client.logger.warn("sendResult() -> getTVFParams() failed", m2);
        }
      } catch (w2) {
        throw this.client.logger.error(`sendResult() -> history.get(${s2}, ${t2}) failed`), w2;
      }
      if (h5) {
        const w2 = Xc(a2, s2, p3);
        await global.Linking.openURL(w2, this.client.name);
      } else {
        const w2 = u4.request.method, m2 = N[w2].res;
        m2.tvf = b2(v3({}, d3), { correlationId: t2 }), r2 ? (m2.internal = b2(v3({}, m2.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s2, p3, m2)) : this.client.core.relayer.publish(s2, p3, m2).catch((f7) => this.client.logger.error(f7));
      }
      await this.client.core.history.resolve(l4);
    }), c3(this, "sendError", async (e2) => {
      const { id: t2, topic: s2, error: i4, encodeOpts: r2, rpcOpts: o2, appLink: a2 } = e2, l4 = formatJsonRpcError(t2, i4);
      let p3;
      const h5 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d3 = h5 ? xe : qt;
        p3 = await this.client.core.crypto.encode(s2, l4, b2(v3({}, r2 || {}), { encoding: d3 }));
      } catch (d3) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s2} failed`), d3;
      }
      let u4;
      try {
        u4 = await this.client.core.history.get(s2, t2);
      } catch (d3) {
        throw this.client.logger.error(`sendError() -> history.get(${s2}, ${t2}) failed`), d3;
      }
      if (h5) {
        const d3 = Xc(a2, s2, p3);
        await global.Linking.openURL(d3, this.client.name);
      } else {
        const d3 = u4.request.method, w2 = o2 || N[d3].res;
        this.client.core.relayer.publish(s2, p3, w2);
      }
      await this.client.core.history.resolve(l4);
    }), c3(this, "cleanup", async () => {
      const e2 = [], t2 = [];
      this.client.session.getAll().forEach((s2) => {
        let i4 = false;
        vi(s2.expiry) && (i4 = true), this.client.core.crypto.keychain.has(s2.topic) || (i4 = true), i4 && e2.push(s2.topic);
      }), this.client.proposal.getAll().forEach((s2) => {
        vi(s2.expiryTimestamp) && t2.push(s2.id);
      }), await Promise.all([...e2.map((s2) => this.deleteSession({ topic: s2 })), ...t2.map((s2) => this.deleteProposal(s2))]);
    }), c3(this, "onProviderMessageEvent", async (e2) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(e2) : await this.onRelayMessage(e2);
    }), c3(this, "onRelayEventRequest", async (e2) => {
      this.requestQueue.queue.push(e2), await this.processRequestsQueue();
    }), c3(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const e2 = this.requestQueue.queue.shift();
        if (e2) try {
          await this.processRequest(e2);
        } catch (t2) {
          this.client.logger.warn(t2);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c3(this, "processRequest", async (e2) => {
      const { topic: t2, payload: s2, attestation: i4, transportType: r2, encryptedId: o2 } = e2, a2 = s2.method;
      if (!this.shouldIgnorePairingRequest({ topic: t2, requestMethod: a2 })) switch (a2) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t2, payload: s2, attestation: i4, encryptedId: o2 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t2, s2);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t2, s2);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t2, s2);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t2, s2);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t2, s2);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t2, payload: s2, attestation: i4, encryptedId: o2, transportType: r2 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t2, s2);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t2, payload: s2, attestation: i4, encryptedId: o2, transportType: r2 });
        default:
          return this.client.logger.info(`Unsupported request method ${a2}`);
      }
    }), c3(this, "onRelayEventResponse", async (e2) => {
      const { topic: t2, payload: s2, transportType: i4 } = e2, r2 = (await this.client.core.history.get(t2, s2.id)).request.method;
      switch (r2) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t2, s2, i4);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t2, s2);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t2, s2);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t2, s2);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t2, s2);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t2, s2);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t2, s2);
        default:
          return this.client.logger.info(`Unsupported response method ${r2}`);
      }
    }), c3(this, "onRelayEventUnknownPayload", (e2) => {
      const { topic: t2 } = e2, { message: s2 } = ht("MISSING_OR_INVALID", `Decoded payload on topic ${t2} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s2);
    }), c3(this, "shouldIgnorePairingRequest", (e2) => {
      const { topic: t2, requestMethod: s2 } = e2, i4 = this.expectedPairingMethodMap.get(t2);
      return !i4 || i4.includes(s2) ? false : !!(i4.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c3(this, "onSessionProposeRequest", async (e2) => {
      const { topic: t2, payload: s2, attestation: i4, encryptedId: r2 } = e2, { params: o2, id: a2 } = s2;
      try {
        const l4 = this.client.core.eventClient.getEvent({ topic: t2 });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l4 == null ? void 0 : l4.setError(Y2.proposal_listener_not_found)), this.isValidConnect(v3({}, s2.params));
        const p3 = o2.expiryTimestamp || Ei(N.wc_sessionPropose.req.ttl), h5 = v3({ id: a2, pairingTopic: t2, expiryTimestamp: p3 }, o2);
        await this.setProposal(a2, h5);
        const u4 = await this.getVerifyContext({ attestationId: i4, hash: kc(JSON.stringify(s2)), encryptedId: r2, metadata: h5.proposer.metadata });
        l4 == null ? void 0 : l4.addTrace(G2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a2, params: h5, verifyContext: u4 });
      } catch (l4) {
        await this.sendError({ id: a2, topic: t2, error: l4, rpcOpts: N.wc_sessionPropose.autoReject }), this.client.logger.error(l4);
      }
    }), c3(this, "onSessionProposeResponse", async (e2, t2, s2) => {
      const { id: i4 } = t2;
      if (isJsonRpcResult(t2)) {
        const { result: r2 } = t2;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r2 });
        const o2 = this.client.proposal.get(i4);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o2 });
        const a2 = o2.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a2 });
        const l4 = r2.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l4 });
        const p3 = await this.client.core.crypto.generateSharedKey(a2, l4);
        this.pendingSessions.set(i4, { sessionTopic: p3, pairingTopic: e2, proposalId: i4, publicKey: a2 });
        const h5 = await this.client.core.relayer.subscribe(p3, { transportType: s2 });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h5 }), await this.client.core.pairing.activate({ topic: e2 });
      } else if (isJsonRpcError(t2)) {
        await this.client.proposal.delete(i4, Nt("USER_DISCONNECTED"));
        const r2 = xi("session_connect", i4);
        if (this.events.listenerCount(r2) === 0) throw new Error(`emitting ${r2} without any listeners, 954`);
        this.events.emit(r2, { error: t2.error });
      }
    }), c3(this, "onSessionSettleRequest", async (e2, t2) => {
      const { id: s2, params: i4 } = t2;
      try {
        this.isValidSessionSettleRequest(i4);
        const { relay: r2, controller: o2, expiry: a2, namespaces: l4, sessionProperties: p3, scopedProperties: h5, sessionConfig: u4 } = t2.params, d3 = [...this.pendingSessions.values()].find((f7) => f7.sessionTopic === e2);
        if (!d3) return this.client.logger.error(`Pending session not found for topic ${e2}`);
        const w2 = this.client.proposal.get(d3.proposalId), m2 = b2(v3(v3(v3({ topic: e2, relay: r2, expiry: a2, namespaces: l4, acknowledged: true, pairingTopic: d3.pairingTopic, requiredNamespaces: w2.requiredNamespaces, optionalNamespaces: w2.optionalNamespaces, controller: o2.publicKey, self: { publicKey: d3.publicKey, metadata: this.client.metadata }, peer: { publicKey: o2.publicKey, metadata: o2.metadata } }, p3 && { sessionProperties: p3 }), h5 && { scopedProperties: h5 }), u4 && { sessionConfig: u4 }), { transportType: Q.relay });
        await this.client.session.set(m2.topic, m2), await this.setExpiry(m2.topic, m2.expiry), await this.client.core.pairing.updateMetadata({ topic: d3.pairingTopic, metadata: m2.peer.metadata }), this.client.events.emit("session_connect", { session: m2 }), this.events.emit(xi("session_connect", d3.proposalId), { session: m2 }), this.pendingSessions.delete(d3.proposalId), this.deleteProposal(d3.proposalId, false), this.cleanupDuplicatePairings(m2), await this.sendResult({ id: t2.id, topic: e2, result: true, throwOnFailedPublish: true });
      } catch (r2) {
        await this.sendError({ id: s2, topic: e2, error: r2 }), this.client.logger.error(r2);
      }
    }), c3(this, "onSessionSettleResponse", async (e2, t2) => {
      const { id: s2 } = t2;
      isJsonRpcResult(t2) ? (await this.client.session.update(e2, { acknowledged: true }), this.events.emit(xi("session_approve", s2), {})) : isJsonRpcError(t2) && (await this.client.session.delete(e2, Nt("USER_DISCONNECTED")), this.events.emit(xi("session_approve", s2), { error: t2.error }));
    }), c3(this, "onSessionUpdateRequest", async (e2, t2) => {
      const { params: s2, id: i4 } = t2;
      try {
        const r2 = `${e2}_session_update`, o2 = Ra.get(r2);
        if (o2 && this.isRequestOutOfSync(o2, i4)) {
          this.client.logger.warn(`Discarding out of sync request - ${i4}`), this.sendError({ id: i4, topic: e2, error: Nt("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(v3({ topic: e2 }, s2));
        try {
          Ra.set(r2, i4), await this.client.session.update(e2, { namespaces: s2.namespaces }), await this.sendResult({ id: i4, topic: e2, result: true, throwOnFailedPublish: true });
        } catch (a2) {
          throw Ra.delete(r2), a2;
        }
        this.client.events.emit("session_update", { id: i4, topic: e2, params: s2 });
      } catch (r2) {
        await this.sendError({ id: i4, topic: e2, error: r2 }), this.client.logger.error(r2);
      }
    }), c3(this, "isRequestOutOfSync", (e2, t2) => t2.toString().slice(0, -3) < e2.toString().slice(0, -3)), c3(this, "onSessionUpdateResponse", (e2, t2) => {
      const { id: s2 } = t2, i4 = xi("session_update", s2);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(xi("session_update", s2), {}) : isJsonRpcError(t2) && this.events.emit(xi("session_update", s2), { error: t2.error });
    }), c3(this, "onSessionExtendRequest", async (e2, t2) => {
      const { id: s2 } = t2;
      try {
        this.isValidExtend({ topic: e2 }), await this.setExpiry(e2, Ei(J2)), await this.sendResult({ id: s2, topic: e2, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s2, topic: e2 });
      } catch (i4) {
        await this.sendError({ id: s2, topic: e2, error: i4 }), this.client.logger.error(i4);
      }
    }), c3(this, "onSessionExtendResponse", (e2, t2) => {
      const { id: s2 } = t2, i4 = xi("session_extend", s2);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(xi("session_extend", s2), {}) : isJsonRpcError(t2) && this.events.emit(xi("session_extend", s2), { error: t2.error });
    }), c3(this, "onSessionPingRequest", async (e2, t2) => {
      const { id: s2 } = t2;
      try {
        this.isValidPing({ topic: e2 }), await this.sendResult({ id: s2, topic: e2, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s2, topic: e2 });
      } catch (i4) {
        await this.sendError({ id: s2, topic: e2, error: i4 }), this.client.logger.error(i4);
      }
    }), c3(this, "onSessionPingResponse", (e2, t2) => {
      const { id: s2 } = t2, i4 = xi("session_ping", s2);
      setTimeout(() => {
        if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners 2176`);
        isJsonRpcResult(t2) ? this.events.emit(xi("session_ping", s2), {}) : isJsonRpcError(t2) && this.events.emit(xi("session_ping", s2), { error: t2.error });
      }, 500);
    }), c3(this, "onSessionDeleteRequest", async (e2, t2) => {
      const { id: s2 } = t2;
      try {
        this.isValidDisconnect({ topic: e2, reason: t2.params }), Promise.all([new Promise((i4) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i4(await this.deleteSession({ topic: e2, id: s2 }));
          });
        }), this.sendResult({ id: s2, topic: e2, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e2, error: Nt("USER_DISCONNECTED") })]).catch((i4) => this.client.logger.error(i4));
      } catch (i4) {
        this.client.logger.error(i4);
      }
    }), c3(this, "onSessionRequest", async (e2) => {
      var t2, s2, i4;
      const { topic: r2, payload: o2, attestation: a2, encryptedId: l4, transportType: p3 } = e2, { id: h5, params: u4 } = o2;
      try {
        await this.isValidRequest(v3({ topic: r2 }, u4));
        const d3 = this.client.session.get(r2), w2 = await this.getVerifyContext({ attestationId: a2, hash: kc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u4, h5))), encryptedId: l4, metadata: d3.peer.metadata, transportType: p3 }), m2 = { id: h5, topic: r2, params: u4, verifyContext: w2 };
        await this.setPendingSessionRequest(m2), p3 === Q.link_mode && (t2 = d3.peer.metadata.redirect) != null && t2.universal && this.client.core.addLinkModeSupportedApp((s2 = d3.peer.metadata.redirect) == null ? void 0 : s2.universal), (i4 = this.client.signConfig) != null && i4.disableRequestQueue ? this.emitSessionRequest(m2) : (this.addSessionRequestToSessionRequestQueue(m2), this.processSessionRequestQueue());
      } catch (d3) {
        await this.sendError({ id: h5, topic: r2, error: d3 }), this.client.logger.error(d3);
      }
    }), c3(this, "onSessionRequestResponse", (e2, t2) => {
      const { id: s2 } = t2, i4 = xi("session_request", s2);
      if (this.events.listenerCount(i4) === 0) throw new Error(`emitting ${i4} without any listeners`);
      isJsonRpcResult(t2) ? this.events.emit(xi("session_request", s2), { result: t2.result }) : isJsonRpcError(t2) && this.events.emit(xi("session_request", s2), { error: t2.error });
    }), c3(this, "onSessionEventRequest", async (e2, t2) => {
      const { id: s2, params: i4 } = t2;
      try {
        const r2 = `${e2}_session_event_${i4.event.name}`, o2 = Ra.get(r2);
        if (o2 && this.isRequestOutOfSync(o2, s2)) {
          this.client.logger.info(`Discarding out of sync request - ${s2}`);
          return;
        }
        this.isValidEmit(v3({ topic: e2 }, i4)), this.client.events.emit("session_event", { id: s2, topic: e2, params: i4 }), Ra.set(r2, s2);
      } catch (r2) {
        await this.sendError({ id: s2, topic: e2, error: r2 }), this.client.logger.error(r2);
      }
    }), c3(this, "onSessionAuthenticateResponse", (e2, t2) => {
      const { id: s2 } = t2;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e2, payload: t2 }), isJsonRpcResult(t2) ? this.events.emit(xi("session_request", s2), { result: t2.result }) : isJsonRpcError(t2) && this.events.emit(xi("session_request", s2), { error: t2.error });
    }), c3(this, "onSessionAuthenticateRequest", async (e2) => {
      var t2;
      const { topic: s2, payload: i4, attestation: r2, encryptedId: o2, transportType: a2 } = e2;
      try {
        const { requester: l4, authPayload: p3, expiryTimestamp: h5 } = i4.params, u4 = await this.getVerifyContext({ attestationId: r2, hash: kc(JSON.stringify(i4)), encryptedId: o2, metadata: l4.metadata, transportType: a2 }), d3 = { requester: l4, pairingTopic: s2, id: i4.id, authPayload: p3, verifyContext: u4, expiryTimestamp: h5 };
        await this.setAuthRequest(i4.id, { request: d3, pairingTopic: s2, transportType: a2 }), a2 === Q.link_mode && (t2 = l4.metadata.redirect) != null && t2.universal && this.client.core.addLinkModeSupportedApp(l4.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s2, params: i4.params, id: i4.id, verifyContext: u4 });
      } catch (l4) {
        this.client.logger.error(l4);
        const p3 = i4.params.requester.publicKey, h5 = await this.client.core.crypto.generateKeyPair(), u4 = this.getAppLinkIfEnabled(i4.params.requester.metadata, a2), d3 = { type: Ft, receiverPublicKey: p3, senderPublicKey: h5 };
        await this.sendError({ id: i4.id, topic: s2, error: l4, encodeOpts: d3, rpcOpts: N.wc_sessionAuthenticate.autoReject, appLink: u4 });
      }
    }), c3(this, "addSessionRequestToSessionRequestQueue", (e2) => {
      this.sessionRequestQueue.queue.push(e2);
    }), c3(this, "cleanupAfterResponse", (e2) => {
      this.deletePendingSessionRequest(e2.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay));
    }), c3(this, "cleanupPendingSentRequestsForTopic", ({ topic: e2, error: t2 }) => {
      const s2 = this.client.core.history.pending;
      s2.length > 0 && s2.filter((i4) => i4.topic === e2 && i4.request.method === "wc_sessionRequest").forEach((i4) => {
        const r2 = i4.request.id, o2 = xi("session_request", r2);
        if (this.events.listenerCount(o2) === 0) throw new Error(`emitting ${o2} without any listeners`);
        this.events.emit(xi("session_request", i4.request.id), { error: t2 });
      });
    }), c3(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e2 = this.sessionRequestQueue.queue[0];
      if (!e2) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(e2);
      } catch (t2) {
        this.client.logger.error(t2);
      }
    }), c3(this, "emitSessionRequest", (e2) => {
      this.client.events.emit("session_request", e2);
    }), c3(this, "onPairingCreated", (e2) => {
      if (e2.methods && this.expectedPairingMethodMap.set(e2.topic, e2.methods), e2.active) return;
      const t2 = this.client.proposal.getAll().find((s2) => s2.pairingTopic === e2.topic);
      t2 && this.onSessionProposeRequest({ topic: e2.topic, payload: formatJsonRpcRequest("wc_sessionPropose", b2(v3({}, t2), { requiredNamespaces: t2.requiredNamespaces, optionalNamespaces: t2.optionalNamespaces, relays: t2.relays, proposer: t2.proposer, sessionProperties: t2.sessionProperties, scopedProperties: t2.scopedProperties }), t2.id) });
    }), c3(this, "isValidConnect", async (e2) => {
      if (!ma(e2)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e2)}`);
        throw new Error(l4);
      }
      const { pairingTopic: t2, requiredNamespaces: s2, optionalNamespaces: i4, sessionProperties: r2, scopedProperties: o2, relays: a2 } = e2;
      if (Et(t2) || await this.isValidPairingTopic(t2), !ga(a2, true)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", `connect() relays: ${a2}`);
        throw new Error(l4);
      }
      if (!Et(s2) && Oe(s2) !== 0) {
        const l4 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l4) : this.client.logger.warn(l4), this.validateNamespaces(s2, "requiredNamespaces");
      }
      if (!Et(i4) && Oe(i4) !== 0 && this.validateNamespaces(i4, "optionalNamespaces"), Et(r2) || this.validateSessionProps(r2, "sessionProperties"), !Et(o2)) {
        this.validateSessionProps(o2, "scopedProperties");
        const l4 = Object.keys(s2 || {}).concat(Object.keys(i4 || {}));
        if (!Object.keys(o2).every((p3) => l4.includes(p3))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(o2)}, required/optional namespaces: ${JSON.stringify(l4)}`);
      }
    }), c3(this, "validateNamespaces", (e2, t2) => {
      const s2 = pa(e2, "connect()", t2);
      if (s2) throw new Error(s2.message);
    }), c3(this, "isValidApprove", async (e2) => {
      if (!ma(e2)) throw new Error(ht("MISSING_OR_INVALID", `approve() params: ${e2}`).message);
      const { id: t2, namespaces: s2, relayProtocol: i4, sessionProperties: r2, scopedProperties: o2 } = e2;
      this.checkRecentlyDeleted(t2), await this.isValidProposalId(t2);
      const a2 = this.client.proposal.get(t2), l4 = Bo(s2, "approve()");
      if (l4) throw new Error(l4.message);
      const p3 = No(a2.requiredNamespaces, s2, "approve()");
      if (p3) throw new Error(p3.message);
      if (!nt(i4, true)) {
        const { message: h5 } = ht("MISSING_OR_INVALID", `approve() relayProtocol: ${i4}`);
        throw new Error(h5);
      }
      if (Et(r2) || this.validateSessionProps(r2, "sessionProperties"), !Et(o2)) {
        this.validateSessionProps(o2, "scopedProperties");
        const h5 = new Set(Object.keys(s2));
        if (!Object.keys(o2).every((u4) => h5.has(u4))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(o2)}, approved namespaces: ${Array.from(h5).join(", ")}`);
      }
    }), c3(this, "isValidReject", async (e2) => {
      if (!ma(e2)) {
        const { message: i4 } = ht("MISSING_OR_INVALID", `reject() params: ${e2}`);
        throw new Error(i4);
      }
      const { id: t2, reason: s2 } = e2;
      if (this.checkRecentlyDeleted(t2), await this.isValidProposalId(t2), !wa(s2)) {
        const { message: i4 } = ht("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s2)}`);
        throw new Error(i4);
      }
    }), c3(this, "isValidSessionSettleRequest", (e2) => {
      if (!ma(e2)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e2}`);
        throw new Error(l4);
      }
      const { relay: t2, controller: s2, namespaces: i4, expiry: r2 } = e2;
      if (!Io(t2)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l4);
      }
      const o2 = ha(s2, "onSessionSettleRequest()");
      if (o2) throw new Error(o2.message);
      const a2 = Bo(i4, "onSessionSettleRequest()");
      if (a2) throw new Error(a2.message);
      if (vi(r2)) {
        const { message: l4 } = ht("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l4);
      }
    }), c3(this, "isValidUpdate", async (e2) => {
      if (!ma(e2)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `update() params: ${e2}`);
        throw new Error(a2);
      }
      const { topic: t2, namespaces: s2 } = e2;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
      const i4 = this.client.session.get(t2), r2 = Bo(s2, "update()");
      if (r2) throw new Error(r2.message);
      const o2 = No(i4.requiredNamespaces, s2, "update()");
      if (o2) throw new Error(o2.message);
    }), c3(this, "isValidExtend", async (e2) => {
      if (!ma(e2)) {
        const { message: s2 } = ht("MISSING_OR_INVALID", `extend() params: ${e2}`);
        throw new Error(s2);
      }
      const { topic: t2 } = e2;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
    }), c3(this, "isValidRequest", async (e2) => {
      if (!ma(e2)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() params: ${e2}`);
        throw new Error(a2);
      }
      const { topic: t2, request: s2, chainId: i4, expiry: r2 } = e2;
      this.checkRecentlyDeleted(t2), await this.isValidSessionTopic(t2);
      const { namespaces: o2 } = this.client.session.get(t2);
      if (!xa(o2, i4)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() chainId: ${i4}`);
        throw new Error(a2);
      }
      if (!ba(s2)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() ${JSON.stringify(s2)}`);
        throw new Error(a2);
      }
      if (!Sa(o2, i4, s2.method)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() method: ${s2.method}`);
        throw new Error(a2);
      }
      if (r2 && !Ia(r2, _e3)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() expiry: ${r2}. Expiry must be a number (in seconds) between ${_e3.min} and ${_e3.max}`);
        throw new Error(a2);
      }
    }), c3(this, "isValidRespond", async (e2) => {
      var t2;
      if (!ma(e2)) {
        const { message: r2 } = ht("MISSING_OR_INVALID", `respond() params: ${e2}`);
        throw new Error(r2);
      }
      const { topic: s2, response: i4 } = e2;
      try {
        await this.isValidSessionTopic(s2);
      } catch (r2) {
        throw (t2 = e2 == null ? void 0 : e2.response) != null && t2.id && this.cleanupAfterResponse(e2), r2;
      }
      if (!Ea(i4)) {
        const { message: r2 } = ht("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i4)}`);
        throw new Error(r2);
      }
    }), c3(this, "isValidPing", async (e2) => {
      if (!ma(e2)) {
        const { message: s2 } = ht("MISSING_OR_INVALID", `ping() params: ${e2}`);
        throw new Error(s2);
      }
      const { topic: t2 } = e2;
      await this.isValidSessionOrPairingTopic(t2);
    }), c3(this, "isValidEmit", async (e2) => {
      if (!ma(e2)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() params: ${e2}`);
        throw new Error(o2);
      }
      const { topic: t2, event: s2, chainId: i4 } = e2;
      await this.isValidSessionTopic(t2);
      const { namespaces: r2 } = this.client.session.get(t2);
      if (!xa(r2, i4)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() chainId: ${i4}`);
        throw new Error(o2);
      }
      if (!va(s2)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s2)}`);
        throw new Error(o2);
      }
      if (!Oa(r2, i4, s2.name)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s2)}`);
        throw new Error(o2);
      }
    }), c3(this, "isValidDisconnect", async (e2) => {
      if (!ma(e2)) {
        const { message: s2 } = ht("MISSING_OR_INVALID", `disconnect() params: ${e2}`);
        throw new Error(s2);
      }
      const { topic: t2 } = e2;
      await this.isValidSessionOrPairingTopic(t2);
    }), c3(this, "isValidAuthenticate", (e2) => {
      const { chains: t2, uri: s2, domain: i4, nonce: r2 } = e2;
      if (!Array.isArray(t2) || t2.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!nt(s2, false)) throw new Error("uri is required parameter");
      if (!nt(i4, false)) throw new Error("domain is required parameter");
      if (!nt(r2, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t2.map((a2) => Ne(a2).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: o2 } = Ne(t2[0]);
      if (o2 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c3(this, "getVerifyContext", async (e2) => {
      const { attestationId: t2, hash: s2, encryptedId: i4, metadata: r2, transportType: o2 } = e2, a2 = { verified: { verifyUrl: r2.verifyUrl || ue2, validation: "UNKNOWN", origin: r2.url || "" } };
      try {
        if (o2 === Q.link_mode) {
          const p3 = this.getAppLinkIfEnabled(r2, o2);
          return a2.verified.validation = p3 && new URL(p3).origin === new URL(r2.url).origin ? "VALID" : "INVALID", a2;
        }
        const l4 = await this.client.core.verify.resolve({ attestationId: t2, hash: s2, encryptedId: i4, verifyUrl: r2.verifyUrl });
        l4 && (a2.verified.origin = l4.origin, a2.verified.isScam = l4.isScam, a2.verified.validation = l4.origin === new URL(r2.url).origin ? "VALID" : "INVALID");
      } catch (l4) {
        this.client.logger.warn(l4);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a2)}`), a2;
    }), c3(this, "validateSessionProps", (e2, t2) => {
      Object.values(e2).forEach((s2, i4) => {
        if (s2 == null) {
          const { message: r2 } = ht("MISSING_OR_INVALID", `${t2} must contain an existing value for each key. Received: ${s2} for key ${Object.keys(e2)[i4]}`);
          throw new Error(r2);
        }
      });
    }), c3(this, "getPendingAuthRequest", (e2) => {
      const t2 = this.client.auth.requests.get(e2);
      return typeof t2 == "object" ? t2 : void 0;
    }), c3(this, "addToRecentlyDeleted", (e2, t2) => {
      if (this.recentlyDeletedMap.set(e2, t2), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s2 = 0;
        const i4 = this.recentlyDeletedLimit / 2;
        for (const r2 of this.recentlyDeletedMap.keys()) {
          if (s2++ >= i4) break;
          this.recentlyDeletedMap.delete(r2);
        }
      }
    }), c3(this, "checkRecentlyDeleted", (e2) => {
      const t2 = this.recentlyDeletedMap.get(e2);
      if (t2) {
        const { message: s2 } = ht("MISSING_OR_INVALID", `Record was recently deleted - ${t2}: ${e2}`);
        throw new Error(s2);
      }
    }), c3(this, "isLinkModeEnabled", (e2, t2) => {
      var s2, i4, r2, o2, a2, l4, p3, h5, u4;
      return !e2 || t2 !== Q.link_mode ? false : ((i4 = (s2 = this.client.metadata) == null ? void 0 : s2.redirect) == null ? void 0 : i4.linkMode) === true && ((o2 = (r2 = this.client.metadata) == null ? void 0 : r2.redirect) == null ? void 0 : o2.universal) !== void 0 && ((l4 = (a2 = this.client.metadata) == null ? void 0 : a2.redirect) == null ? void 0 : l4.universal) !== "" && ((p3 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : p3.universal) !== void 0 && ((h5 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : h5.universal) !== "" && ((u4 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : u4.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e2.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c3(this, "getAppLinkIfEnabled", (e2, t2) => {
      var s2;
      return this.isLinkModeEnabled(e2, t2) ? (s2 = e2 == null ? void 0 : e2.redirect) == null ? void 0 : s2.universal : void 0;
    }), c3(this, "handleLinkModeMessage", ({ url: e2 }) => {
      if (!e2 || !e2.includes("wc_ev") || !e2.includes("topic")) return;
      const t2 = Ai(e2, "topic") || "", s2 = decodeURIComponent(Ai(e2, "wc_ev") || ""), i4 = this.client.session.keys.includes(t2);
      i4 && this.client.session.update(t2, { transportType: Q.link_mode }), this.client.core.dispatchEnvelope({ topic: t2, message: s2, sessionExists: i4 });
    }), c3(this, "registerLinkModeListeners", async () => {
      var e2;
      if (Ii() || pt() && (e2 = this.client.metadata.redirect) != null && e2.linkMode) {
        const t2 = global == null ? void 0 : global.Linking;
        if (typeof t2 < "u") {
          t2.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s2 = await t2.getInitialURL();
          s2 && setTimeout(() => {
            this.handleLinkModeMessage({ url: s2 });
          }, 50);
        }
      }
    }), c3(this, "shouldSetTVF", (e2, t2) => {
      if (!t2 || e2 !== "wc_sessionRequest") return false;
      const { request: s2 } = t2;
      return Object.keys(Ke3).includes(s2.method);
    }), c3(this, "getTVFParams", (e2, t2, s2) => {
      var i4, r2;
      try {
        const o2 = t2.request.method, a2 = this.extractTxHashesFromResult(o2, s2);
        return b2(v3({ correlationId: e2, rpcMethods: [o2], chainId: t2.chainId }, this.isValidContractData(t2.request.params) && { contractAddresses: [(r2 = (i4 = t2.request.params) == null ? void 0 : i4[0]) == null ? void 0 : r2.to] }), { txHashes: a2 });
      } catch (o2) {
        this.client.logger.warn("Error getting TVF params", o2);
      }
      return {};
    }), c3(this, "isValidContractData", (e2) => {
      var t2;
      if (!e2) return false;
      try {
        const s2 = (e2 == null ? void 0 : e2.data) || ((t2 = e2 == null ? void 0 : e2[0]) == null ? void 0 : t2.data);
        if (!s2.startsWith("0x")) return false;
        const i4 = s2.slice(2);
        return /^[0-9a-fA-F]*$/.test(i4) ? i4.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c3(this, "extractTxHashesFromResult", (e2, t2) => {
      try {
        const s2 = Ke3[e2];
        if (typeof t2 == "string") return [t2];
        const i4 = t2[s2.key];
        if (se(i4)) return e2 === "solana_signAllTransactions" ? i4.map((r2) => Ji(r2)) : i4;
        if (typeof i4 == "string") return [i4];
      } catch (s2) {
        this.client.logger.warn("Error extracting tx hashes from result", s2);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const n2 = this.client.session.keys, e2 = this.client.core.relayer.messages.getWithoutAck(n2);
      for (const [t2, s2] of Object.entries(e2)) for (const i4 of s2) try {
        await this.onProviderMessageEvent({ topic: t2, message: i4, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${t2}, message: ${i4}`);
      }
    } catch (n2) {
      this.client.logger.warn("processPendingMessageEvents failed", n2);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: n2 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(n2);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (n2) => {
      this.onProviderMessageEvent(n2);
    });
  }
  async onRelayMessage(n2) {
    const { topic: e2, message: t2, attestation: s2, transportType: i4 } = n2, { publicKey: r2 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const o2 = await this.client.core.crypto.decode(e2, t2, { receiverPublicKey: r2, encoding: i4 === Q.link_mode ? xe : qt });
      isJsonRpcRequest(o2) ? (this.client.core.history.set(e2, o2), await this.onRelayEventRequest({ topic: e2, payload: o2, attestation: s2, transportType: i4, encryptedId: kc(t2) })) : isJsonRpcResponse(o2) ? (await this.client.core.history.resolve(o2), await this.onRelayEventResponse({ topic: e2, payload: o2, transportType: i4 }), this.client.core.history.delete(e2, o2.id)) : await this.onRelayEventUnknownPayload({ topic: e2, payload: o2, transportType: i4 }), await this.client.core.relayer.messages.ack(e2, t2);
    } catch (o2) {
      this.client.logger.error(o2);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M2.expired, async (n2) => {
      const { topic: e2, id: t2 } = bi(n2.target);
      if (t2 && this.client.pendingRequest.keys.includes(t2)) return await this.deletePendingSessionRequest(t2, ht("EXPIRED"), true);
      if (t2 && this.client.auth.requests.keys.includes(t2)) return await this.deletePendingAuthRequest(t2, ht("EXPIRED"), true);
      e2 ? this.client.session.keys.includes(e2) && (await this.deleteSession({ topic: e2, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e2 })) : t2 && (await this.deleteProposal(t2, true), this.client.events.emit("proposal_expire", { id: t2 }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(re2.create, (n2) => this.onPairingCreated(n2)), this.client.core.pairing.events.on(re2.delete, (n2) => {
      this.addToRecentlyDeleted(n2.topic, "pairing");
    });
  }
  isValidPairingTopic(n2) {
    if (!nt(n2, false)) {
      const { message: e2 } = ht("MISSING_OR_INVALID", `pairing topic should be a string: ${n2}`);
      throw new Error(e2);
    }
    if (!this.client.core.pairing.pairings.keys.includes(n2)) {
      const { message: e2 } = ht("NO_MATCHING_KEY", `pairing topic doesn't exist: ${n2}`);
      throw new Error(e2);
    }
    if (vi(this.client.core.pairing.pairings.get(n2).expiry)) {
      const { message: e2 } = ht("EXPIRED", `pairing topic: ${n2}`);
      throw new Error(e2);
    }
  }
  async isValidSessionTopic(n2) {
    if (!nt(n2, false)) {
      const { message: e2 } = ht("MISSING_OR_INVALID", `session topic should be a string: ${n2}`);
      throw new Error(e2);
    }
    if (this.checkRecentlyDeleted(n2), !this.client.session.keys.includes(n2)) {
      const { message: e2 } = ht("NO_MATCHING_KEY", `session topic doesn't exist: ${n2}`);
      throw new Error(e2);
    }
    if (vi(this.client.session.get(n2).expiry)) {
      await this.deleteSession({ topic: n2 });
      const { message: e2 } = ht("EXPIRED", `session topic: ${n2}`);
      throw new Error(e2);
    }
    if (!this.client.core.crypto.keychain.has(n2)) {
      const { message: e2 } = ht("MISSING_OR_INVALID", `session topic does not exist in keychain: ${n2}`);
      throw await this.deleteSession({ topic: n2 }), new Error(e2);
    }
  }
  async isValidSessionOrPairingTopic(n2) {
    if (this.checkRecentlyDeleted(n2), this.client.session.keys.includes(n2)) await this.isValidSessionTopic(n2);
    else if (this.client.core.pairing.pairings.keys.includes(n2)) this.isValidPairingTopic(n2);
    else if (nt(n2, false)) {
      const { message: e2 } = ht("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${n2}`);
      throw new Error(e2);
    } else {
      const { message: e2 } = ht("MISSING_OR_INVALID", `session or pairing topic should be a string: ${n2}`);
      throw new Error(e2);
    }
  }
  async isValidProposalId(n2) {
    if (!ya(n2)) {
      const { message: e2 } = ht("MISSING_OR_INVALID", `proposal id should be a number: ${n2}`);
      throw new Error(e2);
    }
    if (!this.client.proposal.keys.includes(n2)) {
      const { message: e2 } = ht("NO_MATCHING_KEY", `proposal id doesn't exist: ${n2}`);
      throw new Error(e2);
    }
    if (vi(this.client.proposal.get(n2).expiryTimestamp)) {
      await this.deleteProposal(n2);
      const { message: e2 } = ht("EXPIRED", `proposal id: ${n2}`);
      throw new Error(e2);
    }
  }
};
var Os2 = class extends zi2 {
  constructor(n2, e2) {
    super(n2, e2, pt2, we2), this.core = n2, this.logger = e2;
  }
};
var St3 = class extends zi2 {
  constructor(n2, e2) {
    super(n2, e2, ht2, we2), this.core = n2, this.logger = e2;
  }
};
var bs2 = class extends zi2 {
  constructor(n2, e2) {
    super(n2, e2, ut2, we2, (t2) => t2.id), this.core = n2, this.logger = e2;
  }
};
var As2 = class extends zi2 {
  constructor(n2, e2) {
    super(n2, e2, mt2, ae2, () => ce2), this.core = n2, this.logger = e2;
  }
};
var xs2 = class extends zi2 {
  constructor(n2, e2) {
    super(n2, e2, _t2, ae2), this.core = n2, this.logger = e2;
  }
};
var Cs2 = class extends zi2 {
  constructor(n2, e2) {
    super(n2, e2, Et3, ae2, (t2) => t2.id), this.core = n2, this.logger = e2;
  }
};
var Vs2 = Object.defineProperty;
var Ds2 = (S4, n2, e2) => n2 in S4 ? Vs2(S4, n2, { enumerable: true, configurable: true, writable: true, value: e2 }) : S4[n2] = e2;
var Ge3 = (S4, n2, e2) => Ds2(S4, typeof n2 != "symbol" ? n2 + "" : n2, e2);
var Ls2 = class {
  constructor(n2, e2) {
    this.core = n2, this.logger = e2, Ge3(this, "authKeys"), Ge3(this, "pairingTopics"), Ge3(this, "requests"), this.authKeys = new As2(this.core, this.logger), this.pairingTopics = new xs2(this.core, this.logger), this.requests = new Cs2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var ks2 = Object.defineProperty;
var Ms2 = (S4, n2, e2) => n2 in S4 ? ks2(S4, n2, { enumerable: true, configurable: true, writable: true, value: e2 }) : S4[n2] = e2;
var E3 = (S4, n2, e2) => Ms2(S4, typeof n2 != "symbol" ? n2 + "" : n2, e2);
var Ee3 = class _Ee extends J {
  constructor(n2) {
    super(n2), E3(this, "protocol", De2), E3(this, "version", Le2), E3(this, "name", me2.name), E3(this, "metadata"), E3(this, "core"), E3(this, "logger"), E3(this, "events", new import_events4.EventEmitter()), E3(this, "engine"), E3(this, "session"), E3(this, "proposal"), E3(this, "pendingRequest"), E3(this, "auth"), E3(this, "signConfig"), E3(this, "on", (t2, s2) => this.events.on(t2, s2)), E3(this, "once", (t2, s2) => this.events.once(t2, s2)), E3(this, "off", (t2, s2) => this.events.off(t2, s2)), E3(this, "removeListener", (t2, s2) => this.events.removeListener(t2, s2)), E3(this, "removeAllListeners", (t2) => this.events.removeAllListeners(t2)), E3(this, "connect", async (t2) => {
      try {
        return await this.engine.connect(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "pair", async (t2) => {
      try {
        return await this.engine.pair(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "approve", async (t2) => {
      try {
        return await this.engine.approve(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "reject", async (t2) => {
      try {
        return await this.engine.reject(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "update", async (t2) => {
      try {
        return await this.engine.update(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "extend", async (t2) => {
      try {
        return await this.engine.extend(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "request", async (t2) => {
      try {
        return await this.engine.request(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "respond", async (t2) => {
      try {
        return await this.engine.respond(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "ping", async (t2) => {
      try {
        return await this.engine.ping(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "emit", async (t2) => {
      try {
        return await this.engine.emit(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "disconnect", async (t2) => {
      try {
        return await this.engine.disconnect(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "find", (t2) => {
      try {
        return this.engine.find(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t2) {
        throw this.logger.error(t2.message), t2;
      }
    }), E3(this, "authenticate", async (t2, s2) => {
      try {
        return await this.engine.authenticate(t2, s2);
      } catch (i4) {
        throw this.logger.error(i4.message), i4;
      }
    }), E3(this, "formatAuthMessage", (t2) => {
      try {
        return this.engine.formatAuthMessage(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "approveSessionAuthenticate", async (t2) => {
      try {
        return await this.engine.approveSessionAuthenticate(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), E3(this, "rejectSessionAuthenticate", async (t2) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t2);
      } catch (s2) {
        throw this.logger.error(s2.message), s2;
      }
    }), this.name = (n2 == null ? void 0 : n2.name) || me2.name, this.metadata = oi(n2 == null ? void 0 : n2.metadata), this.signConfig = n2 == null ? void 0 : n2.signConfig;
    const e2 = typeof (n2 == null ? void 0 : n2.logger) < "u" && typeof (n2 == null ? void 0 : n2.logger) != "string" ? n2.logger : (0, import_pino.default)(k({ level: (n2 == null ? void 0 : n2.logger) || me2.logger }));
    this.core = (n2 == null ? void 0 : n2.core) || new Xo2(n2), this.logger = E(e2, this.name), this.session = new St3(this.core, this.logger), this.proposal = new Os2(this.core, this.logger), this.pendingRequest = new bs2(this.core, this.logger), this.engine = new Ns2(this), this.auth = new Ls2(this.core, this.logger);
  }
  static async init(n2) {
    const e2 = new _Ee(n2);
    return await e2.initialize(), e2;
  }
  get context() {
    return y(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time3.toMiliseconds)(import_time3.ONE_SECOND));
    } catch (n2) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(n2.message), n2;
    }
  }
};

// node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events5 = __toESM(require_events());
var et2 = "error";
var St4 = "wss://relay.walletconnect.org";
var Dt2 = "wc";
var qt3 = "universal_provider";
var U3 = `${Dt2}@2:${qt3}:`;
var st = "https://rpc.walletconnect.org/v1/";
var I2 = "generic";
var jt3 = `${st}bundler`;
var u3 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function Rt3() {
}
function k4(s2) {
  return s2 == null || typeof s2 != "object" && typeof s2 != "function";
}
function W2(s2) {
  return ArrayBuffer.isView(s2) && !(s2 instanceof DataView);
}
function _t3(s2) {
  if (k4(s2)) return s2;
  if (Array.isArray(s2) || W2(s2) || s2 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s2 instanceof SharedArrayBuffer) return s2.slice(0);
  const t2 = Object.getPrototypeOf(s2), e2 = t2.constructor;
  if (s2 instanceof Date || s2 instanceof Map || s2 instanceof Set) return new e2(s2);
  if (s2 instanceof RegExp) {
    const i4 = new e2(s2);
    return i4.lastIndex = s2.lastIndex, i4;
  }
  if (s2 instanceof DataView) return new e2(s2.buffer.slice(0));
  if (s2 instanceof Error) {
    const i4 = new e2(s2.message);
    return i4.stack = s2.stack, i4.name = s2.name, i4.cause = s2.cause, i4;
  }
  if (typeof File < "u" && s2 instanceof File) return new e2([s2], s2.name, { type: s2.type, lastModified: s2.lastModified });
  if (typeof s2 == "object") {
    const i4 = Object.create(t2);
    return Object.assign(i4, s2);
  }
  return s2;
}
function it3(s2) {
  return typeof s2 == "object" && s2 !== null;
}
function rt(s2) {
  return Object.getOwnPropertySymbols(s2).filter((t2) => Object.prototype.propertyIsEnumerable.call(s2, t2));
}
function nt2(s2) {
  return s2 == null ? s2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s2);
}
var Ut2 = "[object RegExp]";
var at2 = "[object String]";
var ct2 = "[object Number]";
var ot2 = "[object Boolean]";
var ht3 = "[object Arguments]";
var Ft3 = "[object Symbol]";
var Lt3 = "[object Date]";
var Mt3 = "[object Map]";
var xt3 = "[object Set]";
var Bt3 = "[object Array]";
var Gt2 = "[object ArrayBuffer]";
var Jt3 = "[object Object]";
var zt2 = "[object DataView]";
var kt4 = "[object Uint8Array]";
var Wt3 = "[object Uint8ClampedArray]";
var Kt3 = "[object Uint16Array]";
var Vt3 = "[object Uint32Array]";
var Xt3 = "[object Int8Array]";
var Yt3 = "[object Int16Array]";
var Qt3 = "[object Int32Array]";
var Zt2 = "[object Float32Array]";
var Tt3 = "[object Float64Array]";
function te2(s2, t2) {
  return $3(s2, void 0, s2, /* @__PURE__ */ new Map(), t2);
}
function $3(s2, t2, e2, i4 = /* @__PURE__ */ new Map(), n2 = void 0) {
  const a2 = n2 == null ? void 0 : n2(s2, t2, e2, i4);
  if (a2 != null) return a2;
  if (k4(s2)) return s2;
  if (i4.has(s2)) return i4.get(s2);
  if (Array.isArray(s2)) {
    const r2 = new Array(s2.length);
    i4.set(s2, r2);
    for (let c4 = 0; c4 < s2.length; c4++) r2[c4] = $3(s2[c4], c4, e2, i4, n2);
    return Object.hasOwn(s2, "index") && (r2.index = s2.index), Object.hasOwn(s2, "input") && (r2.input = s2.input), r2;
  }
  if (s2 instanceof Date) return new Date(s2.getTime());
  if (s2 instanceof RegExp) {
    const r2 = new RegExp(s2.source, s2.flags);
    return r2.lastIndex = s2.lastIndex, r2;
  }
  if (s2 instanceof Map) {
    const r2 = /* @__PURE__ */ new Map();
    i4.set(s2, r2);
    for (const [c4, o2] of s2) r2.set(c4, $3(o2, c4, e2, i4, n2));
    return r2;
  }
  if (s2 instanceof Set) {
    const r2 = /* @__PURE__ */ new Set();
    i4.set(s2, r2);
    for (const c4 of s2) r2.add($3(c4, void 0, e2, i4, n2));
    return r2;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s2)) return s2.subarray();
  if (W2(s2)) {
    const r2 = new (Object.getPrototypeOf(s2)).constructor(s2.length);
    i4.set(s2, r2);
    for (let c4 = 0; c4 < s2.length; c4++) r2[c4] = $3(s2[c4], c4, e2, i4, n2);
    return r2;
  }
  if (s2 instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s2 instanceof SharedArrayBuffer) return s2.slice(0);
  if (s2 instanceof DataView) {
    const r2 = new DataView(s2.buffer.slice(0), s2.byteOffset, s2.byteLength);
    return i4.set(s2, r2), y5(r2, s2, e2, i4, n2), r2;
  }
  if (typeof File < "u" && s2 instanceof File) {
    const r2 = new File([s2], s2.name, { type: s2.type });
    return i4.set(s2, r2), y5(r2, s2, e2, i4, n2), r2;
  }
  if (s2 instanceof Blob) {
    const r2 = new Blob([s2], { type: s2.type });
    return i4.set(s2, r2), y5(r2, s2, e2, i4, n2), r2;
  }
  if (s2 instanceof Error) {
    const r2 = new s2.constructor();
    return i4.set(s2, r2), r2.message = s2.message, r2.name = s2.name, r2.stack = s2.stack, r2.cause = s2.cause, y5(r2, s2, e2, i4, n2), r2;
  }
  if (typeof s2 == "object" && ee3(s2)) {
    const r2 = Object.create(Object.getPrototypeOf(s2));
    return i4.set(s2, r2), y5(r2, s2, e2, i4, n2), r2;
  }
  return s2;
}
function y5(s2, t2, e2 = s2, i4, n2) {
  const a2 = [...Object.keys(t2), ...rt(t2)];
  for (let r2 = 0; r2 < a2.length; r2++) {
    const c4 = a2[r2], o2 = Object.getOwnPropertyDescriptor(s2, c4);
    (o2 == null || o2.writable) && (s2[c4] = $3(t2[c4], c4, e2, i4, n2));
  }
}
function ee3(s2) {
  switch (nt2(s2)) {
    case ht3:
    case Bt3:
    case Gt2:
    case zt2:
    case ot2:
    case Lt3:
    case Zt2:
    case Tt3:
    case Xt3:
    case Yt3:
    case Qt3:
    case Mt3:
    case ct2:
    case Jt3:
    case Ut2:
    case xt3:
    case at2:
    case Ft3:
    case kt4:
    case Wt3:
    case Kt3:
    case Vt3:
      return true;
    default:
      return false;
  }
}
function se3(s2, t2) {
  return te2(s2, (e2, i4, n2, a2) => {
    const r2 = t2 == null ? void 0 : t2(e2, i4, n2, a2);
    if (r2 != null) return r2;
    if (typeof s2 == "object") switch (Object.prototype.toString.call(s2)) {
      case ct2:
      case at2:
      case ot2: {
        const c4 = new s2.constructor(s2 == null ? void 0 : s2.valueOf());
        return y5(c4, s2), c4;
      }
      case ht3: {
        const c4 = {};
        return y5(c4, s2), c4.length = s2.length, c4[Symbol.iterator] = s2[Symbol.iterator], c4;
      }
      default:
        return;
    }
  });
}
function pt3(s2) {
  return se3(s2);
}
function dt3(s2) {
  return s2 !== null && typeof s2 == "object" && nt2(s2) === "[object Arguments]";
}
function ie3(s2) {
  return W2(s2);
}
function re3(s2) {
  var _a;
  if (typeof s2 != "object" || s2 == null) return false;
  if (Object.getPrototypeOf(s2) === null) return true;
  if (Object.prototype.toString.call(s2) !== "[object Object]") {
    const e2 = s2[Symbol.toStringTag];
    return e2 == null || !((_a = Object.getOwnPropertyDescriptor(s2, Symbol.toStringTag)) == null ? void 0 : _a.writable) ? false : s2.toString() === `[object ${e2}]`;
  }
  let t2 = s2;
  for (; Object.getPrototypeOf(t2) !== null; ) t2 = Object.getPrototypeOf(t2);
  return Object.getPrototypeOf(s2) === t2;
}
function ne3(s2, ...t2) {
  const e2 = t2.slice(0, -1), i4 = t2[t2.length - 1];
  let n2 = s2;
  for (let a2 = 0; a2 < e2.length; a2++) {
    const r2 = e2[a2];
    n2 = F3(n2, r2, i4, /* @__PURE__ */ new Map());
  }
  return n2;
}
function F3(s2, t2, e2, i4) {
  if (k4(s2) && (s2 = Object(s2)), t2 == null || typeof t2 != "object") return s2;
  if (i4.has(t2)) return _t3(i4.get(t2));
  if (i4.set(t2, s2), Array.isArray(t2)) {
    t2 = t2.slice();
    for (let a2 = 0; a2 < t2.length; a2++) t2[a2] = t2[a2] ?? void 0;
  }
  const n2 = [...Object.keys(t2), ...rt(t2)];
  for (let a2 = 0; a2 < n2.length; a2++) {
    const r2 = n2[a2];
    let c4 = t2[r2], o2 = s2[r2];
    if (dt3(c4) && (c4 = { ...c4 }), dt3(o2) && (o2 = { ...o2 }), typeof Buffer < "u" && Buffer.isBuffer(c4) && (c4 = pt3(c4)), Array.isArray(c4)) if (typeof o2 == "object" && o2 != null) {
      const w2 = [], v4 = Reflect.ownKeys(o2);
      for (let P4 = 0; P4 < v4.length; P4++) {
        const p3 = v4[P4];
        w2[p3] = o2[p3];
      }
      o2 = w2;
    } else o2 = [];
    const m2 = e2(o2, c4, r2, s2, t2, i4);
    m2 != null ? s2[r2] = m2 : Array.isArray(c4) || it3(o2) && it3(c4) ? s2[r2] = F3(o2, c4, e2, i4) : o2 == null && re3(c4) ? s2[r2] = F3({}, c4, e2, i4) : o2 == null && ie3(c4) ? s2[r2] = pt3(c4) : (o2 === void 0 || c4 !== void 0) && (s2[r2] = c4);
  }
  return s2;
}
function ae3(s2, ...t2) {
  return ne3(s2, ...t2, Rt3);
}
var ce3 = Object.defineProperty;
var oe2 = Object.defineProperties;
var he3 = Object.getOwnPropertyDescriptors;
var ut3 = Object.getOwnPropertySymbols;
var pe3 = Object.prototype.hasOwnProperty;
var de3 = Object.prototype.propertyIsEnumerable;
var lt2 = (s2, t2, e2) => t2 in s2 ? ce3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var L2 = (s2, t2) => {
  for (var e2 in t2 || (t2 = {})) pe3.call(t2, e2) && lt2(s2, e2, t2[e2]);
  if (ut3) for (var e2 of ut3(t2)) de3.call(t2, e2) && lt2(s2, e2, t2[e2]);
  return s2;
};
var ue3 = (s2, t2) => oe2(s2, he3(t2));
function d2(s2, t2, e2) {
  var i4;
  const n2 = Ne(s2);
  return ((i4 = t2.rpcMap) == null ? void 0 : i4[n2.reference]) || `${st}?chainId=${n2.namespace}:${n2.reference}&projectId=${e2}`;
}
function b3(s2) {
  return s2.includes(":") ? s2.split(":")[1] : s2;
}
function ft3(s2) {
  return s2.map((t2) => `${t2.split(":")[0]}:${t2.split(":")[1]}`);
}
function le3(s2, t2) {
  const e2 = Object.keys(t2.namespaces).filter((n2) => n2.includes(s2));
  if (!e2.length) return [];
  const i4 = [];
  return e2.forEach((n2) => {
    const a2 = t2.namespaces[n2].accounts;
    i4.push(...a2);
  }), i4;
}
function M3(s2 = {}, t2 = {}) {
  const e2 = mt3(s2), i4 = mt3(t2);
  return ae3(e2, i4);
}
function mt3(s2) {
  var t2, e2, i4, n2, a2;
  const r2 = {};
  if (!Oe(s2)) return r2;
  for (const [c4, o2] of Object.entries(s2)) {
    const m2 = yn(c4) ? [c4] : o2.chains, w2 = o2.methods || [], v4 = o2.events || [], P4 = o2.rpcMap || {}, p3 = yo(c4);
    r2[p3] = ue3(L2(L2({}, r2[p3]), o2), { chains: ot(m2, (t2 = r2[p3]) == null ? void 0 : t2.chains), methods: ot(w2, (e2 = r2[p3]) == null ? void 0 : e2.methods), events: ot(v4, (i4 = r2[p3]) == null ? void 0 : i4.events) }), (Oe(P4) || Oe(((n2 = r2[p3]) == null ? void 0 : n2.rpcMap) || {})) && (r2[p3].rpcMap = L2(L2({}, P4), (a2 = r2[p3]) == null ? void 0 : a2.rpcMap));
  }
  return r2;
}
function vt(s2) {
  return s2.includes(":") ? s2.split(":")[2] : s2;
}
function gt3(s2) {
  const t2 = {};
  for (const [e2, i4] of Object.entries(s2)) {
    const n2 = i4.methods || [], a2 = i4.events || [], r2 = i4.accounts || [], c4 = yn(e2) ? [e2] : i4.chains ? i4.chains : ft3(i4.accounts);
    t2[e2] = { chains: c4, methods: n2, events: a2, accounts: r2 };
  }
  return t2;
}
function K3(s2) {
  return typeof s2 == "number" ? s2 : s2.includes("0x") ? parseInt(s2, 16) : (s2 = s2.includes(":") ? s2.split(":")[1] : s2, isNaN(Number(s2)) ? s2 : Number(s2));
}
var Pt3 = {};
var h4 = (s2) => Pt3[s2];
var V4 = (s2, t2) => {
  Pt3[s2] = t2;
};
var fe2 = Object.defineProperty;
var me3 = (s2, t2, e2) => t2 in s2 ? fe2(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var O3 = (s2, t2, e2) => me3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var ve2 = class {
  constructor(t2) {
    O3(this, "name", "polkadot"), O3(this, "client"), O3(this, "httpProviders"), O3(this, "events"), O3(this, "namespace"), O3(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      const n2 = b3(e2);
      t2[n2] = this.createHttpProvider(n2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var ge3 = Object.defineProperty;
var Pe3 = Object.defineProperties;
var we3 = Object.getOwnPropertyDescriptors;
var wt3 = Object.getOwnPropertySymbols;
var ye3 = Object.prototype.hasOwnProperty;
var be3 = Object.prototype.propertyIsEnumerable;
var X2 = (s2, t2, e2) => t2 in s2 ? ge3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var yt3 = (s2, t2) => {
  for (var e2 in t2 || (t2 = {})) ye3.call(t2, e2) && X2(s2, e2, t2[e2]);
  if (wt3) for (var e2 of wt3(t2)) be3.call(t2, e2) && X2(s2, e2, t2[e2]);
  return s2;
};
var bt2 = (s2, t2) => Pe3(s2, we3(t2));
var A3 = (s2, t2, e2) => X2(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Ie3 = class {
  constructor(t2) {
    A3(this, "name", "eip155"), A3(this, "client"), A3(this, "chainId"), A3(this, "namespace"), A3(this, "httpProviders"), A3(this, "events"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t2) {
    switch (t2.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t2);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t2);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t2);
    }
    return this.namespace.methods.includes(t2.request.method) ? await this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(parseInt(t2), e2), this.chainId = parseInt(t2), this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      const n2 = parseInt(b3(e2));
      t2[n2] = this.createHttpProvider(n2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t2 = this.chainId, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  async handleSwitchChain(t2) {
    var e2, i4;
    let n2 = t2.request.params ? (e2 = t2.request.params[0]) == null ? void 0 : e2.chainId : "0x0";
    n2 = n2.startsWith("0x") ? n2 : `0x${n2}`;
    const a2 = parseInt(n2, 16);
    if (this.isChainApproved(a2)) this.setDefaultChain(`${a2}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: t2.topic, request: { method: t2.request.method, params: [{ chainId: n2 }] }, chainId: (i4 = this.namespace.chains) == null ? void 0 : i4[0] }), this.setDefaultChain(`${a2}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a2}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t2) {
    return this.namespace.chains.includes(`${this.name}:${t2}`);
  }
  async getCapabilities(t2) {
    var e2, i4, n2, a2, r2;
    const c4 = (i4 = (e2 = t2.request) == null ? void 0 : e2.params) == null ? void 0 : i4[0], o2 = ((a2 = (n2 = t2.request) == null ? void 0 : n2.params) == null ? void 0 : a2[1]) || [], m2 = `${c4}${o2.join(",")}`;
    if (!c4) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const w2 = this.client.session.get(t2.topic), v4 = ((r2 = w2 == null ? void 0 : w2.sessionProperties) == null ? void 0 : r2.capabilities) || {};
    if (v4 != null && v4[m2]) return v4 == null ? void 0 : v4[m2];
    const P4 = await this.client.request(t2);
    try {
      await this.client.session.update(t2.topic, { sessionProperties: bt2(yt3({}, w2.sessionProperties || {}), { capabilities: bt2(yt3({}, v4 || {}), { [m2]: P4 }) }) });
    } catch (p3) {
      console.warn("Failed to update session with capabilities", p3);
    }
    return P4;
  }
  async getCallStatus(t2) {
    var e2, i4;
    const n2 = this.client.session.get(t2.topic), a2 = (e2 = n2.sessionProperties) == null ? void 0 : e2.bundler_name;
    if (a2) {
      const c4 = this.getBundlerUrl(t2.chainId, a2);
      try {
        return await this.getUserOperationReceipt(c4, t2);
      } catch (o2) {
        console.warn("Failed to fetch call status from bundler", o2, c4);
      }
    }
    const r2 = (i4 = n2.sessionProperties) == null ? void 0 : i4.bundler_url;
    if (r2) try {
      return await this.getUserOperationReceipt(r2, t2);
    } catch (c4) {
      console.warn("Failed to fetch call status from custom bundler", c4, r2);
    }
    if (this.namespace.methods.includes(t2.request.method)) return await this.client.request(t2);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t2, e2) {
    var i4;
    const n2 = new URL(t2), a2 = await fetch(n2, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i4 = e2.request.params) == null ? void 0 : i4[0]])) });
    if (!a2.ok) throw new Error(`Failed to fetch user operation receipt - ${a2.status}`);
    return await a2.json();
  }
  getBundlerUrl(t2, e2) {
    return `${jt3}?projectId=${this.client.core.projectId}&chainId=${t2}&bundler=${e2}`;
  }
};
var $e3 = Object.defineProperty;
var Oe3 = (s2, t2, e2) => t2 in s2 ? $e3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var C4 = (s2, t2, e2) => Oe3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Ae2 = class {
  constructor(t2) {
    C4(this, "name", "solana"), C4(this, "client"), C4(this, "httpProviders"), C4(this, "events"), C4(this, "namespace"), C4(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      const n2 = b3(e2);
      t2[n2] = this.createHttpProvider(n2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var Ce3 = Object.defineProperty;
var He3 = (s2, t2, e2) => t2 in s2 ? Ce3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var H2 = (s2, t2, e2) => He3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Ee4 = class {
  constructor(t2) {
    H2(this, "name", "cosmos"), H2(this, "client"), H2(this, "httpProviders"), H2(this, "events"), H2(this, "namespace"), H2(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      const n2 = b3(e2);
      t2[n2] = this.createHttpProvider(n2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var Ne2 = Object.defineProperty;
var Se3 = (s2, t2, e2) => t2 in s2 ? Ne2(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var E4 = (s2, t2, e2) => Se3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var De3 = class {
  constructor(t2) {
    E4(this, "name", "algorand"), E4(this, "client"), E4(this, "httpProviders"), E4(this, "events"), E4(this, "namespace"), E4(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    if (!this.httpProviders[t2]) {
      const i4 = e2 || d2(`${this.name}:${t2}`, this.namespace, this.client.core.projectId);
      if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i4);
    }
    this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      t2[e2] = this.createHttpProvider(e2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    return typeof i4 > "u" ? void 0 : new o(new f2(i4, h4("disableProviderPing")));
  }
};
var qe3 = Object.defineProperty;
var je3 = (s2, t2, e2) => t2 in s2 ? qe3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var N2 = (s2, t2, e2) => je3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Re = class {
  constructor(t2) {
    N2(this, "name", "cip34"), N2(this, "client"), N2(this, "httpProviders"), N2(this, "events"), N2(this, "namespace"), N2(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      const i4 = this.getCardanoRPCUrl(e2), n2 = b3(e2);
      t2[n2] = this.createHttpProvider(n2, i4);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  getCardanoRPCUrl(t2) {
    const e2 = this.namespace.rpcMap;
    if (e2) return e2[t2];
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || this.getCardanoRPCUrl(t2);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var _e4 = Object.defineProperty;
var Ue3 = (s2, t2, e2) => t2 in s2 ? _e4(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var S3 = (s2, t2, e2) => Ue3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Fe3 = class {
  constructor(t2) {
    S3(this, "name", "elrond"), S3(this, "client"), S3(this, "httpProviders"), S3(this, "events"), S3(this, "namespace"), S3(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      const n2 = b3(e2);
      t2[n2] = this.createHttpProvider(n2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var Le3 = Object.defineProperty;
var Me4 = (s2, t2, e2) => t2 in s2 ? Le3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var D = (s2, t2, e2) => Me4(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var xe2 = class {
  constructor(t2) {
    D(this, "name", "multiversx"), D(this, "client"), D(this, "httpProviders"), D(this, "events"), D(this, "namespace"), D(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      const n2 = b3(e2);
      t2[n2] = this.createHttpProvider(n2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var Be3 = Object.defineProperty;
var Ge4 = (s2, t2, e2) => t2 in s2 ? Be3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var q2 = (s2, t2, e2) => Ge4(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Je3 = class {
  constructor(t2) {
    q2(this, "name", "near"), q2(this, "client"), q2(this, "httpProviders"), q2(this, "events"), q2(this, "namespace"), q2(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i4 = e2 || d2(`${this.name}:${t2}`, this.namespace);
      if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i4);
    }
    this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      var i4;
      t2[e2] = this.createHttpProvider(e2, (i4 = this.namespace.rpcMap) == null ? void 0 : i4[e2]);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace);
    return typeof i4 > "u" ? void 0 : new o(new f2(i4, h4("disableProviderPing")));
  }
};
var ze3 = Object.defineProperty;
var ke4 = (s2, t2, e2) => t2 in s2 ? ze3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var j = (s2, t2, e2) => ke4(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var We4 = class {
  constructor(t2) {
    j(this, "name", "tezos"), j(this, "client"), j(this, "httpProviders"), j(this, "events"), j(this, "namespace"), j(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace = Object.assign(this.namespace, t2);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider().request(t2.request);
  }
  setDefaultChain(t2, e2) {
    if (this.chainId = t2, !this.httpProviders[t2]) {
      const i4 = e2 || d2(`${this.name}:${t2}`, this.namespace);
      if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
      this.setHttpProvider(t2, i4);
    }
    this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t2 = {};
    return this.namespace.chains.forEach((e2) => {
      t2[e2] = this.createHttpProvider(e2);
    }), t2;
  }
  getHttpProvider() {
    const t2 = `${this.name}:${this.chainId}`, e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace);
    return typeof i4 > "u" ? void 0 : new o(new f2(i4));
  }
};
var Ke4 = Object.defineProperty;
var Ve3 = (s2, t2, e2) => t2 in s2 ? Ke4(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var R3 = (s2, t2, e2) => Ve3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var Xe3 = class {
  constructor(t2) {
    R3(this, "name", I2), R3(this, "client"), R3(this, "httpProviders"), R3(this, "events"), R3(this, "namespace"), R3(this, "chainId"), this.namespace = t2.namespace, this.events = h4("events"), this.client = h4("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t2) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t2.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t2.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t2.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t2.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t2) {
    return this.namespace.methods.includes(t2.request.method) ? this.client.request(t2) : this.getHttpProvider(t2.chainId).request(t2.request);
  }
  setDefaultChain(t2, e2) {
    this.httpProviders[t2] || this.setHttpProvider(t2, e2), this.chainId = t2, this.events.emit(u3.DEFAULT_CHAIN_CHANGED, `${this.name}:${t2}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t2 = this.namespace.chains[0];
    if (!t2) throw new Error("ChainId not found");
    return t2.split(":")[1];
  }
  getAccounts() {
    const t2 = this.namespace.accounts;
    return t2 ? [...new Set(t2.filter((e2) => e2.split(":")[1] === this.chainId.toString()).map((e2) => e2.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t2, e2;
    const i4 = {};
    return (e2 = (t2 = this.namespace) == null ? void 0 : t2.accounts) == null || e2.forEach((n2) => {
      const a2 = Ne(n2);
      i4[`${a2.namespace}:${a2.reference}`] = this.createHttpProvider(n2);
    }), i4;
  }
  getHttpProvider(t2) {
    const e2 = this.httpProviders[t2];
    if (typeof e2 > "u") throw new Error(`JSON-RPC provider for ${t2} not found`);
    return e2;
  }
  setHttpProvider(t2, e2) {
    const i4 = this.createHttpProvider(t2, e2);
    i4 && (this.httpProviders[t2] = i4);
  }
  createHttpProvider(t2, e2) {
    const i4 = e2 || d2(t2, this.namespace, this.client.core.projectId);
    if (!i4) throw new Error(`No RPC url provided for chainId: ${t2}`);
    return new o(new f2(i4, h4("disableProviderPing")));
  }
};
var Ye3 = Object.defineProperty;
var Qe4 = Object.defineProperties;
var Ze4 = Object.getOwnPropertyDescriptors;
var It3 = Object.getOwnPropertySymbols;
var Te2 = Object.prototype.hasOwnProperty;
var ts2 = Object.prototype.propertyIsEnumerable;
var Y3 = (s2, t2, e2) => t2 in s2 ? Ye3(s2, t2, { enumerable: true, configurable: true, writable: true, value: e2 }) : s2[t2] = e2;
var x = (s2, t2) => {
  for (var e2 in t2 || (t2 = {})) Te2.call(t2, e2) && Y3(s2, e2, t2[e2]);
  if (It3) for (var e2 of It3(t2)) ts2.call(t2, e2) && Y3(s2, e2, t2[e2]);
  return s2;
};
var Q2 = (s2, t2) => Qe4(s2, Ze4(t2));
var l3 = (s2, t2, e2) => Y3(s2, typeof t2 != "symbol" ? t2 + "" : t2, e2);
var B2 = class _B {
  constructor(t2) {
    l3(this, "client"), l3(this, "namespaces"), l3(this, "optionalNamespaces"), l3(this, "sessionProperties"), l3(this, "scopedProperties"), l3(this, "events", new import_events5.default()), l3(this, "rpcProviders", {}), l3(this, "session"), l3(this, "providerOpts"), l3(this, "logger"), l3(this, "uri"), l3(this, "disableProviderPing", false), this.providerOpts = t2, this.logger = typeof (t2 == null ? void 0 : t2.logger) < "u" && typeof (t2 == null ? void 0 : t2.logger) != "string" ? t2.logger : (0, import_pino.default)(k({ level: (t2 == null ? void 0 : t2.logger) || et2 })), this.disableProviderPing = (t2 == null ? void 0 : t2.disableProviderPing) || false;
  }
  static async init(t2) {
    const e2 = new _B(t2);
    return await e2.initialize(), e2;
  }
  async request(t2, e2, i4) {
    const [n2, a2] = this.validateChain(e2);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(n2).request({ request: x({}, t2), chainId: `${n2}:${a2}`, topic: this.session.topic, expiry: i4 });
  }
  sendAsync(t2, e2, i4, n2) {
    const a2 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t2, i4, n2).then((r2) => e2(null, formatJsonRpcResult(a2, r2))).catch((r2) => e2(r2, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t2;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t2 = this.session) == null ? void 0 : t2.topic, reason: Nt("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t2) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t2), await this.cleanupPendingPairings(), !t2.skipPairing) return await this.pair(t2.pairingTopic);
  }
  async authenticate(t2, e2) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(t2), await this.cleanupPendingPairings();
    const { uri: i4, response: n2 } = await this.client.authenticate(t2, e2);
    i4 && (this.uri = i4, this.events.emit("display_uri", i4));
    const a2 = await n2();
    if (this.session = a2.session, this.session) {
      const r2 = gt3(this.session.namespaces);
      this.namespaces = M3(this.namespaces, r2), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a2;
  }
  on(t2, e2) {
    this.events.on(t2, e2);
  }
  once(t2, e2) {
    this.events.once(t2, e2);
  }
  removeListener(t2, e2) {
    this.events.removeListener(t2, e2);
  }
  off(t2, e2) {
    this.events.off(t2, e2);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t2) {
    const { uri: e2, approval: i4 } = await this.client.connect({ pairingTopic: t2, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e2 && (this.uri = e2, this.events.emit("display_uri", e2));
    const n2 = await i4();
    this.session = n2;
    const a2 = gt3(n2.namespaces);
    return this.namespaces = M3(this.namespaces, a2), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t2, e2) {
    try {
      if (!this.session) return;
      const [i4, n2] = this.validateChain(t2), a2 = this.getProvider(i4);
      a2.name === I2 ? a2.setDefaultChain(`${i4}:${n2}`, e2) : a2.setDefaultChain(n2, e2);
    } catch (i4) {
      if (!/Please call connect/.test(i4.message)) throw i4;
    }
  }
  async cleanupPendingPairings(t2 = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e2 = this.client.pairing.getAll();
    if (se(e2)) {
      for (const i4 of e2) t2.deletePairings ? this.client.core.expirer.set(i4.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i4.topic);
      this.logger.info(`Inactive pairings cleared: ${e2.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t2, e2;
    if (this.client = this.providerOpts.client || await Ee3.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || et2, relayUrl: this.providerOpts.relayUrl || St4, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i4) {
      throw this.logger.error("Failed to get session", i4), new Error(`The provided session: ${(e2 = (t2 = this.providerOpts) == null ? void 0 : t2.session) == null ? void 0 : e2.topic} doesn't exist in the Sign client`);
    }
    else {
      const i4 = this.client.session.getAll();
      this.session = i4[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const t2 = [...new Set(Object.keys(this.session.namespaces).map((e2) => yo(e2)))];
    V4("client", this.client), V4("events", this.events), V4("disableProviderPing", this.disableProviderPing), t2.forEach((e2) => {
      if (!this.session) return;
      const i4 = le3(e2, this.session), n2 = ft3(i4), a2 = M3(this.namespaces, this.optionalNamespaces), r2 = Q2(x({}, a2[e2]), { accounts: i4, chains: n2 });
      switch (e2) {
        case "eip155":
          this.rpcProviders[e2] = new Ie3({ namespace: r2 });
          break;
        case "algorand":
          this.rpcProviders[e2] = new De3({ namespace: r2 });
          break;
        case "solana":
          this.rpcProviders[e2] = new Ae2({ namespace: r2 });
          break;
        case "cosmos":
          this.rpcProviders[e2] = new Ee4({ namespace: r2 });
          break;
        case "polkadot":
          this.rpcProviders[e2] = new ve2({ namespace: r2 });
          break;
        case "cip34":
          this.rpcProviders[e2] = new Re({ namespace: r2 });
          break;
        case "elrond":
          this.rpcProviders[e2] = new Fe3({ namespace: r2 });
          break;
        case "multiversx":
          this.rpcProviders[e2] = new xe2({ namespace: r2 });
          break;
        case "near":
          this.rpcProviders[e2] = new Je3({ namespace: r2 });
          break;
        case "tezos":
          this.rpcProviders[e2] = new We4({ namespace: r2 });
          break;
        default:
          this.rpcProviders[I2] ? this.rpcProviders[I2].updateNamespace(r2) : this.rpcProviders[I2] = new Xe3({ namespace: r2 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t2) => {
      var e2;
      const { topic: i4 } = t2;
      i4 === ((e2 = this.session) == null ? void 0 : e2.topic) && this.events.emit("session_ping", t2);
    }), this.client.on("session_event", (t2) => {
      var e2;
      const { params: i4, topic: n2 } = t2;
      if (n2 !== ((e2 = this.session) == null ? void 0 : e2.topic)) return;
      const { event: a2 } = i4;
      if (a2.name === "accountsChanged") {
        const r2 = a2.data;
        r2 && se(r2) && this.events.emit("accountsChanged", r2.map(vt));
      } else if (a2.name === "chainChanged") {
        const r2 = i4.chainId, c4 = i4.event.data, o2 = yo(r2), m2 = K3(r2) !== K3(c4) ? `${o2}:${K3(c4)}` : r2;
        this.onChainChanged(m2);
      } else this.events.emit(a2.name, a2.data);
      this.events.emit("session_event", t2);
    }), this.client.on("session_update", ({ topic: t2, params: e2 }) => {
      var i4, n2;
      if (t2 !== ((i4 = this.session) == null ? void 0 : i4.topic)) return;
      const { namespaces: a2 } = e2, r2 = (n2 = this.client) == null ? void 0 : n2.session.get(t2);
      this.session = Q2(x({}, r2), { namespaces: a2 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t2, params: e2 });
    }), this.client.on("session_delete", async (t2) => {
      var e2;
      t2.topic === ((e2 = this.session) == null ? void 0 : e2.topic) && (await this.cleanup(), this.events.emit("session_delete", t2), this.events.emit("disconnect", Q2(x({}, Nt("USER_DISCONNECTED")), { data: t2.topic })));
    }), this.on(u3.DEFAULT_CHAIN_CHANGED, (t2) => {
      this.onChainChanged(t2, true);
    });
  }
  getProvider(t2) {
    return this.rpcProviders[t2] || this.rpcProviders[I2];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t2) => {
      var e2;
      this.getProvider(t2).updateNamespace((e2 = this.session) == null ? void 0 : e2.namespaces[t2]);
    });
  }
  setNamespaces(t2) {
    const { namespaces: e2 = {}, optionalNamespaces: i4 = {}, sessionProperties: n2, scopedProperties: a2 } = t2;
    this.optionalNamespaces = M3(e2, i4), this.sessionProperties = n2, this.scopedProperties = a2;
  }
  validateChain(t2) {
    const [e2, i4] = (t2 == null ? void 0 : t2.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [e2, i4];
    if (e2 && !Object.keys(this.namespaces || {}).map((r2) => yo(r2)).includes(e2)) throw new Error(`Namespace '${e2}' is not configured. Please call connect() first with namespace config.`);
    if (e2 && i4) return [e2, i4];
    const n2 = yo(Object.keys(this.namespaces)[0]), a2 = this.rpcProviders[n2].getDefaultChain();
    return [n2, a2];
  }
  async requestAccounts() {
    const [t2] = this.validateChain();
    return await this.getProvider(t2).requestAccounts();
  }
  async onChainChanged(t2, e2 = false) {
    if (!this.namespaces) return;
    const [i4, n2] = this.validateChain(t2);
    if (!n2) return;
    this.updateNamespaceChain(i4, n2), this.events.emit("chainChanged", n2);
    const a2 = this.getProvider(i4).getDefaultChain();
    e2 || this.getProvider(i4).setDefaultChain(n2), this.emitAccountsChangedOnChainChange({ namespace: i4, previousChainId: a2, newChainId: t2 }), await this.persist("namespaces", this.namespaces);
  }
  emitAccountsChangedOnChainChange({ namespace: t2, previousChainId: e2, newChainId: i4 }) {
    var n2, a2;
    try {
      if (e2 === i4) return;
      const r2 = (a2 = (n2 = this.session) == null ? void 0 : n2.namespaces[t2]) == null ? void 0 : a2.accounts;
      if (!r2) return;
      const c4 = r2.filter((o2) => o2.includes(`${i4}:`)).map(vt);
      if (!se(c4)) return;
      this.events.emit("accountsChanged", c4);
    } catch (r2) {
      this.logger.warn("Failed to emit accountsChanged on chain change", r2);
    }
  }
  updateNamespaceChain(t2, e2) {
    if (!this.namespaces) return;
    const i4 = this.namespaces[t2] ? t2 : `${t2}:${e2}`, n2 = { chains: [], methods: [], events: [], defaultChain: e2 };
    this.namespaces[i4] ? this.namespaces[i4] && (this.namespaces[i4].defaultChain = e2) : this.namespaces[i4] = n2;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t2, e2) {
    var i4;
    const n2 = ((i4 = this.session) == null ? void 0 : i4.topic) || "";
    await this.client.core.storage.setItem(`${U3}/${t2}${n2}`, e2);
  }
  async getFromStore(t2) {
    var e2;
    const i4 = ((e2 = this.session) == null ? void 0 : e2.topic) || "";
    return await this.client.core.storage.getItem(`${U3}/${t2}${i4}`);
  }
  async deleteFromStore(t2) {
    var e2;
    const i4 = ((e2 = this.session) == null ? void 0 : e2.topic) || "";
    await this.client.core.storage.removeItem(`${U3}/${t2}${i4}`);
  }
  async cleanupStorage() {
    var t2;
    try {
      if (((t2 = this.client) == null ? void 0 : t2.session.length) > 0) return;
      const e2 = await this.client.core.storage.getKeys();
      for (const i4 of e2) i4.startsWith(U3) && await this.client.core.storage.removeItem(i4);
    } catch (e2) {
      this.logger.warn("Failed to cleanup storage", e2);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SIWXUtil.js
var SIWXUtil = {
  getSIWX() {
    return OptionsController.state.siwx;
  },
  async initializeIfEnabled() {
    var _a;
    const siwx = OptionsController.state.siwx;
    const caipAddress = ChainController.getActiveCaipAddress();
    if (!(siwx && caipAddress)) {
      return;
    }
    const [namespace, chainId, address] = caipAddress.split(":");
    if (!ChainController.checkIfSupportedNetwork(namespace)) {
      return;
    }
    try {
      const sessions = await siwx.getSessions(`${namespace}:${chainId}`, address);
      if (sessions.length) {
        return;
      }
      await ModalController.open({
        view: "SIWXSignMessage"
      });
    } catch (error) {
      console.error("SIWXUtil:initializeIfEnabled", error);
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties: this.getSIWXEventProperties()
      });
      await ((_a = ConnectionController._getClient()) == null ? void 0 : _a.disconnect().catch(console.error));
      RouterController.reset("Connect");
      SnackController.showError("A problem occurred while trying initialize authentication");
    }
  },
  async requestSignMessage() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    const client = ConnectionController._getClient();
    if (!siwx) {
      throw new Error("SIWX is not enabled");
    }
    if (!address) {
      throw new Error("No ActiveCaipAddress found");
    }
    if (!network) {
      throw new Error("No ActiveCaipNetwork or client found");
    }
    if (!client) {
      throw new Error("No ConnectionController client found");
    }
    try {
      const siwxMessage = await siwx.createMessage({
        chainId: network.caipNetworkId,
        accountAddress: address
      });
      const message = siwxMessage.toString();
      const connectorId = ConnectorController.getConnectorId(network.chainNamespace);
      if (connectorId === ConstantsUtil.CONNECTOR_ID.AUTH) {
        RouterController.pushTransactionStack({});
      }
      const signature = await client.signMessage(message);
      await siwx.addSession({
        data: siwxMessage,
        message,
        signature
      });
      ModalController.close();
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_SUCCESS",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      const properties = this.getSIWXEventProperties();
      if (!ModalController.state.open || RouterController.state.view === "ApproveTransaction") {
        await ModalController.open({
          view: "SIWXSignMessage"
        });
      }
      if (properties.isSmartAccount) {
        SnackController.showError("This application might not support Smart Accounts");
      } else {
        SnackController.showError("Signature declined");
      }
      EventsController.sendEvent({
        type: "track",
        event: "SIWX_AUTH_ERROR",
        properties
      });
      console.error("SWIXUtil:requestSignMessage", error);
    }
  },
  async cancelSignMessage() {
    var _a;
    try {
      const siwx = this.getSIWX();
      const isRequired = (_a = siwx == null ? void 0 : siwx.getRequired) == null ? void 0 : _a.call(siwx);
      if (isRequired) {
        await ConnectionController.disconnect();
      } else {
        ModalController.close();
      }
      RouterController.reset("Connect");
      EventsController.sendEvent({
        event: "CLICK_CANCEL_SIWX",
        type: "track",
        properties: this.getSIWXEventProperties()
      });
    } catch (error) {
      console.error("SIWXUtil:cancelSignMessage", error);
    }
  },
  async getSessions() {
    const siwx = OptionsController.state.siwx;
    const address = CoreHelperUtil.getPlainAddress(ChainController.getActiveCaipAddress());
    const network = ChainController.getActiveCaipNetwork();
    if (!(siwx && address && network)) {
      return [];
    }
    return siwx.getSessions(network.caipNetworkId, address);
  },
  async isSIWXCloseDisabled() {
    var _a;
    const siwx = this.getSIWX();
    if (siwx) {
      const isApproveSignScreen = RouterController.state.view === "ApproveTransaction";
      const isSiwxSignMessage = RouterController.state.view === "SIWXSignMessage";
      if (isApproveSignScreen || isSiwxSignMessage) {
        return ((_a = siwx.getRequired) == null ? void 0 : _a.call(siwx)) && (await this.getSessions()).length === 0;
      }
    }
    return false;
  },
  async universalProviderAuthenticate({ universalProvider, chains, methods }) {
    var _a, _b, _c2;
    const siwx = SIWXUtil.getSIWX();
    const namespaces = new Set(chains.map((chain) => chain.split(":")[0]));
    if (!siwx || namespaces.size !== 1 || !namespaces.has("eip155")) {
      return false;
    }
    const siwxMessage = await siwx.createMessage({
      chainId: ((_a = ChainController.getActiveCaipNetwork()) == null ? void 0 : _a.caipNetworkId) || "",
      accountAddress: ""
    });
    const result = await universalProvider.authenticate({
      nonce: siwxMessage.nonce,
      domain: siwxMessage.domain,
      uri: siwxMessage.uri,
      exp: siwxMessage.expirationTime,
      iat: siwxMessage.issuedAt,
      nbf: siwxMessage.notBefore,
      requestId: siwxMessage.requestId,
      version: siwxMessage.version,
      resources: siwxMessage.resources,
      statement: siwxMessage.statement,
      chainId: siwxMessage.chainId,
      methods,
      // The first chainId is what is used for universal provider to build the message
      chains: [siwxMessage.chainId, ...chains.filter((chain) => chain !== siwxMessage.chainId)]
    });
    SnackController.showLoading("Authenticating...", { autoClose: false });
    AccountController.setConnectedWalletInfo({
      ...result.session.peer.metadata,
      name: result.session.peer.metadata.name,
      icon: (_b = result.session.peer.metadata.icons) == null ? void 0 : _b[0],
      type: "WALLET_CONNECT"
    }, Array.from(namespaces)[0]);
    if ((_c2 = result == null ? void 0 : result.auths) == null ? void 0 : _c2.length) {
      const sessions = result.auths.map((cacao) => {
        const message = universalProvider.client.formatAuthMessage({
          request: cacao.p,
          iss: cacao.p.iss
        });
        return {
          data: {
            ...cacao.p,
            accountAddress: cacao.p.iss.split(":").slice(-1).join(""),
            chainId: cacao.p.iss.split(":").slice(2, 4).join(":"),
            uri: cacao.p.aud,
            version: cacao.p.version || siwxMessage.version,
            expirationTime: cacao.p.exp,
            issuedAt: cacao.p.iat,
            notBefore: cacao.p.nbf
          },
          message,
          signature: cacao.s.s,
          cacao
        };
      });
      try {
        await siwx.setSessions(sessions);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_SUCCESS",
          properties: SIWXUtil.getSIWXEventProperties()
        });
      } catch (error) {
        console.error("SIWX:universalProviderAuth - failed to set sessions", error);
        EventsController.sendEvent({
          type: "track",
          event: "SIWX_AUTH_ERROR",
          properties: SIWXUtil.getSIWXEventProperties()
        });
        await universalProvider.disconnect().catch(console.error);
        throw error;
      } finally {
        SnackController.hide();
      }
    }
    return true;
  },
  getSIWXEventProperties() {
    var _a, _b;
    const activeChainNamespace = ChainController.state.activeChain;
    return {
      network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || "",
      isSmartAccount: ((_b = AccountController.state.preferredAccountTypes) == null ? void 0 : _b[activeChainNamespace]) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
    };
  },
  async clearSessions() {
    const siwx = this.getSIWX();
    if (siwx) {
      await siwx.setSessions([]);
    }
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/ModalUtil.js
var ModalUtil = {
  isUnsupportedChainView() {
    return RouterController.state.view === "UnsupportedChain" || RouterController.state.view === "SwitchNetwork" && RouterController.state.history.includes("UnsupportedChain");
  },
  async safeClose() {
    if (this.isUnsupportedChainView()) {
      ModalController.shake();
      return;
    }
    const isSIWXCloseDisabled = await SIWXUtil.isSIWXCloseDisabled();
    if (isSIWXCloseDisabled) {
      ModalController.shake();
      return;
    }
    ModalController.close();
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OnRampController.js
var USDC_CURRENCY_DEFAULT = {
  id: "2b92315d-eab7-5bef-84fa-089a131333f5",
  name: "USD Coin",
  symbol: "USDC",
  networks: [
    {
      name: "ethereum-mainnet",
      display_name: "Ethereum",
      chain_id: "1",
      contract_address: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
    },
    {
      name: "polygon-mainnet",
      display_name: "Polygon",
      chain_id: "137",
      contract_address: "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174"
    }
  ]
};
var USD_CURRENCY_DEFAULT = {
  id: "USD",
  payment_method_limits: [
    {
      id: "card",
      min: "10.00",
      max: "7500.00"
    },
    {
      id: "ach_bank_account",
      min: "10.00",
      max: "25000.00"
    }
  ]
};
var defaultState = {
  providers: ONRAMP_PROVIDERS,
  selectedProvider: null,
  error: null,
  purchaseCurrency: USDC_CURRENCY_DEFAULT,
  paymentCurrency: USD_CURRENCY_DEFAULT,
  purchaseCurrencies: [USDC_CURRENCY_DEFAULT],
  paymentCurrencies: [],
  quotesLoading: false
};
var state20 = proxy(defaultState);
var controller13 = {
  state: state20,
  subscribe(callback) {
    return subscribe(state20, () => callback(state20));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state20, key, callback);
  },
  setSelectedProvider(provider) {
    if (provider && provider.name === "meld") {
      const currency = ChainController.state.activeChain === ConstantsUtil.CHAIN.SOLANA ? "SOL" : "USDC";
      const address = AccountController.state.address ?? "";
      const url = new URL(provider.url);
      url.searchParams.append("publicKey", MELD_PUBLIC_KEY);
      url.searchParams.append("destinationCurrencyCode", currency);
      url.searchParams.append("walletAddress", address);
      url.searchParams.append("externalCustomerId", OptionsController.state.projectId);
      state20.selectedProvider = { ...provider, url: url.toString() };
    } else {
      state20.selectedProvider = provider;
    }
  },
  setOnrampProviders(providers) {
    if (Array.isArray(providers) && providers.every((item) => typeof item === "string")) {
      const validOnramp = providers;
      const newProviders = ONRAMP_PROVIDERS.filter((provider) => validOnramp.includes(provider.name));
      state20.providers = newProviders;
    } else {
      state20.providers = [];
    }
  },
  setPurchaseCurrency(currency) {
    state20.purchaseCurrency = currency;
  },
  setPaymentCurrency(currency) {
    state20.paymentCurrency = currency;
  },
  setPurchaseAmount(amount) {
    OnRampController.state.purchaseAmount = amount;
  },
  setPaymentAmount(amount) {
    OnRampController.state.paymentAmount = amount;
  },
  async getAvailableCurrencies() {
    const options = await BlockchainApiController.getOnrampOptions();
    state20.purchaseCurrencies = options.purchaseCurrencies;
    state20.paymentCurrencies = options.paymentCurrencies;
    state20.paymentCurrency = options.paymentCurrencies[0] || USD_CURRENCY_DEFAULT;
    state20.purchaseCurrency = options.purchaseCurrencies[0] || USDC_CURRENCY_DEFAULT;
    await ApiController.fetchCurrencyImages(options.paymentCurrencies.map((currency) => currency.id));
    await ApiController.fetchTokenImages(options.purchaseCurrencies.map((currency) => currency.symbol));
  },
  async getQuote() {
    var _a, _b;
    state20.quotesLoading = true;
    try {
      const quote = await BlockchainApiController.getOnrampQuote({
        purchaseCurrency: state20.purchaseCurrency,
        paymentCurrency: state20.paymentCurrency,
        amount: ((_a = state20.paymentAmount) == null ? void 0 : _a.toString()) || "0",
        network: (_b = state20.purchaseCurrency) == null ? void 0 : _b.symbol
      });
      state20.quotesLoading = false;
      state20.purchaseAmount = Number(quote == null ? void 0 : quote.purchaseAmount.amount);
      return quote;
    } catch (error) {
      state20.error = error.message;
      state20.quotesLoading = false;
      return null;
    } finally {
      state20.quotesLoading = false;
    }
  },
  resetState() {
    state20.selectedProvider = null;
    state20.error = null;
    state20.purchaseCurrency = USDC_CURRENCY_DEFAULT;
    state20.paymentCurrency = USD_CURRENCY_DEFAULT;
    state20.purchaseCurrencies = [USDC_CURRENCY_DEFAULT];
    state20.paymentCurrencies = [];
    state20.paymentAmount = void 0;
    state20.purchaseAmount = void 0;
    state20.quotesLoading = false;
  }
};
var OnRampController = withErrorBoundary(controller13);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapApiUtil.js
var SwapApiUtil = {
  async getTokenList() {
    var _a;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    const response = await BlockchainApiController.fetchSwapTokens({
      chainId: caipNetwork == null ? void 0 : caipNetwork.caipNetworkId
    });
    const tokens = ((_a = response == null ? void 0 : response.tokens) == null ? void 0 : _a.map((token) => ({
      ...token,
      eip2612: false,
      quantity: {
        decimals: "0",
        numeric: "0"
      },
      price: 0,
      value: 0
    }))) || [];
    return tokens;
  },
  async fetchGasPrice() {
    var _a, _b;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return null;
    }
    try {
      switch (caipNetwork.chainNamespace) {
        case "solana":
          const lamportsPerSignature = (_b = await ((_a = ConnectionController) == null ? void 0 : _a.estimateGas({ chainNamespace: "solana" }))) == null ? void 0 : _b.toString();
          return {
            standard: lamportsPerSignature,
            fast: lamportsPerSignature,
            instant: lamportsPerSignature
          };
        case "eip155":
        default:
          return await BlockchainApiController.fetchGasPrice({
            chainId: caipNetwork.caipNetworkId
          });
      }
    } catch {
      return null;
    }
  },
  async fetchSwapAllowance({ tokenAddress, userAddress, sourceTokenAmount, sourceTokenDecimals }) {
    const response = await BlockchainApiController.fetchSwapAllowance({
      tokenAddress,
      userAddress
    });
    if ((response == null ? void 0 : response.allowance) && sourceTokenAmount && sourceTokenDecimals) {
      const parsedValue = ConnectionController.parseUnits(sourceTokenAmount, sourceTokenDecimals) || 0;
      const hasAllowance = BigInt(response.allowance) >= parsedValue;
      return hasAllowance;
    }
    return false;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const address = AccountController.state.address;
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!address || !caipNetwork) {
      return [];
    }
    const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);
    const balances = response.balances.filter((balance) => balance.quantity.decimals !== "0");
    AccountController.setTokenBalance(balances, ChainController.state.activeChain);
    return this.mapBalancesToSwapTokens(balances);
  },
  mapBalancesToSwapTokens(balances) {
    return (balances == null ? void 0 : balances.map((token) => ({
      ...token,
      address: (token == null ? void 0 : token.address) ? token.address : ChainController.getActiveNetworkTokenAddress(),
      decimals: parseInt(token.quantity.decimals, 10),
      logoUri: token.iconUrl,
      eip2612: false
    }))) || [];
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js
var SwapCalculationUtil = {
  getGasPriceInEther(gas, gasPrice) {
    const totalGasCostInWei = gasPrice * gas;
    const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;
    return totalGasCostInEther;
  },
  getGasPriceInUSD(networkPrice, gas, gasPrice) {
    const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);
    const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);
    const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);
    return gasCostInUSD.toNumber();
  },
  getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {
    const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);
    const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);
    const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);
    return priceImpact.toNumber();
  },
  getMaxSlippage(slippage, toTokenAmount) {
    const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);
    const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);
    return maxSlippageAmount.toNumber();
  },
  getProviderFee(sourceTokenAmount, feePercentage = 85e-4) {
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);
    return providerFee.toString();
  },
  isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {
    const gasPrice = gasPriceInUSD || "0";
    if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {
      return true;
    }
    return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);
  },
  isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {
    var _a, _b;
    const sourceTokenBalance = (_b = (_a = balance == null ? void 0 : balance.find((token) => token.address === sourceTokenAddress)) == null ? void 0 : _a.quantity) == null ? void 0 : _b.numeric;
    const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || "0").lt(sourceTokenAmount);
    return isInSufficientBalance;
  },
  getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {
    if (sourceTokenAmount === "0") {
      return "0";
    }
    if (!sourceToken || !toToken) {
      return "0";
    }
    const sourceTokenDecimals = sourceToken.decimals;
    const sourceTokenPriceInUSD = sourceTokenPrice;
    const toTokenDecimals = toToken.decimals;
    const toTokenPriceInUSD = toTokenPrice;
    if (toTokenPriceInUSD <= 0) {
      return "0";
    }
    const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(85e-4);
    const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);
    const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));
    const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);
    const decimalDifference = sourceTokenDecimals - toTokenDecimals;
    const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit.times(priceRatio).div(NumberUtil.bigNumber(10).pow(decimalDifference));
    const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));
    const amount = toTokenAmount.toFixed(toTokenDecimals).toString();
    return amount;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js
var INITIAL_GAS_LIMIT = 15e4;
var TO_AMOUNT_DECIMALS = 6;
var initialState = {
  // Loading states
  initializing: false,
  initialized: false,
  loadingPrices: false,
  loadingQuote: false,
  loadingApprovalTransaction: false,
  loadingBuildTransaction: false,
  loadingTransaction: false,
  // Error states
  fetchError: false,
  // Approval & Swap transaction states
  approvalTransaction: void 0,
  swapTransaction: void 0,
  transactionError: void 0,
  // Input values
  sourceToken: void 0,
  sourceTokenAmount: "",
  sourceTokenPriceInUSD: 0,
  toToken: void 0,
  toTokenAmount: "",
  toTokenPriceInUSD: 0,
  networkPrice: "0",
  networkBalanceInUSD: "0",
  networkTokenSymbol: "",
  inputError: void 0,
  // Request values
  slippage: ConstantsUtil2.CONVERT_SLIPPAGE_TOLERANCE,
  // Tokens
  tokens: void 0,
  popularTokens: void 0,
  suggestedTokens: void 0,
  foundTokens: void 0,
  myTokensWithBalance: void 0,
  tokensPriceMap: {},
  // Calculations
  gasFee: "0",
  gasPriceInUSD: 0,
  priceImpact: void 0,
  maxSlippage: void 0,
  providerFee: void 0
};
var state21 = proxy(initialState);
var controller14 = {
  state: state21,
  subscribe(callback) {
    return subscribe(state21, () => callback(state21));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state21, key, callback);
  },
  getParams() {
    var _a, _b, _c2, _d, _e5, _f, _g, _h;
    const caipAddress = ChainController.state.activeCaipAddress;
    const namespace = ChainController.state.activeChain;
    const address = CoreHelperUtil.getPlainAddress(caipAddress);
    const networkAddress = ChainController.getActiveNetworkTokenAddress();
    const connectorId = ConnectorController.getConnectorId(namespace);
    if (!address) {
      throw new Error("No address found to swap the tokens from.");
    }
    const invalidToToken = !((_a = state21.toToken) == null ? void 0 : _a.address) || !((_b = state21.toToken) == null ? void 0 : _b.decimals);
    const invalidSourceToken = !((_c2 = state21.sourceToken) == null ? void 0 : _c2.address) || !((_d = state21.sourceToken) == null ? void 0 : _d.decimals) || !NumberUtil.bigNumber(state21.sourceTokenAmount).gt(0);
    const invalidSourceTokenAmount = !state21.sourceTokenAmount;
    return {
      networkAddress,
      fromAddress: address,
      fromCaipAddress: caipAddress,
      sourceTokenAddress: (_e5 = state21.sourceToken) == null ? void 0 : _e5.address,
      toTokenAddress: (_f = state21.toToken) == null ? void 0 : _f.address,
      toTokenAmount: state21.toTokenAmount,
      toTokenDecimals: (_g = state21.toToken) == null ? void 0 : _g.decimals,
      sourceTokenAmount: state21.sourceTokenAmount,
      sourceTokenDecimals: (_h = state21.sourceToken) == null ? void 0 : _h.decimals,
      invalidToToken,
      invalidSourceToken,
      invalidSourceTokenAmount,
      availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,
      isAuthConnector: connectorId === ConstantsUtil.CONNECTOR_ID.AUTH
    };
  },
  setSourceToken(sourceToken) {
    if (!sourceToken) {
      state21.sourceToken = sourceToken;
      state21.sourceTokenAmount = "";
      state21.sourceTokenPriceInUSD = 0;
      return;
    }
    state21.sourceToken = sourceToken;
    SwapController.setTokenPrice(sourceToken.address, "sourceToken");
  },
  setSourceTokenAmount(amount) {
    state21.sourceTokenAmount = amount;
  },
  setToToken(toToken) {
    if (!toToken) {
      state21.toToken = toToken;
      state21.toTokenAmount = "";
      state21.toTokenPriceInUSD = 0;
      return;
    }
    state21.toToken = toToken;
    SwapController.setTokenPrice(toToken.address, "toToken");
  },
  setToTokenAmount(amount) {
    state21.toTokenAmount = amount ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS) : "";
  },
  async setTokenPrice(address, target) {
    let price = state21.tokensPriceMap[address] || 0;
    if (!price) {
      state21.loadingPrices = true;
      price = await SwapController.getAddressPrice(address);
    }
    if (target === "sourceToken") {
      state21.sourceTokenPriceInUSD = price;
    } else if (target === "toToken") {
      state21.toTokenPriceInUSD = price;
    }
    if (state21.loadingPrices) {
      state21.loadingPrices = false;
    }
    if (SwapController.getParams().availableToSwap) {
      SwapController.swapTokens();
    }
  },
  switchTokens() {
    if (state21.initializing || !state21.initialized) {
      return;
    }
    const newSourceToken = state21.toToken ? { ...state21.toToken } : void 0;
    const newToToken = state21.sourceToken ? { ...state21.sourceToken } : void 0;
    const newSourceTokenAmount = newSourceToken && state21.toTokenAmount === "" ? "1" : state21.toTokenAmount;
    SwapController.setSourceToken(newSourceToken);
    SwapController.setToToken(newToToken);
    SwapController.setSourceTokenAmount(newSourceTokenAmount);
    SwapController.setToTokenAmount("");
    SwapController.swapTokens();
  },
  resetState() {
    state21.myTokensWithBalance = initialState.myTokensWithBalance;
    state21.tokensPriceMap = initialState.tokensPriceMap;
    state21.initialized = initialState.initialized;
    state21.sourceToken = initialState.sourceToken;
    state21.sourceTokenAmount = initialState.sourceTokenAmount;
    state21.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;
    state21.toToken = initialState.toToken;
    state21.toTokenAmount = initialState.toTokenAmount;
    state21.toTokenPriceInUSD = initialState.toTokenPriceInUSD;
    state21.networkPrice = initialState.networkPrice;
    state21.networkTokenSymbol = initialState.networkTokenSymbol;
    state21.networkBalanceInUSD = initialState.networkBalanceInUSD;
    state21.inputError = initialState.inputError;
    state21.myTokensWithBalance = initialState.myTokensWithBalance;
  },
  resetValues() {
    var _a;
    const { networkAddress } = SwapController.getParams();
    const networkToken = (_a = state21.tokens) == null ? void 0 : _a.find((token) => token.address === networkAddress);
    SwapController.setSourceToken(networkToken);
    SwapController.setToToken(void 0);
  },
  getApprovalLoadingState() {
    return state21.loadingApprovalTransaction;
  },
  clearError() {
    state21.transactionError = void 0;
  },
  async initializeState() {
    if (state21.initializing) {
      return;
    }
    state21.initializing = true;
    if (!state21.initialized) {
      try {
        await SwapController.fetchTokens();
        state21.initialized = true;
      } catch (error) {
        state21.initialized = false;
        SnackController.showError("Failed to initialize swap");
        RouterController.goBack();
      }
    }
    state21.initializing = false;
  },
  async fetchTokens() {
    var _a;
    const { networkAddress } = SwapController.getParams();
    await SwapController.getTokenList();
    await SwapController.getNetworkTokenPrice();
    await SwapController.getMyTokensWithBalance();
    const networkToken = (_a = state21.tokens) == null ? void 0 : _a.find((token) => token.address === networkAddress);
    if (networkToken) {
      state21.networkTokenSymbol = networkToken.symbol;
      SwapController.setSourceToken(networkToken);
      SwapController.setSourceTokenAmount("1");
    }
  },
  async getTokenList() {
    const tokens = await SwapApiUtil.getTokenList();
    state21.tokens = tokens;
    state21.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {
      if (aTokenInfo.symbol < bTokenInfo.symbol) {
        return -1;
      }
      if (aTokenInfo.symbol > bTokenInfo.symbol) {
        return 1;
      }
      return 0;
    });
    state21.suggestedTokens = tokens.filter((token) => {
      if (ConstantsUtil2.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {
        return true;
      }
      return false;
    }, {});
  },
  async getAddressPrice(address) {
    var _a, _b;
    const existPrice = state21.tokensPriceMap[address];
    if (existPrice) {
      return existPrice;
    }
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [address]
    });
    const fungibles = (response == null ? void 0 : response.fungibles) || [];
    const allTokens = [...state21.tokens || [], ...state21.myTokensWithBalance || []];
    const symbol = (_a = allTokens == null ? void 0 : allTokens.find((token) => token.address === address)) == null ? void 0 : _a.symbol;
    const price = ((_b = fungibles.find((p3) => p3.symbol.toLowerCase() === (symbol == null ? void 0 : symbol.toLowerCase()))) == null ? void 0 : _b.price) || 0;
    const priceAsFloat = parseFloat(price.toString());
    state21.tokensPriceMap[address] = priceAsFloat;
    return priceAsFloat;
  },
  async getNetworkTokenPrice() {
    var _a;
    const { networkAddress } = SwapController.getParams();
    const response = await BlockchainApiController.fetchTokenPrice({
      addresses: [networkAddress]
    }).catch(() => {
      SnackController.showError("Failed to fetch network token price");
      return { fungibles: [] };
    });
    const token = (_a = response.fungibles) == null ? void 0 : _a[0];
    const price = (token == null ? void 0 : token.price.toString()) || "0";
    state21.tokensPriceMap[networkAddress] = parseFloat(price);
    state21.networkTokenSymbol = (token == null ? void 0 : token.symbol) || "";
    state21.networkPrice = price;
  },
  async getMyTokensWithBalance(forceUpdate) {
    const balances = await SendApiUtil.getMyTokensWithBalance(forceUpdate);
    const swapBalances = SendApiUtil.mapBalancesToSwapTokens(balances);
    if (!swapBalances) {
      return;
    }
    await SwapController.getInitialGasPrice();
    SwapController.setBalances(swapBalances);
  },
  setBalances(balances) {
    const { networkAddress } = SwapController.getParams();
    const caipNetwork = ChainController.state.activeCaipNetwork;
    if (!caipNetwork) {
      return;
    }
    const networkToken = balances.find((token) => token.address === networkAddress);
    balances.forEach((token) => {
      state21.tokensPriceMap[token.address] = token.price || 0;
    });
    state21.myTokensWithBalance = balances.filter((token) => token.address.startsWith(caipNetwork.caipNetworkId));
    state21.networkBalanceInUSD = networkToken ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString() : "0";
  },
  async getInitialGasPrice() {
    var _a, _b;
    const res = await SwapApiUtil.fetchGasPrice();
    if (!res) {
      return { gasPrice: null, gasPriceInUSD: null };
    }
    switch ((_b = (_a = ChainController.state) == null ? void 0 : _a.activeCaipNetwork) == null ? void 0 : _b.chainNamespace) {
      case "solana":
        state21.gasFee = res.standard ?? "0";
        state21.gasPriceInUSD = NumberUtil.multiply(res.standard, state21.networkPrice).div(1e9).toNumber();
        return {
          gasPrice: BigInt(state21.gasFee),
          gasPriceInUSD: Number(state21.gasPriceInUSD)
        };
      case "eip155":
      default:
        const value = res.standard ?? "0";
        const gasFee = BigInt(value);
        const gasLimit = BigInt(INITIAL_GAS_LIMIT);
        const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, gasLimit, gasFee);
        state21.gasFee = value;
        state21.gasPriceInUSD = gasPrice;
        return { gasPrice: gasFee, gasPriceInUSD: gasPrice };
    }
  },
  // -- Swap -------------------------------------- //
  async swapTokens() {
    var _a, _b;
    const address = AccountController.state.address;
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    const haveSourceTokenAmount = NumberUtil.bigNumber(state21.sourceTokenAmount).gt(0);
    if (!haveSourceTokenAmount) {
      SwapController.setToTokenAmount("");
    }
    if (!toToken || !sourceToken || state21.loadingPrices || !haveSourceTokenAmount) {
      return;
    }
    state21.loadingQuote = true;
    const amountDecimal = NumberUtil.bigNumber(state21.sourceTokenAmount).times(10 ** sourceToken.decimals).round(0);
    try {
      const quoteResponse = await BlockchainApiController.fetchSwapQuote({
        userAddress: address,
        from: sourceToken.address,
        to: toToken.address,
        gasPrice: state21.gasFee,
        amount: amountDecimal.toString()
      });
      state21.loadingQuote = false;
      const quoteToAmount = (_b = (_a = quoteResponse == null ? void 0 : quoteResponse.quotes) == null ? void 0 : _a[0]) == null ? void 0 : _b.toAmount;
      if (!quoteToAmount) {
        AlertController.open({
          shortMessage: "Incorrect amount",
          longMessage: "Please enter a valid amount"
        }, "error");
        return;
      }
      const toTokenAmount = NumberUtil.bigNumber(quoteToAmount).div(10 ** toToken.decimals).toString();
      SwapController.setToTokenAmount(toTokenAmount);
      const isInsufficientToken = SwapController.hasInsufficientToken(state21.sourceTokenAmount, sourceToken.address);
      if (isInsufficientToken) {
        state21.inputError = "Insufficient balance";
      } else {
        state21.inputError = void 0;
        SwapController.setTransactionDetails();
      }
    } catch (error) {
      state21.loadingQuote = false;
      state21.inputError = "Insufficient balance";
    }
  },
  // -- Create Transactions -------------------------------------- //
  async getTransaction() {
    const { fromCaipAddress, availableToSwap } = SwapController.getParams();
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state21.loadingQuote) {
      return void 0;
    }
    try {
      state21.loadingBuildTransaction = true;
      const hasAllowance = await SwapApiUtil.fetchSwapAllowance({
        userAddress: fromCaipAddress,
        tokenAddress: sourceToken.address,
        sourceTokenAmount: state21.sourceTokenAmount,
        sourceTokenDecimals: sourceToken.decimals
      });
      let transaction = void 0;
      if (hasAllowance) {
        transaction = await SwapController.createSwapTransaction();
      } else {
        transaction = await SwapController.createAllowanceTransaction();
      }
      state21.loadingBuildTransaction = false;
      state21.fetchError = false;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to check allowance");
      state21.loadingBuildTransaction = false;
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  async createAllowanceTransaction() {
    const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();
    if (!fromCaipAddress || !toTokenAddress) {
      return void 0;
    }
    if (!sourceTokenAddress) {
      throw new Error("createAllowanceTransaction - No source token address found.");
    }
    try {
      const response = await BlockchainApiController.generateApproveCalldata({
        from: sourceTokenAddress,
        to: toTokenAddress,
        userAddress: fromCaipAddress
      });
      const transaction = {
        data: response.tx.data,
        to: CoreHelperUtil.getPlainAddress(response.tx.from),
        gasPrice: BigInt(response.tx.eip155.gasPrice),
        value: BigInt(response.tx.value),
        toAmount: state21.toTokenAmount
      };
      state21.swapTransaction = void 0;
      state21.approvalTransaction = {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
      return {
        data: transaction.data,
        to: transaction.to,
        gasPrice: transaction.gasPrice,
        value: transaction.value,
        toAmount: transaction.toAmount
      };
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create approval transaction");
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  async createSwapTransaction() {
    var _a;
    const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();
    const sourceToken = state21.sourceToken;
    const toToken = state21.toToken;
    if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {
      return void 0;
    }
    const amount = (_a = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)) == null ? void 0 : _a.toString();
    try {
      const response = await BlockchainApiController.generateSwapCalldata({
        userAddress: fromCaipAddress,
        from: sourceToken.address,
        to: toToken.address,
        amount,
        disableEstimate: true
      });
      const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;
      const gas = BigInt(response.tx.eip155.gas);
      const gasPrice = BigInt(response.tx.eip155.gasPrice);
      const transaction = {
        data: response.tx.data,
        to: CoreHelperUtil.getPlainAddress(response.tx.to),
        gas,
        gasPrice,
        value: isSourceTokenIsNetworkToken ? BigInt(amount ?? "0") : BigInt("0"),
        toAmount: state21.toTokenAmount
      };
      state21.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, gas, gasPrice);
      state21.approvalTransaction = void 0;
      state21.swapTransaction = transaction;
      return transaction;
    } catch (error) {
      RouterController.goBack();
      SnackController.showError("Failed to create transaction");
      state21.approvalTransaction = void 0;
      state21.swapTransaction = void 0;
      state21.fetchError = true;
      return void 0;
    }
  },
  // -- Send Transactions --------------------------------- //
  async sendTransactionForApproval(data) {
    var _a, _b, _c2, _d;
    const { fromAddress, isAuthConnector } = SwapController.getParams();
    state21.loadingApprovalTransaction = true;
    const approveLimitMessage = `Approve limit increase in your wallet`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          SnackController.showLoading(approveLimitMessage);
        }
      });
    } else {
      SnackController.showLoading(approveLimitMessage);
    }
    try {
      await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: "eip155"
      });
      await SwapController.swapTokens();
      await SwapController.getTransaction();
      state21.approvalTransaction = void 0;
      state21.loadingApprovalTransaction = false;
    } catch (err) {
      const error = err;
      state21.transactionError = error == null ? void 0 : error.shortMessage;
      state21.loadingApprovalTransaction = false;
      SnackController.showError((error == null ? void 0 : error.shortMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_APPROVAL_ERROR",
        properties: {
          message: (error == null ? void 0 : error.shortMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_a = ChainController.state.activeCaipNetwork) == null ? void 0 : _a.caipNetworkId) || "",
          swapFromToken: ((_b = SwapController.state.sourceToken) == null ? void 0 : _b.symbol) || "",
          swapToToken: ((_c2 = SwapController.state.toToken) == null ? void 0 : _c2.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: ((_d = AccountController.state.preferredAccountTypes) == null ? void 0 : _d.eip155) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
    }
  },
  async sendTransactionForSwap(data) {
    var _a, _b, _c2, _d, _e5, _f, _g, _h, _i3, _j, _k, _l, _m, _n3;
    if (!data) {
      return void 0;
    }
    const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();
    state21.loadingTransaction = true;
    const snackbarPendingMessage = `Swapping ${(_a = state21.sourceToken) == null ? void 0 : _a.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_b = state21.toToken) == null ? void 0 : _b.symbol}`;
    const snackbarSuccessMessage = `Swapped ${(_c2 = state21.sourceToken) == null ? void 0 : _c2.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${(_d = state21.toToken) == null ? void 0 : _d.symbol}`;
    if (isAuthConnector) {
      RouterController.pushTransactionStack({
        onSuccess() {
          RouterController.replace("Account");
          SnackController.showLoading(snackbarPendingMessage);
          controller14.resetState();
        }
      });
    } else {
      SnackController.showLoading("Confirm transaction in your wallet");
    }
    try {
      const forceUpdateAddresses = [(_e5 = state21.sourceToken) == null ? void 0 : _e5.address, (_f = state21.toToken) == null ? void 0 : _f.address].join(",");
      const transactionHash = await ConnectionController.sendTransaction({
        address: fromAddress,
        to: data.to,
        data: data.data,
        value: data.value,
        chainNamespace: "eip155"
      });
      state21.loadingTransaction = false;
      SnackController.showSuccess(snackbarSuccessMessage);
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_SUCCESS",
        properties: {
          network: ((_g = ChainController.state.activeCaipNetwork) == null ? void 0 : _g.caipNetworkId) || "",
          swapFromToken: ((_h = SwapController.state.sourceToken) == null ? void 0 : _h.symbol) || "",
          swapToToken: ((_i3 = SwapController.state.toToken) == null ? void 0 : _i3.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: ((_j = AccountController.state.preferredAccountTypes) == null ? void 0 : _j.eip155) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      controller14.resetState();
      if (!isAuthConnector) {
        RouterController.replace("Account");
      }
      controller14.getMyTokensWithBalance(forceUpdateAddresses);
      return transactionHash;
    } catch (err) {
      const error = err;
      state21.transactionError = error == null ? void 0 : error.shortMessage;
      state21.loadingTransaction = false;
      SnackController.showError((error == null ? void 0 : error.shortMessage) || "Transaction error");
      EventsController.sendEvent({
        type: "track",
        event: "SWAP_ERROR",
        properties: {
          message: (error == null ? void 0 : error.shortMessage) || (error == null ? void 0 : error.message) || "Unknown",
          network: ((_k = ChainController.state.activeCaipNetwork) == null ? void 0 : _k.caipNetworkId) || "",
          swapFromToken: ((_l = SwapController.state.sourceToken) == null ? void 0 : _l.symbol) || "",
          swapToToken: ((_m = SwapController.state.toToken) == null ? void 0 : _m.symbol) || "",
          swapFromAmount: SwapController.state.sourceTokenAmount || "",
          swapToAmount: SwapController.state.toTokenAmount || "",
          isSmartAccount: ((_n3 = AccountController.state.preferredAccountTypes) == null ? void 0 : _n3.eip155) === W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT
        }
      });
      return void 0;
    }
  },
  // -- Checks -------------------------------------------- //
  hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {
    const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state21.myTokensWithBalance);
    return isInsufficientSourceTokenForSwap;
  },
  // -- Calculations -------------------------------------- //
  setTransactionDetails() {
    const { toTokenAddress, toTokenDecimals } = SwapController.getParams();
    if (!toTokenAddress || !toTokenDecimals) {
      return;
    }
    state21.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state21.networkPrice, BigInt(state21.gasFee), BigInt(INITIAL_GAS_LIMIT));
    state21.priceImpact = SwapCalculationUtil.getPriceImpact({
      sourceTokenAmount: state21.sourceTokenAmount,
      sourceTokenPriceInUSD: state21.sourceTokenPriceInUSD,
      toTokenPriceInUSD: state21.toTokenPriceInUSD,
      toTokenAmount: state21.toTokenAmount
    });
    state21.maxSlippage = SwapCalculationUtil.getMaxSlippage(state21.slippage, state21.toTokenAmount);
    state21.providerFee = SwapCalculationUtil.getProviderFee(state21.sourceTokenAmount);
  }
};
var SwapController = withErrorBoundary(controller14);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/TooltipController.js
var state22 = proxy({
  message: "",
  open: false,
  triggerRect: {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  },
  variant: "shade"
});
var controller15 = {
  state: state22,
  subscribe(callback) {
    return subscribe(state22, () => callback(state22));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state22, key, callback);
  },
  showTooltip({ message, triggerRect, variant }) {
    state22.open = true;
    state22.message = message;
    state22.triggerRect = triggerRect;
    state22.variant = variant;
  },
  hide() {
    state22.open = false;
    state22.message = "";
    state22.triggerRect = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
  }
};
var TooltipController = withErrorBoundary(controller15);

// node_modules/@reown/appkit-controllers/dist/esm/src/utils/EnsUtil.js
var SLIP44_MSB = 2147483648;
var EnsUtil = {
  convertEVMChainIdToCoinType(chainId) {
    if (chainId >= SLIP44_MSB) {
      throw new Error("Invalid chainId");
    }
    return (SLIP44_MSB | chainId) >>> 0;
  }
};

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/EnsController.js
var state23 = proxy({
  suggestions: [],
  loading: false
});
var controller16 = {
  state: state23,
  subscribe(callback) {
    return subscribe(state23, () => callback(state23));
  },
  subscribeKey(key, callback) {
    return subscribeKey(state23, key, callback);
  },
  async resolveName(name) {
    var _a, _b;
    try {
      return await BlockchainApiController.lookupEnsName(name);
    } catch (e2) {
      const error = e2;
      throw new Error(((_b = (_a = error == null ? void 0 : error.reasons) == null ? void 0 : _a[0]) == null ? void 0 : _b.description) || "Error resolving name");
    }
  },
  async isNameRegistered(name) {
    try {
      await BlockchainApiController.lookupEnsName(name);
      return true;
    } catch {
      return false;
    }
  },
  async getSuggestions(value) {
    try {
      state23.loading = true;
      state23.suggestions = [];
      const response = await BlockchainApiController.getEnsNameSuggestions(value);
      state23.suggestions = response.suggestions.map((suggestion) => ({
        ...suggestion,
        name: suggestion.name
      })) || [];
      return state23.suggestions;
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, "Error fetching name suggestions");
      throw new Error(errorMessage);
    } finally {
      state23.loading = false;
    }
  },
  async getNamesForAddress(address) {
    try {
      const network = ChainController.state.activeCaipNetwork;
      if (!network) {
        return [];
      }
      const cachedEns = StorageUtil.getEnsFromCacheForAddress(address);
      if (cachedEns) {
        return cachedEns;
      }
      const response = await BlockchainApiController.reverseLookupEnsName({ address });
      StorageUtil.updateEnsCache({
        address,
        ens: response,
        timestamp: Date.now()
      });
      return response;
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, "Error fetching names for address");
      throw new Error(errorMessage);
    }
  },
  async registerName(name) {
    const network = ChainController.state.activeCaipNetwork;
    if (!network) {
      throw new Error("Network not found");
    }
    const address = AccountController.state.address;
    const emailConnector = ConnectorController.getAuthConnector();
    if (!address || !emailConnector) {
      throw new Error("Address or auth connector not found");
    }
    state23.loading = true;
    try {
      const message = JSON.stringify({
        name,
        attributes: {},
        // Unix timestamp
        timestamp: Math.floor(Date.now() / 1e3)
      });
      RouterController.pushTransactionStack({
        onCancel() {
          RouterController.replace("RegisterAccountName");
        }
      });
      const signature = await ConnectionController.signMessage(message);
      state23.loading = false;
      const networkId = network.id;
      if (!networkId) {
        throw new Error("Network not found");
      }
      const coinType = EnsUtil.convertEVMChainIdToCoinType(Number(networkId));
      await BlockchainApiController.registerEnsName({
        coinType,
        address,
        signature,
        message
      });
      AccountController.setProfileName(name, network.chainNamespace);
      RouterController.replace("RegisterAccountNameSuccess");
    } catch (e2) {
      const errorMessage = EnsController.parseEnsApiError(e2, `Error registering name ${name}`);
      RouterController.replace("RegisterAccountName");
      throw new Error(errorMessage);
    } finally {
      state23.loading = false;
    }
  },
  validateName(name) {
    return /^[a-zA-Z0-9-]{4,}$/u.test(name);
  },
  parseEnsApiError(error, defaultError) {
    var _a, _b;
    const ensError = error;
    return ((_b = (_a = ensError == null ? void 0 : ensError.reasons) == null ? void 0 : _a[0]) == null ? void 0 : _b.description) || defaultError;
  }
};
var EnsController = withErrorBoundary(controller16);

// node_modules/@reown/appkit-controllers/dist/esm/src/controllers/OptionsStateController.js
var state24 = proxy({
  isLegalCheckboxChecked: false
});

// node_modules/@reown/appkit-ui/dist/esm/src/utils/ThemeUtil.js
var themeTag = void 0;
var darkModeTag = void 0;
var lightModeTag = void 0;
function initializeTheming(themeVariables, themeMode) {
  themeTag = document.createElement("style");
  darkModeTag = document.createElement("style");
  lightModeTag = document.createElement("style");
  themeTag.textContent = createRootStyles(themeVariables).core.cssText;
  darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
  lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  document.head.appendChild(themeTag);
  document.head.appendChild(darkModeTag);
  document.head.appendChild(lightModeTag);
  setColorTheme(themeMode);
}
function setColorTheme(themeMode) {
  if (darkModeTag && lightModeTag) {
    if (themeMode === "light") {
      darkModeTag.removeAttribute("media");
      lightModeTag.media = "enabled";
    } else {
      lightModeTag.removeAttribute("media");
      darkModeTag.media = "enabled";
    }
  }
}
function setThemeVariables(themeVariables) {
  if (themeTag && darkModeTag && lightModeTag) {
    themeTag.textContent = createRootStyles(themeVariables).core.cssText;
    darkModeTag.textContent = createRootStyles(themeVariables).dark.cssText;
    lightModeTag.textContent = createRootStyles(themeVariables).light.cssText;
  }
}
function createRootStyles(themeVariables) {
  return {
    core: css`
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
      @keyframes w3m-shake {
        0% {
          transform: scale(1) rotate(0deg);
        }
        20% {
          transform: scale(1) rotate(-1deg);
        }
        40% {
          transform: scale(1) rotate(1.5deg);
        }
        60% {
          transform: scale(1) rotate(-1.5deg);
        }
        80% {
          transform: scale(1) rotate(1deg);
        }
        100% {
          transform: scale(1) rotate(0deg);
        }
      }
      @keyframes w3m-iframe-fade-out {
        0% {
          opacity: 1;
        }
        100% {
          opacity: 0;
        }
      }
      @keyframes w3m-iframe-zoom-in {
        0% {
          transform: translateY(50px);
          opacity: 0;
        }
        100% {
          transform: translateY(0px);
          opacity: 1;
        }
      }
      @keyframes w3m-iframe-zoom-in-mobile {
        0% {
          transform: scale(0.95);
          opacity: 0;
        }
        100% {
          transform: scale(1);
          opacity: 1;
        }
      }
      :root {
        --w3m-modal-width: 360px;
        --w3m-color-mix-strength: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix-strength"]) ? `${themeVariables["--w3m-color-mix-strength"]}%` : "0%")};
        --w3m-font-family: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-family"]) || "Inter, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;")};
        --w3m-font-size-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-font-size-master"]) || "10px")};
        --w3m-border-radius-master: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-border-radius-master"]) || "4px")};
        --w3m-z-index: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-z-index"]) || 999)};

        --wui-font-family: var(--w3m-font-family);

        --wui-font-size-mini: calc(var(--w3m-font-size-master) * 0.8);
        --wui-font-size-micro: var(--w3m-font-size-master);
        --wui-font-size-tiny: calc(var(--w3m-font-size-master) * 1.2);
        --wui-font-size-small: calc(var(--w3m-font-size-master) * 1.4);
        --wui-font-size-paragraph: calc(var(--w3m-font-size-master) * 1.6);
        --wui-font-size-medium: calc(var(--w3m-font-size-master) * 1.8);
        --wui-font-size-large: calc(var(--w3m-font-size-master) * 2);
        --wui-font-size-title-6: calc(var(--w3m-font-size-master) * 2.2);
        --wui-font-size-medium-title: calc(var(--w3m-font-size-master) * 2.4);
        --wui-font-size-2xl: calc(var(--w3m-font-size-master) * 4);

        --wui-border-radius-5xs: var(--w3m-border-radius-master);
        --wui-border-radius-4xs: calc(var(--w3m-border-radius-master) * 1.5);
        --wui-border-radius-3xs: calc(var(--w3m-border-radius-master) * 2);
        --wui-border-radius-xxs: calc(var(--w3m-border-radius-master) * 3);
        --wui-border-radius-xs: calc(var(--w3m-border-radius-master) * 4);
        --wui-border-radius-s: calc(var(--w3m-border-radius-master) * 5);
        --wui-border-radius-m: calc(var(--w3m-border-radius-master) * 7);
        --wui-border-radius-l: calc(var(--w3m-border-radius-master) * 9);
        --wui-border-radius-3xl: calc(var(--w3m-border-radius-master) * 20);

        --wui-font-weight-light: 400;
        --wui-font-weight-regular: 500;
        --wui-font-weight-medium: 600;
        --wui-font-weight-bold: 700;

        --wui-letter-spacing-2xl: -1.6px;
        --wui-letter-spacing-medium-title: -0.96px;
        --wui-letter-spacing-title-6: -0.88px;
        --wui-letter-spacing-large: -0.8px;
        --wui-letter-spacing-medium: -0.72px;
        --wui-letter-spacing-paragraph: -0.64px;
        --wui-letter-spacing-small: -0.56px;
        --wui-letter-spacing-tiny: -0.48px;
        --wui-letter-spacing-micro: -0.2px;
        --wui-letter-spacing-mini: -0.16px;

        --wui-spacing-0: 0px;
        --wui-spacing-4xs: 2px;
        --wui-spacing-3xs: 4px;
        --wui-spacing-xxs: 6px;
        --wui-spacing-2xs: 7px;
        --wui-spacing-xs: 8px;
        --wui-spacing-1xs: 10px;
        --wui-spacing-s: 12px;
        --wui-spacing-m: 14px;
        --wui-spacing-l: 16px;
        --wui-spacing-2l: 18px;
        --wui-spacing-xl: 20px;
        --wui-spacing-xxl: 24px;
        --wui-spacing-2xl: 32px;
        --wui-spacing-3xl: 40px;
        --wui-spacing-4xl: 90px;
        --wui-spacing-5xl: 95px;

        --wui-icon-box-size-xxs: 14px;
        --wui-icon-box-size-xs: 20px;
        --wui-icon-box-size-sm: 24px;
        --wui-icon-box-size-md: 32px;
        --wui-icon-box-size-mdl: 36px;
        --wui-icon-box-size-lg: 40px;
        --wui-icon-box-size-2lg: 48px;
        --wui-icon-box-size-xl: 64px;

        --wui-icon-size-inherit: inherit;
        --wui-icon-size-xxs: 10px;
        --wui-icon-size-xs: 12px;
        --wui-icon-size-sm: 14px;
        --wui-icon-size-md: 16px;
        --wui-icon-size-mdl: 18px;
        --wui-icon-size-lg: 20px;
        --wui-icon-size-xl: 24px;
        --wui-icon-size-xxl: 28px;

        --wui-wallet-image-size-inherit: inherit;
        --wui-wallet-image-size-sm: 40px;
        --wui-wallet-image-size-md: 56px;
        --wui-wallet-image-size-lg: 80px;

        --wui-visual-size-size-inherit: inherit;
        --wui-visual-size-sm: 40px;
        --wui-visual-size-md: 55px;
        --wui-visual-size-lg: 80px;

        --wui-box-size-md: 100px;
        --wui-box-size-lg: 120px;

        --wui-ease-out-power-2: cubic-bezier(0, 0, 0.22, 1);
        --wui-ease-out-power-1: cubic-bezier(0, 0, 0.55, 1);

        --wui-ease-in-power-3: cubic-bezier(0.66, 0, 1, 1);
        --wui-ease-in-power-2: cubic-bezier(0.45, 0, 1, 1);
        --wui-ease-in-power-1: cubic-bezier(0.3, 0, 1, 1);

        --wui-ease-inout-power-1: cubic-bezier(0.45, 0, 0.55, 1);

        --wui-duration-lg: 200ms;
        --wui-duration-md: 125ms;
        --wui-duration-sm: 75ms;

        --wui-path-network-sm: path(
          'M15.4 2.1a5.21 5.21 0 0 1 5.2 0l11.61 6.7a5.21 5.21 0 0 1 2.61 4.52v13.4c0 1.87-1 3.59-2.6 4.52l-11.61 6.7c-1.62.93-3.6.93-5.22 0l-11.6-6.7a5.21 5.21 0 0 1-2.61-4.51v-13.4c0-1.87 1-3.6 2.6-4.52L15.4 2.1Z'
        );

        --wui-path-network-md: path(
          'M43.4605 10.7248L28.0485 1.61089C25.5438 0.129705 22.4562 0.129705 19.9515 1.61088L4.53951 10.7248C2.03626 12.2051 0.5 14.9365 0.5 17.886V36.1139C0.5 39.0635 2.03626 41.7949 4.53951 43.2752L19.9515 52.3891C22.4562 53.8703 25.5438 53.8703 28.0485 52.3891L43.4605 43.2752C45.9637 41.7949 47.5 39.0635 47.5 36.114V17.8861C47.5 14.9365 45.9637 12.2051 43.4605 10.7248Z'
        );

        --wui-path-network-lg: path(
          'M78.3244 18.926L50.1808 2.45078C45.7376 -0.150261 40.2624 -0.150262 35.8192 2.45078L7.6756 18.926C3.23322 21.5266 0.5 26.3301 0.5 31.5248V64.4752C0.5 69.6699 3.23322 74.4734 7.6756 77.074L35.8192 93.5492C40.2624 96.1503 45.7376 96.1503 50.1808 93.5492L78.3244 77.074C82.7668 74.4734 85.5 69.6699 85.5 64.4752V31.5248C85.5 26.3301 82.7668 21.5266 78.3244 18.926Z'
        );

        --wui-width-network-sm: 36px;
        --wui-width-network-md: 48px;
        --wui-width-network-lg: 86px;

        --wui-height-network-sm: 40px;
        --wui-height-network-md: 54px;
        --wui-height-network-lg: 96px;

        --wui-icon-size-network-xs: 12px;
        --wui-icon-size-network-sm: 16px;
        --wui-icon-size-network-md: 24px;
        --wui-icon-size-network-lg: 42px;

        --wui-color-inherit: inherit;

        --wui-color-inverse-100: #fff;
        --wui-color-inverse-000: #000;

        --wui-cover: rgba(20, 20, 20, 0.8);

        --wui-color-modal-bg: var(--wui-color-modal-bg-base);

        --wui-color-accent-100: var(--wui-color-accent-base-100);
        --wui-color-accent-090: var(--wui-color-accent-base-090);
        --wui-color-accent-080: var(--wui-color-accent-base-080);

        --wui-color-success-100: var(--wui-color-success-base-100);
        --wui-color-success-125: var(--wui-color-success-base-125);

        --wui-color-warning-100: var(--wui-color-warning-base-100);

        --wui-color-error-100: var(--wui-color-error-base-100);
        --wui-color-error-125: var(--wui-color-error-base-125);

        --wui-color-blue-100: var(--wui-color-blue-base-100);
        --wui-color-blue-90: var(--wui-color-blue-base-90);

        --wui-icon-box-bg-error-100: var(--wui-icon-box-bg-error-base-100);
        --wui-icon-box-bg-blue-100: var(--wui-icon-box-bg-blue-base-100);
        --wui-icon-box-bg-success-100: var(--wui-icon-box-bg-success-base-100);
        --wui-icon-box-bg-inverse-100: var(--wui-icon-box-bg-inverse-base-100);

        --wui-all-wallets-bg-100: var(--wui-all-wallets-bg-100);

        --wui-avatar-border: var(--wui-avatar-border-base);

        --wui-thumbnail-border: var(--wui-thumbnail-border-base);

        --wui-wallet-button-bg: var(--wui-wallet-button-bg-base);

        --wui-box-shadow-blue: var(--wui-color-accent-glass-020);
      }

      @supports (background: color-mix(in srgb, white 50%, black)) {
        :root {
          --wui-color-modal-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-modal-bg-base)
          );

          --wui-box-shadow-blue: color-mix(in srgb, var(--wui-color-accent-100) 20%, transparent);

          --wui-color-accent-100: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 100%,
            transparent
          );
          --wui-color-accent-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-090: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 90%,
            transparent
          );
          --wui-color-accent-glass-080: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 80%,
            transparent
          );
          --wui-color-accent-glass-020: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 20%,
            transparent
          );
          --wui-color-accent-glass-015: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 15%,
            transparent
          );
          --wui-color-accent-glass-010: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 10%,
            transparent
          );
          --wui-color-accent-glass-005: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 5%,
            transparent
          );
          --wui-color-accent-002: color-mix(
            in srgb,
            var(--wui-color-accent-base-100) 2%,
            transparent
          );

          --wui-color-fg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-100)
          );
          --wui-color-fg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-125)
          );
          --wui-color-fg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-150)
          );
          --wui-color-fg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-175)
          );
          --wui-color-fg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-200)
          );
          --wui-color-fg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-225)
          );
          --wui-color-fg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-250)
          );
          --wui-color-fg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-275)
          );
          --wui-color-fg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-300)
          );
          --wui-color-fg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-325)
          );
          --wui-color-fg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-fg-350)
          );

          --wui-color-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-100)
          );
          --wui-color-bg-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-125)
          );
          --wui-color-bg-150: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-150)
          );
          --wui-color-bg-175: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-175)
          );
          --wui-color-bg-200: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-200)
          );
          --wui-color-bg-225: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-225)
          );
          --wui-color-bg-250: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-250)
          );
          --wui-color-bg-275: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-275)
          );
          --wui-color-bg-300: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-300)
          );
          --wui-color-bg-325: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-325)
          );
          --wui-color-bg-350: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-bg-350)
          );

          --wui-color-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-100)
          );
          --wui-color-success-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-success-base-125)
          );

          --wui-color-warning-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-warning-base-100)
          );

          --wui-color-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-100)
          );
          --wui-color-blue-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-100)
          );
          --wui-color-blue-90: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-blue-base-90)
          );
          --wui-color-error-125: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-color-error-base-125)
          );

          --wui-icon-box-bg-error-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-error-base-100)
          );
          --wui-icon-box-bg-accent-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-blue-base-100)
          );
          --wui-icon-box-bg-success-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-success-base-100)
          );
          --wui-icon-box-bg-inverse-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-icon-box-bg-inverse-base-100)
          );

          --wui-all-wallets-bg-100: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-all-wallets-bg-100)
          );

          --wui-avatar-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-avatar-border-base)
          );

          --wui-thumbnail-border: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-thumbnail-border-base)
          );

          --wui-wallet-button-bg: color-mix(
            in srgb,
            var(--w3m-color-mix) var(--w3m-color-mix-strength),
            var(--wui-wallet-button-bg-base)
          );
        }
      }
    `,
    light: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#fff")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-accent"])};
        --w3m-default: #fff;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "dark")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(230, 100%, 67%, 1);
        --wui-color-blueberry-090: hsla(231, 76%, 61%, 1);
        --wui-color-blueberry-080: hsla(230, 59%, 55%, 1);
        --wui-color-blueberry-050: hsla(231, 100%, 70%, 0.1);

        --wui-color-fg-100: #e4e7e7;
        --wui-color-fg-125: #d0d5d5;
        --wui-color-fg-150: #a8b1b1;
        --wui-color-fg-175: #a8b0b0;
        --wui-color-fg-200: #949e9e;
        --wui-color-fg-225: #868f8f;
        --wui-color-fg-250: #788080;
        --wui-color-fg-275: #788181;
        --wui-color-fg-300: #6e7777;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #363636;

        --wui-color-bg-100: #141414;
        --wui-color-bg-125: #191a1a;
        --wui-color-bg-150: #1e1f1f;
        --wui-color-bg-175: #222525;
        --wui-color-bg-200: #272a2a;
        --wui-color-bg-225: #2c3030;
        --wui-color-bg-250: #313535;
        --wui-color-bg-275: #363b3b;
        --wui-color-bg-300: #3b4040;
        --wui-color-bg-325: #252525;
        --wui-color-bg-350: #ffffff;

        --wui-color-success-base-100: #26d962;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f25a67;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 217, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 217, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 217, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 217, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 217, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 217, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 217, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 217, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 217, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 217, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(242, 90, 103, 0.01);
        --wui-color-error-glass-002: rgba(242, 90, 103, 0.02);
        --wui-color-error-glass-005: rgba(242, 90, 103, 0.05);
        --wui-color-error-glass-010: rgba(242, 90, 103, 0.1);
        --wui-color-error-glass-015: rgba(242, 90, 103, 0.15);
        --wui-color-error-glass-020: rgba(242, 90, 103, 0.2);
        --wui-color-error-glass-025: rgba(242, 90, 103, 0.25);
        --wui-color-error-glass-030: rgba(242, 90, 103, 0.3);
        --wui-color-error-glass-060: rgba(242, 90, 103, 0.6);
        --wui-color-error-glass-080: rgba(242, 90, 103, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-color-gray-glass-001: rgba(255, 255, 255, 0.01);
        --wui-color-gray-glass-002: rgba(255, 255, 255, 0.02);
        --wui-color-gray-glass-005: rgba(255, 255, 255, 0.05);
        --wui-color-gray-glass-010: rgba(255, 255, 255, 0.1);
        --wui-color-gray-glass-015: rgba(255, 255, 255, 0.15);
        --wui-color-gray-glass-020: rgba(255, 255, 255, 0.2);
        --wui-color-gray-glass-025: rgba(255, 255, 255, 0.25);
        --wui-color-gray-glass-030: rgba(255, 255, 255, 0.3);
        --wui-color-gray-glass-060: rgba(255, 255, 255, 0.6);
        --wui-color-gray-glass-080: rgba(255, 255, 255, 0.8);
        --wui-color-gray-glass-090: rgba(255, 255, 255, 0.9);

        --wui-color-dark-glass-100: rgba(42, 42, 42, 1);

        --wui-icon-box-bg-error-base-100: #3c2426;
        --wui-icon-box-bg-blue-base-100: #20303f;
        --wui-icon-box-bg-success-base-100: #1f3a28;
        --wui-icon-box-bg-inverse-base-100: #243240;

        --wui-all-wallets-bg-100: #222b35;

        --wui-avatar-border-base: #252525;

        --wui-thumbnail-border-base: #252525;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --w3m-card-embedded-shadow-color: rgb(17 17 18 / 25%);
      }
    `,
    dark: css`
      :root {
        --w3m-color-mix: ${unsafeCSS((themeVariables == null ? void 0 : themeVariables["--w3m-color-mix"]) || "#000")};
        --w3m-accent: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-accent"])};
        --w3m-default: #000;

        --wui-color-modal-bg-base: ${unsafeCSS(getW3mThemeVariables(themeVariables, "light")["--w3m-background"])};
        --wui-color-accent-base-100: var(--w3m-accent);

        --wui-color-blueberry-100: hsla(231, 100%, 70%, 1);
        --wui-color-blueberry-090: hsla(231, 97%, 72%, 1);
        --wui-color-blueberry-080: hsla(231, 92%, 74%, 1);

        --wui-color-fg-100: #141414;
        --wui-color-fg-125: #2d3131;
        --wui-color-fg-150: #474d4d;
        --wui-color-fg-175: #636d6d;
        --wui-color-fg-200: #798686;
        --wui-color-fg-225: #828f8f;
        --wui-color-fg-250: #8b9797;
        --wui-color-fg-275: #95a0a0;
        --wui-color-fg-300: #9ea9a9;
        --wui-color-fg-325: #9a9a9a;
        --wui-color-fg-350: #d0d0d0;

        --wui-color-bg-100: #ffffff;
        --wui-color-bg-125: #f5fafa;
        --wui-color-bg-150: #f3f8f8;
        --wui-color-bg-175: #eef4f4;
        --wui-color-bg-200: #eaf1f1;
        --wui-color-bg-225: #e5eded;
        --wui-color-bg-250: #e1e9e9;
        --wui-color-bg-275: #dce7e7;
        --wui-color-bg-300: #d8e3e3;
        --wui-color-bg-325: #f3f3f3;
        --wui-color-bg-350: #202020;

        --wui-color-success-base-100: #26b562;
        --wui-color-success-base-125: #30a46b;

        --wui-color-warning-base-100: #f3a13f;

        --wui-color-error-base-100: #f05142;
        --wui-color-error-base-125: #df4a34;

        --wui-color-blue-base-100: rgba(102, 125, 255, 1);
        --wui-color-blue-base-90: rgba(102, 125, 255, 0.9);

        --wui-color-success-glass-001: rgba(38, 181, 98, 0.01);
        --wui-color-success-glass-002: rgba(38, 181, 98, 0.02);
        --wui-color-success-glass-005: rgba(38, 181, 98, 0.05);
        --wui-color-success-glass-010: rgba(38, 181, 98, 0.1);
        --wui-color-success-glass-015: rgba(38, 181, 98, 0.15);
        --wui-color-success-glass-020: rgba(38, 181, 98, 0.2);
        --wui-color-success-glass-025: rgba(38, 181, 98, 0.25);
        --wui-color-success-glass-030: rgba(38, 181, 98, 0.3);
        --wui-color-success-glass-060: rgba(38, 181, 98, 0.6);
        --wui-color-success-glass-080: rgba(38, 181, 98, 0.8);

        --wui-color-success-glass-reown-020: rgba(48, 164, 107, 0.2);

        --wui-color-warning-glass-reown-020: rgba(243, 161, 63, 0.2);

        --wui-color-error-glass-001: rgba(240, 81, 66, 0.01);
        --wui-color-error-glass-002: rgba(240, 81, 66, 0.02);
        --wui-color-error-glass-005: rgba(240, 81, 66, 0.05);
        --wui-color-error-glass-010: rgba(240, 81, 66, 0.1);
        --wui-color-error-glass-015: rgba(240, 81, 66, 0.15);
        --wui-color-error-glass-020: rgba(240, 81, 66, 0.2);
        --wui-color-error-glass-025: rgba(240, 81, 66, 0.25);
        --wui-color-error-glass-030: rgba(240, 81, 66, 0.3);
        --wui-color-error-glass-060: rgba(240, 81, 66, 0.6);
        --wui-color-error-glass-080: rgba(240, 81, 66, 0.8);

        --wui-color-error-glass-reown-020: rgba(223, 74, 52, 0.2);

        --wui-icon-box-bg-error-base-100: #f4dfdd;
        --wui-icon-box-bg-blue-base-100: #d9ecfb;
        --wui-icon-box-bg-success-base-100: #daf0e4;
        --wui-icon-box-bg-inverse-base-100: #dcecfc;

        --wui-all-wallets-bg-100: #e8f1fa;

        --wui-avatar-border-base: #f3f4f4;

        --wui-thumbnail-border-base: #eaefef;

        --wui-wallet-button-bg-base: var(--wui-color-bg-125);

        --wui-color-gray-glass-001: rgba(0, 0, 0, 0.01);
        --wui-color-gray-glass-002: rgba(0, 0, 0, 0.02);
        --wui-color-gray-glass-005: rgba(0, 0, 0, 0.05);
        --wui-color-gray-glass-010: rgba(0, 0, 0, 0.1);
        --wui-color-gray-glass-015: rgba(0, 0, 0, 0.15);
        --wui-color-gray-glass-020: rgba(0, 0, 0, 0.2);
        --wui-color-gray-glass-025: rgba(0, 0, 0, 0.25);
        --wui-color-gray-glass-030: rgba(0, 0, 0, 0.3);
        --wui-color-gray-glass-060: rgba(0, 0, 0, 0.6);
        --wui-color-gray-glass-080: rgba(0, 0, 0, 0.8);
        --wui-color-gray-glass-090: rgba(0, 0, 0, 0.9);

        --wui-color-dark-glass-100: rgba(233, 233, 233, 1);

        --w3m-card-embedded-shadow-color: rgb(224 225 233 / 25%);
      }
    `
  };
}
var resetStyles = css`
  *,
  *::after,
  *::before,
  :host {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-style: normal;
    text-rendering: optimizeSpeed;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    font-family: var(--wui-font-family);
    backface-visibility: hidden;
  }
`;
var elementStyles = css`
  button,
  a {
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    position: relative;
    transition:
      color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      background-color var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border var(--wui-duration-lg) var(--wui-ease-out-power-1),
      border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1),
      box-shadow var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: background-color, color, border, box-shadow, border-radius;
    outline: none;
    border: none;
    column-gap: var(--wui-spacing-3xs);
    background-color: transparent;
    text-decoration: none;
  }

  wui-flex {
    transition: border-radius var(--wui-duration-lg) var(--wui-ease-out-power-1);
    will-change: border-radius;
  }

  button:disabled > wui-wallet-image,
  button:disabled > wui-all-wallets-image,
  button:disabled > wui-network-image,
  button:disabled > wui-image,
  button:disabled > wui-transaction-visual,
  button:disabled > wui-logo {
    filter: grayscale(1);
  }

  @media (hover: hover) and (pointer: fine) {
    button:hover:enabled {
      background-color: var(--wui-color-gray-glass-005);
    }

    button:active:enabled {
      background-color: var(--wui-color-gray-glass-010);
    }
  }

  button:disabled > wui-icon-box {
    opacity: 0.5;
  }

  input {
    border: none;
    outline: none;
    appearance: none;
  }
`;
var colorStyles = css`
  .wui-color-inherit {
    color: var(--wui-color-inherit);
  }

  .wui-color-accent-100 {
    color: var(--wui-color-accent-100);
  }

  .wui-color-error-100 {
    color: var(--wui-color-error-100);
  }

  .wui-color-blue-100 {
    color: var(--wui-color-blue-100);
  }

  .wui-color-blue-90 {
    color: var(--wui-color-blue-90);
  }

  .wui-color-error-125 {
    color: var(--wui-color-error-125);
  }

  .wui-color-success-100 {
    color: var(--wui-color-success-100);
  }

  .wui-color-success-125 {
    color: var(--wui-color-success-125);
  }

  .wui-color-inverse-100 {
    color: var(--wui-color-inverse-100);
  }

  .wui-color-inverse-000 {
    color: var(--wui-color-inverse-000);
  }

  .wui-color-fg-100 {
    color: var(--wui-color-fg-100);
  }

  .wui-color-fg-200 {
    color: var(--wui-color-fg-200);
  }

  .wui-color-fg-300 {
    color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    color: var(--wui-color-fg-350);
  }

  .wui-bg-color-inherit {
    background-color: var(--wui-color-inherit);
  }

  .wui-bg-color-blue-100 {
    background-color: var(--wui-color-accent-100);
  }

  .wui-bg-color-error-100 {
    background-color: var(--wui-color-error-100);
  }

  .wui-bg-color-error-125 {
    background-color: var(--wui-color-error-125);
  }

  .wui-bg-color-success-100 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-success-125 {
    background-color: var(--wui-color-success-100);
  }

  .wui-bg-color-inverse-100 {
    background-color: var(--wui-color-inverse-100);
  }

  .wui-bg-color-inverse-000 {
    background-color: var(--wui-color-inverse-000);
  }

  .wui-bg-color-fg-100 {
    background-color: var(--wui-color-fg-100);
  }

  .wui-bg-color-fg-200 {
    background-color: var(--wui-color-fg-200);
  }

  .wui-bg-color-fg-300 {
    background-color: var(--wui-color-fg-300);
  }

  .wui-color-fg-325 {
    background-color: var(--wui-color-fg-325);
  }

  .wui-color-fg-350 {
    background-color: var(--wui-color-fg-350);
  }
`;

// node_modules/@reown/appkit-ui/dist/esm/src/utils/UiHelperUtil.js
var UiHelperUtil = {
  getSpacingStyles(spacing, index) {
    if (Array.isArray(spacing)) {
      return spacing[index] ? `var(--wui-spacing-${spacing[index]})` : void 0;
    } else if (typeof spacing === "string") {
      return `var(--wui-spacing-${spacing})`;
    }
    return void 0;
  },
  getFormattedDate(date) {
    return new Intl.DateTimeFormat("en-US", { month: "short", day: "numeric" }).format(date);
  },
  getHostName(url) {
    try {
      const newUrl = new URL(url);
      return newUrl.hostname;
    } catch (error) {
      return "";
    }
  },
  getTruncateString({ string, charsStart, charsEnd, truncate }) {
    if (string.length <= charsStart + charsEnd) {
      return string;
    }
    if (truncate === "end") {
      return `${string.substring(0, charsStart)}...`;
    } else if (truncate === "start") {
      return `...${string.substring(string.length - charsEnd)}`;
    }
    return `${string.substring(0, Math.floor(charsStart))}...${string.substring(string.length - Math.floor(charsEnd))}`;
  },
  generateAvatarColors(address) {
    const hash = address.toLowerCase().replace(/^0x/iu, "").replace(/[^a-f0-9]/gu, "");
    const baseColor = hash.substring(0, 6).padEnd(6, "0");
    const rgbColor = this.hexToRgb(baseColor);
    const masterBorderRadius = getComputedStyle(document.documentElement).getPropertyValue("--w3m-border-radius-master");
    const radius = Number(masterBorderRadius == null ? void 0 : masterBorderRadius.replace("px", ""));
    const edge = 100 - 3 * radius;
    const gradientCircle = `${edge}% ${edge}% at 65% 40%`;
    const colors = [];
    for (let i4 = 0; i4 < 5; i4 += 1) {
      const tintedColor = this.tintColor(rgbColor, 0.15 * i4);
      colors.push(`rgb(${tintedColor[0]}, ${tintedColor[1]}, ${tintedColor[2]})`);
    }
    return `
    --local-color-1: ${colors[0]};
    --local-color-2: ${colors[1]};
    --local-color-3: ${colors[2]};
    --local-color-4: ${colors[3]};
    --local-color-5: ${colors[4]};
    --local-radial-circle: ${gradientCircle}
   `;
  },
  hexToRgb(hex) {
    const bigint = parseInt(hex, 16);
    const r2 = bigint >> 16 & 255;
    const g = bigint >> 8 & 255;
    const b4 = bigint & 255;
    return [r2, g, b4];
  },
  tintColor(rgb, tint) {
    const [r2, g, b4] = rgb;
    const tintedR = Math.round(r2 + (255 - r2) * tint);
    const tintedG = Math.round(g + (255 - g) * tint);
    const tintedB = Math.round(b4 + (255 - b4) * tint);
    return [tintedR, tintedG, tintedB];
  },
  isNumber(character) {
    const regex = {
      number: /^[0-9]+$/u
    };
    return regex.number.test(character);
  },
  getColorTheme(theme) {
    var _a;
    if (theme) {
      return theme;
    } else if (typeof window !== "undefined" && window.matchMedia) {
      if ((_a = window.matchMedia("(prefers-color-scheme: dark)")) == null ? void 0 : _a.matches) {
        return "dark";
      }
      return "light";
    }
    return "dark";
  },
  splitBalance(input) {
    const parts = input.split(".");
    if (parts.length === 2) {
      return [parts[0], parts[1]];
    }
    return ["0", "00"];
  },
  roundNumber(number, threshold, fixed) {
    const roundedNumber = number.toString().length >= threshold ? Number(number).toFixed(fixed) : number;
    return roundedNumber;
  },
  formatNumberToLocalString(value, decimals = 2) {
    if (value === void 0) {
      return "0.00";
    }
    if (typeof value === "number") {
      return value.toLocaleString("en-US", {
        maximumFractionDigits: decimals,
        minimumFractionDigits: decimals
      });
    }
    return parseFloat(value).toLocaleString("en-US", {
      maximumFractionDigits: decimals,
      minimumFractionDigits: decimals
    });
  }
};

// node_modules/@reown/appkit-ui/dist/esm/src/utils/WebComponentsUtil.js
function standardCustomElement(tagName, descriptor) {
  const { kind, elements } = descriptor;
  return {
    kind,
    elements,
    finisher(clazz) {
      if (!customElements.get(tagName)) {
        customElements.define(tagName, clazz);
      }
    }
  };
}
function legacyCustomElement(tagName, clazz) {
  if (!customElements.get(tagName)) {
    customElements.define(tagName, clazz);
  }
  return clazz;
}
function customElement(tagName) {
  return function create2(classOrDescriptor) {
    return typeof classOrDescriptor === "function" ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);
  };
}

// node_modules/@reown/appkit-scaffold-ui/dist/esm/src/utils/ConstantsUtil.js
var ConstantsUtil3 = {
  ACCOUNT_TABS: [{ label: "Tokens" }, { label: "NFTs" }, { label: "Activity" }],
  SECURE_SITE_ORIGIN: (typeof process !== "undefined" && typeof process.env !== "undefined" ? process.env["NEXT_PUBLIC_SECURE_SITE_ORIGIN"] : void 0) || "https://secure.walletconnect.org",
  VIEW_DIRECTION: {
    Next: "next",
    Prev: "prev"
  },
  DEFAULT_CONNECT_METHOD_ORDER: ["email", "social", "wallet"],
  ANIMATION_DURATIONS: {
    HeaderText: 120,
    ModalHeight: 150,
    ViewTransition: 150
  }
};

export {
  ConstantsUtil,
  NetworkUtil,
  ParseUtil,
  proxy,
  subscribe,
  ref,
  subscribeKey,
  ConstantsUtil2,
  StorageUtil,
  CoreHelperUtil,
  OptionsController,
  AssetController,
  AssetUtil,
  AlertController,
  EventsController,
  ApiController,
  RouterController,
  ThemeController,
  ConnectorController,
  SnackController,
  ConnectionController,
  PublicStateController,
  SendController,
  ChainController,
  BlockchainApiController,
  AccountController,
  ModalController,
  OnRampController,
  TooltipController,
  EnsController,
  B2 as B,
  SIWXUtil,
  ModalUtil,
  ConstantsUtil3,
  initializeTheming,
  setColorTheme,
  setThemeVariables,
  resetStyles,
  elementStyles,
  colorStyles,
  UiHelperUtil,
  customElement
};
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-KJU5WIWL.js.map
