import {
  A,
  C,
  E,
  IEvents,
  Po,
  Qe,
  Qo,
  concat,
  detect,
  esm_default,
  esm_exports,
  f,
  f2,
  formatJsonRpcError,
  formatJsonRpcRequest,
  formatJsonRpcResult,
  fromString,
  getBigIntRpcId,
  h,
  i,
  import_pino,
  isJsonRpcError,
  isJsonRpcRequest,
  isJsonRpcResponse,
  isJsonRpcResult,
  k,
  o,
  payloadId,
  r,
  require_cjs,
  require_cjs2,
  require_cjs3,
  safeJsonParse,
  safeJsonStringify,
  sn,
  toString,
  y
} from "./chunk-NFFDWF2D.js";
import {
  HashMD
} from "./chunk-PM35BVFT.js";
import {
  LruMap,
  checksumAddress,
  defineFormatter,
  hexToBigInt,
  hexToNumber,
  isHex,
  keccak256,
  numberToHex,
  toHex
} from "./chunk-FHKHOB46.js";
import {
  rotl,
  wrapConstructor
} from "./chunk-FUPOJN5U.js";
import "./chunk-OR67L7UC.js";
import {
  require_events
} from "./chunk-NPY75PGV.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@walletconnect/ethereum-provider/dist/index.es.js
var import_events8 = __toESM(require_events());

// node_modules/@walletconnect/utils/dist/index.es.js
var import_time = __toESM(require_cjs());
var import_window_getters = __toESM(require_cjs2());
var import_window_metadata = __toESM(require_cjs3());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/accounts/utils/publicKeyToAddress.js
function publicKeyToAddress(publicKey) {
  const address = keccak256(`0x${publicKey.substring(4)}`).substring(26);
  return checksumAddress(`0x${address}`);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverPublicKey.js
async function recoverPublicKey({ hash, signature }) {
  const hashHex = isHex(hash) ? hash : toHex(hash);
  const { secp256k1: secp256k12 } = await import("./secp256k1-VU3M6RGV.js");
  const signature_ = (() => {
    if (typeof signature === "object" && "r" in signature && "s" in signature) {
      const { r: r2, s, v: v5, yParity } = signature;
      const yParityOrV2 = Number(yParity ?? v5);
      const recoveryBit2 = toRecoveryBit(yParityOrV2);
      return new secp256k12.Signature(hexToBigInt(r2), hexToBigInt(s)).addRecoveryBit(recoveryBit2);
    }
    const signatureHex = isHex(signature) ? signature : toHex(signature);
    const yParityOrV = hexToNumber(`0x${signatureHex.slice(130)}`);
    const recoveryBit = toRecoveryBit(yParityOrV);
    return secp256k12.Signature.fromCompact(signatureHex.substring(2, 130)).addRecoveryBit(recoveryBit);
  })();
  const publicKey = signature_.recoverPublicKey(hashHex.substring(2)).toHex(false);
  return `0x${publicKey}`;
}
function toRecoveryBit(yParityOrV) {
  if (yParityOrV === 0 || yParityOrV === 1)
    return yParityOrV;
  if (yParityOrV === 27)
    return 0;
  if (yParityOrV === 28)
    return 1;
  throw new Error("Invalid yParityOrV value");
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/signature/recoverAddress.js
async function recoverAddress({ hash, signature }) {
  return publicKeyToAddress(await recoverPublicKey({ hash, signature }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transaction.js
var transactionType = {
  "0x0": "legacy",
  "0x1": "eip2930",
  "0x2": "eip1559",
  "0x3": "eip4844",
  "0x4": "eip7702"
};
function formatTransaction(transaction) {
  const transaction_ = {
    ...transaction,
    blockHash: transaction.blockHash ? transaction.blockHash : null,
    blockNumber: transaction.blockNumber ? BigInt(transaction.blockNumber) : null,
    chainId: transaction.chainId ? hexToNumber(transaction.chainId) : void 0,
    gas: transaction.gas ? BigInt(transaction.gas) : void 0,
    gasPrice: transaction.gasPrice ? BigInt(transaction.gasPrice) : void 0,
    maxFeePerBlobGas: transaction.maxFeePerBlobGas ? BigInt(transaction.maxFeePerBlobGas) : void 0,
    maxFeePerGas: transaction.maxFeePerGas ? BigInt(transaction.maxFeePerGas) : void 0,
    maxPriorityFeePerGas: transaction.maxPriorityFeePerGas ? BigInt(transaction.maxPriorityFeePerGas) : void 0,
    nonce: transaction.nonce ? hexToNumber(transaction.nonce) : void 0,
    to: transaction.to ? transaction.to : null,
    transactionIndex: transaction.transactionIndex ? Number(transaction.transactionIndex) : null,
    type: transaction.type ? transactionType[transaction.type] : void 0,
    typeHex: transaction.type ? transaction.type : void 0,
    value: transaction.value ? BigInt(transaction.value) : void 0,
    v: transaction.v ? BigInt(transaction.v) : void 0
  };
  if (transaction.authorizationList)
    transaction_.authorizationList = formatAuthorizationList(transaction.authorizationList);
  transaction_.yParity = (() => {
    if (transaction.yParity)
      return Number(transaction.yParity);
    if (typeof transaction_.v === "bigint") {
      if (transaction_.v === 0n || transaction_.v === 27n)
        return 0;
      if (transaction_.v === 1n || transaction_.v === 28n)
        return 1;
      if (transaction_.v >= 35n)
        return transaction_.v % 2n === 0n ? 1 : 0;
    }
    return void 0;
  })();
  if (transaction_.type === "legacy") {
    delete transaction_.accessList;
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
    delete transaction_.yParity;
  }
  if (transaction_.type === "eip2930") {
    delete transaction_.maxFeePerBlobGas;
    delete transaction_.maxFeePerGas;
    delete transaction_.maxPriorityFeePerGas;
  }
  if (transaction_.type === "eip1559") {
    delete transaction_.maxFeePerBlobGas;
  }
  return transaction_;
}
var defineTransaction = defineFormatter("transaction", formatTransaction);
function formatAuthorizationList(authorizationList) {
  return authorizationList.map((authorization) => ({
    contractAddress: authorization.address,
    chainId: Number(authorization.chainId),
    nonce: Number(authorization.nonce),
    r: authorization.r,
    s: authorization.s,
    yParity: Number(authorization.yParity)
  }));
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/block.js
function formatBlock(block) {
  const transactions = (block.transactions ?? []).map((transaction) => {
    if (typeof transaction === "string")
      return transaction;
    return formatTransaction(transaction);
  });
  return {
    ...block,
    baseFeePerGas: block.baseFeePerGas ? BigInt(block.baseFeePerGas) : null,
    blobGasUsed: block.blobGasUsed ? BigInt(block.blobGasUsed) : void 0,
    difficulty: block.difficulty ? BigInt(block.difficulty) : void 0,
    excessBlobGas: block.excessBlobGas ? BigInt(block.excessBlobGas) : void 0,
    gasLimit: block.gasLimit ? BigInt(block.gasLimit) : void 0,
    gasUsed: block.gasUsed ? BigInt(block.gasUsed) : void 0,
    hash: block.hash ? block.hash : null,
    logsBloom: block.logsBloom ? block.logsBloom : null,
    nonce: block.nonce ? block.nonce : null,
    number: block.number ? BigInt(block.number) : null,
    size: block.size ? BigInt(block.size) : void 0,
    timestamp: block.timestamp ? BigInt(block.timestamp) : void 0,
    transactions,
    totalDifficulty: block.totalDifficulty ? BigInt(block.totalDifficulty) : null
  };
}
var defineBlock = defineFormatter("block", formatBlock);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/public/getTransactionCount.js
async function getTransactionCount(client, { address, blockTag = "latest", blockNumber }) {
  const count = await client.request({
    method: "eth_getTransactionCount",
    params: [address, blockNumber ? numberToHex(blockNumber) : blockTag]
  }, { dedupe: Boolean(blockNumber) });
  return hexToNumber(count);
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/constants/blob.js
var blobsPerTransaction = 6;
var bytesPerFieldElement = 32;
var fieldElementsPerBlob = 4096;
var bytesPerBlob = bytesPerFieldElement * fieldElementsPerBlob;
var maxBytesPerTransaction = bytesPerBlob * blobsPerTransaction - // terminator byte (0x80).
1 - // zero byte (0x00) appended to each field element.
1 * fieldElementsPerBlob * blobsPerTransaction;

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/log.js
function formatLog(log, { args, eventName } = {}) {
  return {
    ...log,
    blockHash: log.blockHash ? log.blockHash : null,
    blockNumber: log.blockNumber ? BigInt(log.blockNumber) : null,
    logIndex: log.logIndex ? Number(log.logIndex) : null,
    transactionHash: log.transactionHash ? log.transactionHash : null,
    transactionIndex: log.transactionIndex ? Number(log.transactionIndex) : null,
    ...eventName ? { args, eventName } : {}
  };
}

// node_modules/@walletconnect/utils/node_modules/viem/_esm/actions/wallet/sendTransaction.js
var supportsWalletNamespace = new LruMap(128);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/promise/withDedupe.js
var promiseCache = new LruMap(8192);

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/rpc/id.js
function createIdStore() {
  return {
    current: 0,
    take() {
      return this.current++;
    },
    reset() {
      this.current = 0;
    }
  };
}
var idCache = createIdStore();

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/formatters/transactionReceipt.js
var receiptStatuses = {
  "0x0": "reverted",
  "0x1": "success"
};
function formatTransactionReceipt(transactionReceipt) {
  const receipt = {
    ...transactionReceipt,
    blockNumber: transactionReceipt.blockNumber ? BigInt(transactionReceipt.blockNumber) : null,
    contractAddress: transactionReceipt.contractAddress ? transactionReceipt.contractAddress : null,
    cumulativeGasUsed: transactionReceipt.cumulativeGasUsed ? BigInt(transactionReceipt.cumulativeGasUsed) : null,
    effectiveGasPrice: transactionReceipt.effectiveGasPrice ? BigInt(transactionReceipt.effectiveGasPrice) : null,
    gasUsed: transactionReceipt.gasUsed ? BigInt(transactionReceipt.gasUsed) : null,
    logs: transactionReceipt.logs ? transactionReceipt.logs.map((log) => formatLog(log)) : null,
    to: transactionReceipt.to ? transactionReceipt.to : null,
    transactionIndex: transactionReceipt.transactionIndex ? hexToNumber(transactionReceipt.transactionIndex) : null,
    status: transactionReceipt.status ? receiptStatuses[transactionReceipt.status] : null,
    type: transactionReceipt.type ? transactionType[transactionReceipt.type] || transactionReceipt.type : null
  };
  if (transactionReceipt.blobGasPrice)
    receipt.blobGasPrice = BigInt(transactionReceipt.blobGasPrice);
  if (transactionReceipt.blobGasUsed)
    receipt.blobGasUsed = BigInt(transactionReceipt.blobGasUsed);
  return receipt;
}
var defineTransactionReceipt = defineFormatter("transactionReceipt", formatTransactionReceipt);

// node_modules/@walletconnect/utils/node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = new Uint8Array(new Array(16).fill(0).map((_2, i3) => i3));
var Pi = Id.map((i3) => (9 * i3 + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i3 = 0; i3 < 4; i3++)
  for (let j3 of [idxL, idxR])
    j3.push(j3[i3].map((k6) => Rho[k6]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i3) => new Uint8Array(i3));
var shiftsL = idxL.map((idx, i3) => idx.map((j3) => shifts[i3][j3]));
var shiftsR = idxR.map((idx, i3) => idx.map((j3) => shifts[i3][j3]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function f3(group, x2, y5, z3) {
  if (group === 0)
    return x2 ^ y5 ^ z3;
  else if (group === 1)
    return x2 & y5 | ~x2 & z3;
  else if (group === 2)
    return (x2 | ~y5) ^ z3;
  else if (group === 3)
    return x2 & z3 | y5 & ~z3;
  else
    return x2 ^ (y5 | ~z3);
}
var R_BUF = new Uint32Array(16);
var RIPEMD160 = class extends HashMD {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4 } = this;
    return [h0, h1, h22, h32, h4];
  }
  set(h0, h1, h22, h32, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      R_BUF[i3] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br3 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr3 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr3 = idxR[group];
      const sl = shiftsL[group], sr3 = shiftsR[group];
      for (let i3 = 0; i3 < 16; i3++) {
        const tl = rotl(al + f3(group, bl, cl, dl) + R_BUF[rl[i3]] + hbl, sl[i3]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i3 = 0; i3 < 16; i3++) {
        const tr3 = rotl(ar3 + f3(rGroup, br3, cr3, dr3) + R_BUF[rr3[i3]] + hbr, sr3[i3]) + er3 | 0;
        ar3 = er3, er3 = dr3, dr3 = rotl(cr3, 10) | 0, cr3 = br3, br3 = tr3;
      }
    }
    this.set(this.h1 + cl + dr3 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br3 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    R_BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// node_modules/@walletconnect/utils/node_modules/viem/_esm/utils/nonceManager.js
function createNonceManager(parameters) {
  const { source } = parameters;
  const deltaMap = /* @__PURE__ */ new Map();
  const nonceMap = new LruMap(8192);
  const promiseMap = /* @__PURE__ */ new Map();
  const getKey = ({ address, chainId }) => `${address}.${chainId}`;
  return {
    async consume({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      const promise = this.get({ address, chainId, client });
      this.increment({ address, chainId });
      const nonce = await promise;
      await source.set({ address, chainId }, nonce);
      nonceMap.set(key, nonce);
      return nonce;
    },
    async increment({ address, chainId }) {
      const key = getKey({ address, chainId });
      const delta = deltaMap.get(key) ?? 0;
      deltaMap.set(key, delta + 1);
    },
    async get({ address, chainId, client }) {
      const key = getKey({ address, chainId });
      let promise = promiseMap.get(key);
      if (!promise) {
        promise = (async () => {
          try {
            const nonce = await source.get({ address, chainId, client });
            const previousNonce = nonceMap.get(key) ?? 0;
            if (previousNonce > 0 && nonce <= previousNonce)
              return previousNonce + 1;
            nonceMap.delete(key);
            return nonce;
          } finally {
            this.reset({ address, chainId });
          }
        })();
        promiseMap.set(key, promise);
      }
      const delta = deltaMap.get(key) ?? 0;
      return delta + await promise;
    },
    reset({ address, chainId }) {
      const key = getKey({ address, chainId });
      deltaMap.delete(key);
      promiseMap.delete(key);
    }
  };
}
function jsonRpc() {
  return {
    async get(parameters) {
      const { address, client } = parameters;
      return getTransactionCount(client, {
        address,
        blockTag: "pending"
      });
    },
    set() {
    }
  };
}
var nonceManager = createNonceManager({
  source: jsonRpc()
});

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/crypto.js
var crypto2 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/utils.js
function isBytes2(a2) {
  return a2 instanceof Uint8Array || ArrayBuffer.isView(a2) && a2.constructor.name === "Uint8Array";
}
function anumber(n3) {
  if (!Number.isSafeInteger(n3) || n3 < 0)
    throw new Error("positive integer expected, got " + n3);
}
function abytes(b5, ...lengths) {
  if (!isBytes2(b5))
    throw new Error("Uint8Array expected");
  if (lengths.length > 0 && !lengths.includes(b5.length))
    throw new Error("Uint8Array expected of length " + lengths + ", got length=" + b5.length);
}
function aexists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function aoutput(out, instance) {
  abytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error("digestInto() expects output buffer of length at least " + min);
  }
}
function u32(arr) {
  return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
}
function clean(...arrays) {
  for (let i3 = 0; i3 < arrays.length; i3++) {
    arrays[i3].fill(0);
  }
}
function createView(arr) {
  return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
}
function rotr(word, shift) {
  return word << 32 - shift | word >>> shift;
}
function rotl2(word, shift) {
  return word << shift | word >>> 32 - shift >>> 0;
}
var isLE = (() => new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68)();
function byteSwap(word) {
  return word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
}
function byteSwap32(arr) {
  for (let i3 = 0; i3 < arr.length; i3++) {
    arr[i3] = byteSwap(arr[i3]);
  }
  return arr;
}
var swap32IfBE = isLE ? (u3) => u3 : byteSwap32;
var hasHexBuiltin = (() => (
  // @ts-ignore
  typeof Uint8Array.from([]).toHex === "function" && typeof Uint8Array.fromHex === "function"
))();
var hexes = Array.from({ length: 256 }, (_2, i3) => i3.toString(16).padStart(2, "0"));
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes2(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  abytes(data);
  return data;
}
var Hash = class {
};
function createHasher(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function createXOFer(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/curves/esm/utils.js
var _0n = BigInt(0);
var _1n = BigInt(1);

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/version.js
var version = "0.1.1";

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/errors.js
function getVersion() {
  return version;
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Errors.js
var BaseError2 = class _BaseError extends Error {
  constructor(shortMessage, options = {}) {
    const details = (() => {
      var _a;
      if (options.cause instanceof _BaseError) {
        if (options.cause.details)
          return options.cause.details;
        if (options.cause.shortMessage)
          return options.cause.shortMessage;
      }
      if ((_a = options.cause) == null ? void 0 : _a.message)
        return options.cause.message;
      return options.details;
    })();
    const docsPath = (() => {
      if (options.cause instanceof _BaseError)
        return options.cause.docsPath || options.docsPath;
      return options.docsPath;
    })();
    const docsBaseUrl = "https://oxlib.sh";
    const docs = `${docsBaseUrl}${docsPath ?? ""}`;
    const message = [
      shortMessage || "An error occurred.",
      ...options.metaMessages ? ["", ...options.metaMessages] : [],
      ...details || docsPath ? [
        "",
        details ? `Details: ${details}` : void 0,
        docsPath ? `See: ${docs}` : void 0
      ] : []
    ].filter((x2) => typeof x2 === "string").join("\n");
    super(message, options.cause ? { cause: options.cause } : void 0);
    Object.defineProperty(this, "details", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docs", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "docsPath", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "shortMessage", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "cause", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "BaseError"
    });
    Object.defineProperty(this, "version", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: `ox@${getVersion()}`
    });
    this.cause = options.cause;
    this.details = details;
    this.docs = docs;
    this.docsPath = docsPath;
    this.shortMessage = shortMessage;
  }
  walk(fn3) {
    return walk(this, fn3);
  }
};
function walk(err, fn3) {
  if (fn3 == null ? void 0 : fn3(err))
    return err;
  if (err && typeof err === "object" && "cause" in err && err.cause)
    return walk(err.cause, fn3);
  return fn3 ? null : err;
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/bytes.js
function assertSize(bytes, size_) {
  if (size2(bytes) > size_)
    throw new SizeOverflowError({
      givenSize: size2(bytes),
      maxSize: size_
    });
}
var charCodeMap = {
  zero: 48,
  nine: 57,
  A: 65,
  F: 70,
  a: 97,
  f: 102
};
function charCodeToBase16(char) {
  if (char >= charCodeMap.zero && char <= charCodeMap.nine)
    return char - charCodeMap.zero;
  if (char >= charCodeMap.A && char <= charCodeMap.F)
    return char - (charCodeMap.A - 10);
  if (char >= charCodeMap.a && char <= charCodeMap.f)
    return char - (charCodeMap.a - 10);
  return void 0;
}
function pad2(bytes, options = {}) {
  const { dir, size: size4 = 32 } = options;
  if (size4 === 0)
    return bytes;
  if (bytes.length > size4)
    throw new SizeExceedsPaddingSizeError({
      size: bytes.length,
      targetSize: size4,
      type: "Bytes"
    });
  const paddedBytes = new Uint8Array(size4);
  for (let i3 = 0; i3 < size4; i3++) {
    const padEnd = dir === "right";
    paddedBytes[padEnd ? i3 : size4 - i3 - 1] = bytes[padEnd ? i3 : bytes.length - i3 - 1];
  }
  return paddedBytes;
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/hex.js
function assertSize2(hex, size_) {
  if (size3(hex) > size_)
    throw new SizeOverflowError2({
      givenSize: size3(hex),
      maxSize: size_
    });
}
function pad3(hex_, options = {}) {
  const { dir, size: size4 = 32 } = options;
  if (size4 === 0)
    return hex_;
  const hex = hex_.replace("0x", "");
  if (hex.length > size4 * 2)
    throw new SizeExceedsPaddingSizeError2({
      size: Math.ceil(hex.length / 2),
      targetSize: size4,
      type: "Hex"
    });
  return `0x${hex[dir === "right" ? "padEnd" : "padStart"](size4 * 2, "0")}`;
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Bytes.js
var decoder = new TextDecoder();
var encoder = new TextEncoder();
function from(value) {
  if (value instanceof Uint8Array)
    return value;
  if (typeof value === "string")
    return fromHex2(value);
  return fromArray(value);
}
function fromArray(value) {
  return value instanceof Uint8Array ? value : new Uint8Array(value);
}
function fromHex2(value, options = {}) {
  const { size: size4 } = options;
  let hex = value;
  if (size4) {
    assertSize2(value, size4);
    hex = padRight(value, size4);
  }
  let hexString = hex.slice(2);
  if (hexString.length % 2)
    hexString = `0${hexString}`;
  const length = hexString.length / 2;
  const bytes = new Uint8Array(length);
  for (let index = 0, j3 = 0; index < length; index++) {
    const nibbleLeft = charCodeToBase16(hexString.charCodeAt(j3++));
    const nibbleRight = charCodeToBase16(hexString.charCodeAt(j3++));
    if (nibbleLeft === void 0 || nibbleRight === void 0) {
      throw new BaseError2(`Invalid byte sequence ("${hexString[j3 - 2]}${hexString[j3 - 1]}" in "${hexString}").`);
    }
    bytes[index] = nibbleLeft * 16 + nibbleRight;
  }
  return bytes;
}
function fromString2(value, options = {}) {
  const { size: size4 } = options;
  const bytes = encoder.encode(value);
  if (typeof size4 === "number") {
    assertSize(bytes, size4);
    return padRight2(bytes, size4);
  }
  return bytes;
}
function padRight2(value, size4) {
  return pad2(value, { dir: "right", size: size4 });
}
function size2(value) {
  return value.length;
}
var SizeOverflowError = class extends BaseError2 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError = class extends BaseError2 {
  constructor({ size: size4, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size4}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Bytes.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Hex.js
var encoder2 = new TextEncoder();
var hexes2 = Array.from({ length: 256 }, (_v, i3) => i3.toString(16).padStart(2, "0"));
function concat3(...values) {
  return `0x${values.reduce((acc, x2) => acc + x2.replace("0x", ""), "")}`;
}
function fromBoolean(value, options = {}) {
  const hex = `0x${Number(value)}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padLeft(hex, options.size);
  }
  return hex;
}
function fromBytes2(value, options = {}) {
  let string = "";
  for (let i3 = 0; i3 < value.length; i3++)
    string += hexes2[value[i3]];
  const hex = `0x${string}`;
  if (typeof options.size === "number") {
    assertSize2(hex, options.size);
    return padRight(hex, options.size);
  }
  return hex;
}
function fromNumber(value, options = {}) {
  const { signed, size: size4 } = options;
  const value_ = BigInt(value);
  let maxValue;
  if (size4) {
    if (signed)
      maxValue = (1n << BigInt(size4) * 8n - 1n) - 1n;
    else
      maxValue = 2n ** (BigInt(size4) * 8n) - 1n;
  } else if (typeof value === "number") {
    maxValue = BigInt(Number.MAX_SAFE_INTEGER);
  }
  const minValue = typeof maxValue === "bigint" && signed ? -maxValue - 1n : 0;
  if (maxValue && value_ > maxValue || value_ < minValue) {
    const suffix = typeof value === "bigint" ? "n" : "";
    throw new IntegerOutOfRangeError({
      max: maxValue ? `${maxValue}${suffix}` : void 0,
      min: `${minValue}${suffix}`,
      signed,
      size: size4,
      value: `${value}${suffix}`
    });
  }
  const stringValue = (signed && value_ < 0 ? (1n << BigInt(size4 * 8)) + BigInt(value_) : value_).toString(16);
  const hex = `0x${stringValue}`;
  if (size4)
    return padLeft(hex, size4);
  return hex;
}
function fromString3(value, options = {}) {
  return fromBytes2(encoder2.encode(value), options);
}
function padLeft(value, size4) {
  return pad3(value, { dir: "left", size: size4 });
}
function padRight(value, size4) {
  return pad3(value, { dir: "right", size: size4 });
}
function size3(value) {
  return Math.ceil((value.length - 2) / 2);
}
var IntegerOutOfRangeError = class extends BaseError2 {
  constructor({ max, min, signed, size: size4, value }) {
    super(`Number \`${value}\` is not in safe${size4 ? ` ${size4 * 8}-bit` : ""}${signed ? " signed" : " unsigned"} integer range ${max ? `(\`${min}\` to \`${max}\`)` : `(above \`${min}\`)`}`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.IntegerOutOfRangeError"
    });
  }
};
var SizeOverflowError2 = class extends BaseError2 {
  constructor({ givenSize, maxSize }) {
    super(`Size cannot exceed \`${maxSize}\` bytes. Given size: \`${givenSize}\` bytes.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeOverflowError"
    });
  }
};
var SizeExceedsPaddingSizeError2 = class extends BaseError2 {
  constructor({ size: size4, targetSize, type }) {
    super(`${type.charAt(0).toUpperCase()}${type.slice(1).toLowerCase()} size (\`${size4}\`) exceeds padding size (\`${targetSize}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Hex.SizeExceedsPaddingSizeError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/_md.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h4 = isLE2 ? 4 : 0;
  const l4 = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h4, wh, isLE2);
  view.setUint32(byteOffset + l4, wl, isLE2);
}
function Chi(a2, b5, c3) {
  return a2 & b5 ^ ~a2 & c3;
}
function Maj(a2, b5, c3) {
  return a2 & b5 ^ a2 & c3 ^ b5 & c3;
}
var HashMD2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    aexists(this);
    data = toBytes2(data);
    abytes(data);
    const { view, buffer, blockLen } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    aexists(this);
    aoutput(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    clean(this.buffer.subarray(pos));
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i3 = pos; i3 < blockLen; i3++)
      buffer[i3] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i3 = 0; i3 < outLen; i3++)
      oview.setUint32(4 * i3, state[i3], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to3) {
    to3 || (to3 = new this.constructor());
    to3.set(...this.get());
    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to3.destroyed = destroyed;
    to3.finished = finished;
    to3.length = length;
    to3.pos = pos;
    if (length % blockLen)
      to3.buffer.set(buffer);
    return to3;
  }
  clone() {
    return this._cloneInto();
  }
};
var SHA256_IV = Uint32Array.from([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA224_IV = Uint32Array.from([
  3238371032,
  914150663,
  812702999,
  4144912697,
  4290775857,
  1750603025,
  1694076839,
  3204075428
]);
var SHA384_IV = Uint32Array.from([
  3418070365,
  3238371032,
  1654270250,
  914150663,
  2438529370,
  812702999,
  355462360,
  4144912697,
  1731405415,
  4290775857,
  2394180231,
  1750603025,
  3675008525,
  1694076839,
  1203062813,
  3204075428
]);
var SHA512_IV = Uint32Array.from([
  1779033703,
  4089235720,
  3144134277,
  2227873595,
  1013904242,
  4271175723,
  2773480762,
  1595750129,
  1359893119,
  2917565137,
  2600822924,
  725511199,
  528734635,
  4215389547,
  1541459225,
  327033209
]);

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/legacy.js
var SHA1_IV = Uint32Array.from([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]);
var SHA1_W = new Uint32Array(80);
var SHA1 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, false);
    this.A = SHA1_IV[0] | 0;
    this.B = SHA1_IV[1] | 0;
    this.C = SHA1_IV[2] | 0;
    this.D = SHA1_IV[3] | 0;
    this.E = SHA1_IV[4] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C6, D: D3, E: E6 } = this;
    return [A5, B4, C6, D3, E6];
  }
  set(A5, B4, C6, D3, E6) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E6 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      SHA1_W[i3] = view.getUint32(offset, false);
    for (let i3 = 16; i3 < 80; i3++)
      SHA1_W[i3] = rotl2(SHA1_W[i3 - 3] ^ SHA1_W[i3 - 8] ^ SHA1_W[i3 - 14] ^ SHA1_W[i3 - 16], 1);
    let { A: A5, B: B4, C: C6, D: D3, E: E6 } = this;
    for (let i3 = 0; i3 < 80; i3++) {
      let F5, K5;
      if (i3 < 20) {
        F5 = Chi(B4, C6, D3);
        K5 = 1518500249;
      } else if (i3 < 40) {
        F5 = B4 ^ C6 ^ D3;
        K5 = 1859775393;
      } else if (i3 < 60) {
        F5 = Maj(B4, C6, D3);
        K5 = 2400959708;
      } else {
        F5 = B4 ^ C6 ^ D3;
        K5 = 3395469782;
      }
      const T3 = rotl2(A5, 5) + F5 + E6 + K5 + SHA1_W[i3] | 0;
      E6 = D3;
      D3 = C6;
      C6 = rotl2(B4, 30);
      B4 = A5;
      A5 = T3;
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E6 = E6 + this.E | 0;
    this.set(A5, B4, C6, D3, E6);
  }
  roundClean() {
    clean(SHA1_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var sha1 = createHasher(() => new SHA1());
var p32 = Math.pow(2, 32);
var K = Array.from({ length: 64 }, (_2, i3) => Math.floor(p32 * Math.abs(Math.sin(i3 + 1))));
var MD5_IV = SHA1_IV.slice(0, 4);
var MD5_W = new Uint32Array(16);
var MD5 = class extends HashMD2 {
  constructor() {
    super(64, 16, 8, true);
    this.A = MD5_IV[0] | 0;
    this.B = MD5_IV[1] | 0;
    this.C = MD5_IV[2] | 0;
    this.D = MD5_IV[3] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C6, D: D3 } = this;
    return [A5, B4, C6, D3];
  }
  set(A5, B4, C6, D3) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      MD5_W[i3] = view.getUint32(offset, true);
    let { A: A5, B: B4, C: C6, D: D3 } = this;
    for (let i3 = 0; i3 < 64; i3++) {
      let F5, g, s;
      if (i3 < 16) {
        F5 = Chi(B4, C6, D3);
        g = i3;
        s = [7, 12, 17, 22];
      } else if (i3 < 32) {
        F5 = Chi(D3, B4, C6);
        g = (5 * i3 + 1) % 16;
        s = [5, 9, 14, 20];
      } else if (i3 < 48) {
        F5 = B4 ^ C6 ^ D3;
        g = (3 * i3 + 5) % 16;
        s = [4, 11, 16, 23];
      } else {
        F5 = C6 ^ (B4 | ~D3);
        g = 7 * i3 % 16;
        s = [6, 10, 15, 21];
      }
      F5 = F5 + A5 + K[i3] + MD5_W[g];
      A5 = D3;
      D3 = C6;
      C6 = B4;
      B4 = B4 + rotl2(F5, s[i3 % 4]);
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    this.set(A5, B4, C6, D3);
  }
  roundClean() {
    clean(MD5_W);
  }
  destroy() {
    this.set(0, 0, 0, 0);
    clean(this.buffer);
  }
};
var md5 = createHasher(() => new MD5());
var Rho160 = Uint8Array.from([
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8
]);
var Id160 = (() => Uint8Array.from(new Array(16).fill(0).map((_2, i3) => i3)))();
var Pi160 = (() => Id160.map((i3) => (9 * i3 + 5) % 16))();
var idxLR = (() => {
  const L4 = [Id160];
  const R5 = [Pi160];
  const res = [L4, R5];
  for (let i3 = 0; i3 < 4; i3++)
    for (let j3 of res)
      j3.push(j3[i3].map((k6) => Rho160[k6]));
  return res;
})();
var idxL2 = (() => idxLR[0])();
var idxR2 = (() => idxLR[1])();
var shifts160 = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i3) => Uint8Array.from(i3));
var shiftsL160 = idxL2.map((idx, i3) => idx.map((j3) => shifts160[i3][j3]));
var shiftsR160 = idxR2.map((idx, i3) => idx.map((j3) => shifts160[i3][j3]));
var Kl160 = Uint32Array.from([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr160 = Uint32Array.from([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
function ripemd_f(group, x2, y5, z3) {
  if (group === 0)
    return x2 ^ y5 ^ z3;
  if (group === 1)
    return x2 & y5 | ~x2 & z3;
  if (group === 2)
    return (x2 | ~y5) ^ z3;
  if (group === 3)
    return x2 & z3 | y5 & ~z3;
  return x2 ^ (y5 | ~z3);
}
var BUF_160 = new Uint32Array(16);
var RIPEMD1602 = class extends HashMD2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2: h22, h3: h32, h4 } = this;
    return [h0, h1, h22, h32, h4];
  }
  set(h0, h1, h22, h32, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h22 | 0;
    this.h3 = h32 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      BUF_160[i3] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar3 = al, bl = this.h1 | 0, br3 = bl, cl = this.h2 | 0, cr3 = cl, dl = this.h3 | 0, dr3 = dl, el = this.h4 | 0, er3 = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl160[group], hbr = Kr160[group];
      const rl = idxL2[group], rr3 = idxR2[group];
      const sl = shiftsL160[group], sr3 = shiftsR160[group];
      for (let i3 = 0; i3 < 16; i3++) {
        const tl = rotl2(al + ripemd_f(group, bl, cl, dl) + BUF_160[rl[i3]] + hbl, sl[i3]) + el | 0;
        al = el, el = dl, dl = rotl2(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i3 = 0; i3 < 16; i3++) {
        const tr3 = rotl2(ar3 + ripemd_f(rGroup, br3, cr3, dr3) + BUF_160[rr3[i3]] + hbr, sr3[i3]) + er3 | 0;
        ar3 = er3, er3 = dr3, dr3 = rotl2(cr3, 10) | 0, cr3 = br3, br3 = tr3;
      }
    }
    this.set(this.h1 + cl + dr3 | 0, this.h2 + dl + er3 | 0, this.h3 + el + ar3 | 0, this.h4 + al + br3 | 0, this.h0 + bl + cr3 | 0);
  }
  roundClean() {
    clean(BUF_160);
  }
  destroy() {
    this.destroyed = true;
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd1603 = createHasher(() => new RIPEMD1602());

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n3, le4 = false) {
  if (le4)
    return { h: Number(n3 & U32_MASK64), l: Number(n3 >> _32n & U32_MASK64) };
  return { h: Number(n3 >> _32n & U32_MASK64) | 0, l: Number(n3 & U32_MASK64) | 0 };
}
function split(lst, le4 = false) {
  const len = lst.length;
  let Ah = new Uint32Array(len);
  let Al = new Uint32Array(len);
  for (let i3 = 0; i3 < len; i3++) {
    const { h: h4, l: l4 } = fromBig(lst[i3], le4);
    [Ah[i3], Al[i3]] = [h4, l4];
  }
  return [Ah, Al];
}
var shrSH = (h4, _l, s) => h4 >>> s;
var shrSL = (h4, l4, s) => h4 << 32 - s | l4 >>> s;
var rotrSH = (h4, l4, s) => h4 >>> s | l4 << 32 - s;
var rotrSL = (h4, l4, s) => h4 << 32 - s | l4 >>> s;
var rotrBH = (h4, l4, s) => h4 << 64 - s | l4 >>> s - 32;
var rotrBL = (h4, l4, s) => h4 >>> s - 32 | l4 << 64 - s;
var rotlSH = (h4, l4, s) => h4 << s | l4 >>> 32 - s;
var rotlSL = (h4, l4, s) => l4 << s | h4 >>> 32 - s;
var rotlBH = (h4, l4, s) => l4 << s - 32 | h4 >>> 64 - s;
var rotlBL = (h4, l4, s) => h4 << s - 32 | l4 >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l4 = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l4 / 2 ** 32 | 0) | 0, l: l4 | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/sha3.js
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
var SHA3_PI = [];
var SHA3_ROTL = [];
var _SHA3_IOTA = [];
for (let round = 0, R5 = _1n2, x2 = 1, y5 = 0; round < 24; round++) {
  [x2, y5] = [y5, (2 * x2 + 3 * y5) % 5];
  SHA3_PI.push(2 * (5 * y5 + x2));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n2;
  for (let j3 = 0; j3 < 7; j3++) {
    R5 = (R5 << _1n2 ^ (R5 >> _7n) * _0x71n) % _256n;
    if (R5 & _2n)
      t ^= _1n2 << (_1n2 << BigInt(j3)) - _1n2;
  }
  _SHA3_IOTA.push(t);
}
var IOTAS = split(_SHA3_IOTA, true);
var SHA3_IOTA_H = IOTAS[0];
var SHA3_IOTA_L = IOTAS[1];
var rotlH = (h4, l4, s) => s > 32 ? rotlBH(h4, l4, s) : rotlSH(h4, l4, s);
var rotlL = (h4, l4, s) => s > 32 ? rotlBL(h4, l4, s) : rotlSL(h4, l4, s);
function keccakP(s, rounds = 24) {
  const B4 = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x2 = 0; x2 < 10; x2++)
      B4[x2] = s[x2] ^ s[x2 + 10] ^ s[x2 + 20] ^ s[x2 + 30] ^ s[x2 + 40];
    for (let x2 = 0; x2 < 10; x2 += 2) {
      const idx1 = (x2 + 8) % 10;
      const idx0 = (x2 + 2) % 10;
      const B0 = B4[idx0];
      const B1 = B4[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B4[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B4[idx1 + 1];
      for (let y5 = 0; y5 < 50; y5 += 10) {
        s[x2 + y5] ^= Th;
        s[x2 + y5 + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y5 = 0; y5 < 50; y5 += 10) {
      for (let x2 = 0; x2 < 10; x2++)
        B4[x2] = s[y5 + x2];
      for (let x2 = 0; x2 < 10; x2++)
        s[y5 + x2] ^= ~B4[(x2 + 2) % 10] & B4[(x2 + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  clean(B4);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    this.enableXOF = false;
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    anumber(outputLen);
    if (!(0 < blockLen && blockLen < 200))
      throw new Error("only keccak-f1600 function is supported");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  clone() {
    return this._cloneInto();
  }
  keccak() {
    swap32IfBE(this.state32);
    keccakP(this.state32, this.rounds);
    swap32IfBE(this.state32);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    aexists(this);
    data = toBytes2(data);
    abytes(data);
    const { blockLen, state } = this;
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i3 = 0; i3 < take; i3++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    aexists(this, false);
    abytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes) {
    anumber(bytes);
    return this.xofInto(new Uint8Array(bytes));
  }
  digestInto(out) {
    aoutput(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    clean(this.state);
  }
  _cloneInto(to3) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to3 || (to3 = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to3.state32.set(this.state32);
    to3.pos = this.pos;
    to3.posOut = this.posOut;
    to3.finished = this.finished;
    to3.rounds = rounds;
    to3.suffix = suffix;
    to3.outputLen = outputLen;
    to3.enableXOF = enableXOF;
    to3.destroyed = this.destroyed;
    return to3;
  }
};
var gen = (suffix, blockLen, outputLen) => createHasher(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = (() => gen(6, 144, 224 / 8))();
var sha3_256 = (() => gen(6, 136, 256 / 8))();
var sha3_384 = (() => gen(6, 104, 384 / 8))();
var sha3_512 = (() => gen(6, 72, 512 / 8))();
var keccak_224 = (() => gen(1, 144, 224 / 8))();
var keccak_256 = (() => gen(1, 136, 256 / 8))();
var keccak_384 = (() => gen(1, 104, 384 / 8))();
var keccak_512 = (() => gen(1, 72, 512 / 8))();
var genShake = (suffix, blockLen, outputLen) => createXOFer((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = (() => genShake(31, 168, 128 / 8))();
var shake256 = (() => genShake(31, 136, 256 / 8))();

// node_modules/@walletconnect/utils/node_modules/ox/node_modules/@noble/hashes/esm/sha2.js
var SHA256_K = Uint32Array.from([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends HashMD2 {
  constructor(outputLen = 32) {
    super(64, outputLen, 8, false);
    this.A = SHA256_IV[0] | 0;
    this.B = SHA256_IV[1] | 0;
    this.C = SHA256_IV[2] | 0;
    this.D = SHA256_IV[3] | 0;
    this.E = SHA256_IV[4] | 0;
    this.F = SHA256_IV[5] | 0;
    this.G = SHA256_IV[6] | 0;
    this.H = SHA256_IV[7] | 0;
  }
  get() {
    const { A: A5, B: B4, C: C6, D: D3, E: E6, F: F5, G: G4, H: H4 } = this;
    return [A5, B4, C6, D3, E6, F5, G4, H4];
  }
  // prettier-ignore
  set(A5, B4, C6, D3, E6, F5, G4, H4) {
    this.A = A5 | 0;
    this.B = B4 | 0;
    this.C = C6 | 0;
    this.D = D3 | 0;
    this.E = E6 | 0;
    this.F = F5 | 0;
    this.G = G4 | 0;
    this.H = H4 | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4)
      SHA256_W[i3] = view.getUint32(offset, false);
    for (let i3 = 16; i3 < 64; i3++) {
      const W15 = SHA256_W[i3 - 15];
      const W22 = SHA256_W[i3 - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W22, 17) ^ rotr(W22, 19) ^ W22 >>> 10;
      SHA256_W[i3] = s1 + SHA256_W[i3 - 7] + s0 + SHA256_W[i3 - 16] | 0;
    }
    let { A: A5, B: B4, C: C6, D: D3, E: E6, F: F5, G: G4, H: H4 } = this;
    for (let i3 = 0; i3 < 64; i3++) {
      const sigma1 = rotr(E6, 6) ^ rotr(E6, 11) ^ rotr(E6, 25);
      const T1 = H4 + sigma1 + Chi(E6, F5, G4) + SHA256_K[i3] + SHA256_W[i3] | 0;
      const sigma0 = rotr(A5, 2) ^ rotr(A5, 13) ^ rotr(A5, 22);
      const T22 = sigma0 + Maj(A5, B4, C6) | 0;
      H4 = G4;
      G4 = F5;
      F5 = E6;
      E6 = D3 + T1 | 0;
      D3 = C6;
      C6 = B4;
      B4 = A5;
      A5 = T1 + T22 | 0;
    }
    A5 = A5 + this.A | 0;
    B4 = B4 + this.B | 0;
    C6 = C6 + this.C | 0;
    D3 = D3 + this.D | 0;
    E6 = E6 + this.E | 0;
    F5 = F5 + this.F | 0;
    G4 = G4 + this.G | 0;
    H4 = H4 + this.H | 0;
    this.set(A5, B4, C6, D3, E6, F5, G4, H4);
  }
  roundClean() {
    clean(SHA256_W);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    clean(this.buffer);
  }
};
var SHA224 = class extends SHA256 {
  constructor() {
    super(28);
    this.A = SHA224_IV[0] | 0;
    this.B = SHA224_IV[1] | 0;
    this.C = SHA224_IV[2] | 0;
    this.D = SHA224_IV[3] | 0;
    this.E = SHA224_IV[4] | 0;
    this.F = SHA224_IV[5] | 0;
    this.G = SHA224_IV[6] | 0;
    this.H = SHA224_IV[7] | 0;
  }
};
var K512 = (() => split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n3) => BigInt(n3))))();
var SHA512_Kh = (() => K512[0])();
var SHA512_Kl = (() => K512[1])();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends HashMD2 {
  constructor(outputLen = 64) {
    super(128, outputLen, 16, false);
    this.Ah = SHA512_IV[0] | 0;
    this.Al = SHA512_IV[1] | 0;
    this.Bh = SHA512_IV[2] | 0;
    this.Bl = SHA512_IV[3] | 0;
    this.Ch = SHA512_IV[4] | 0;
    this.Cl = SHA512_IV[5] | 0;
    this.Dh = SHA512_IV[6] | 0;
    this.Dl = SHA512_IV[7] | 0;
    this.Eh = SHA512_IV[8] | 0;
    this.El = SHA512_IV[9] | 0;
    this.Fh = SHA512_IV[10] | 0;
    this.Fl = SHA512_IV[11] | 0;
    this.Gh = SHA512_IV[12] | 0;
    this.Gl = SHA512_IV[13] | 0;
    this.Hh = SHA512_IV[14] | 0;
    this.Hl = SHA512_IV[15] | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i3 = 0; i3 < 16; i3++, offset += 4) {
      SHA512_W_H[i3] = view.getUint32(offset);
      SHA512_W_L[i3] = view.getUint32(offset += 4);
    }
    for (let i3 = 16; i3 < 80; i3++) {
      const W15h = SHA512_W_H[i3 - 15] | 0;
      const W15l = SHA512_W_L[i3 - 15] | 0;
      const s0h = rotrSH(W15h, W15l, 1) ^ rotrSH(W15h, W15l, 8) ^ shrSH(W15h, W15l, 7);
      const s0l = rotrSL(W15h, W15l, 1) ^ rotrSL(W15h, W15l, 8) ^ shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i3 - 2] | 0;
      const W2l = SHA512_W_L[i3 - 2] | 0;
      const s1h = rotrSH(W2h, W2l, 19) ^ rotrBH(W2h, W2l, 61) ^ shrSH(W2h, W2l, 6);
      const s1l = rotrSL(W2h, W2l, 19) ^ rotrBL(W2h, W2l, 61) ^ shrSL(W2h, W2l, 6);
      const SUMl = add4L(s0l, s1l, SHA512_W_L[i3 - 7], SHA512_W_L[i3 - 16]);
      const SUMh = add4H(SUMl, s0h, s1h, SHA512_W_H[i3 - 7], SHA512_W_H[i3 - 16]);
      SHA512_W_H[i3] = SUMh | 0;
      SHA512_W_L[i3] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i3 = 0; i3 < 80; i3++) {
      const sigma1h = rotrSH(Eh, El, 14) ^ rotrSH(Eh, El, 18) ^ rotrBH(Eh, El, 41);
      const sigma1l = rotrSL(Eh, El, 14) ^ rotrSL(Eh, El, 18) ^ rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = add5L(Hl, sigma1l, CHIl, SHA512_Kl[i3], SHA512_W_L[i3]);
      const T1h = add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i3], SHA512_W_H[i3]);
      const T1l = T1ll | 0;
      const sigma0h = rotrSH(Ah, Al, 28) ^ rotrBH(Ah, Al, 34) ^ rotrBH(Ah, Al, 39);
      const sigma0l = rotrSL(Ah, Al, 28) ^ rotrBL(Ah, Al, 34) ^ rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = add3L(T1l, sigma0l, MAJl);
      Ah = add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    clean(SHA512_W_H, SHA512_W_L);
  }
  destroy() {
    clean(this.buffer);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super(48);
    this.Ah = SHA384_IV[0] | 0;
    this.Al = SHA384_IV[1] | 0;
    this.Bh = SHA384_IV[2] | 0;
    this.Bl = SHA384_IV[3] | 0;
    this.Ch = SHA384_IV[4] | 0;
    this.Cl = SHA384_IV[5] | 0;
    this.Dh = SHA384_IV[6] | 0;
    this.Dl = SHA384_IV[7] | 0;
    this.Eh = SHA384_IV[8] | 0;
    this.El = SHA384_IV[9] | 0;
    this.Fh = SHA384_IV[10] | 0;
    this.Fl = SHA384_IV[11] | 0;
    this.Gh = SHA384_IV[12] | 0;
    this.Gl = SHA384_IV[13] | 0;
    this.Hh = SHA384_IV[14] | 0;
    this.Hl = SHA384_IV[15] | 0;
  }
};
var T224_IV = Uint32Array.from([
  2352822216,
  424955298,
  1944164710,
  2312950998,
  502970286,
  855612546,
  1738396948,
  1479516111,
  258812777,
  2077511080,
  2011393907,
  79989058,
  1067287976,
  1780299464,
  286451373,
  2446758561
]);
var T256_IV = Uint32Array.from([
  573645204,
  4230739756,
  2673172387,
  3360449730,
  596883563,
  1867755857,
  2520282905,
  1497426621,
  2519219938,
  2827943907,
  3193839141,
  1401305490,
  721525244,
  746961066,
  246885852,
  2177182882
]);
var SHA512_224 = class extends SHA512 {
  constructor() {
    super(28);
    this.Ah = T224_IV[0] | 0;
    this.Al = T224_IV[1] | 0;
    this.Bh = T224_IV[2] | 0;
    this.Bl = T224_IV[3] | 0;
    this.Ch = T224_IV[4] | 0;
    this.Cl = T224_IV[5] | 0;
    this.Dh = T224_IV[6] | 0;
    this.Dl = T224_IV[7] | 0;
    this.Eh = T224_IV[8] | 0;
    this.El = T224_IV[9] | 0;
    this.Fh = T224_IV[10] | 0;
    this.Fl = T224_IV[11] | 0;
    this.Gh = T224_IV[12] | 0;
    this.Gl = T224_IV[13] | 0;
    this.Hh = T224_IV[14] | 0;
    this.Hl = T224_IV[15] | 0;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super(32);
    this.Ah = T256_IV[0] | 0;
    this.Al = T256_IV[1] | 0;
    this.Bh = T256_IV[2] | 0;
    this.Bl = T256_IV[3] | 0;
    this.Ch = T256_IV[4] | 0;
    this.Cl = T256_IV[5] | 0;
    this.Dh = T256_IV[6] | 0;
    this.Dl = T256_IV[7] | 0;
    this.Eh = T256_IV[8] | 0;
    this.El = T256_IV[9] | 0;
    this.Fh = T256_IV[10] | 0;
    this.Fl = T256_IV[11] | 0;
    this.Gh = T256_IV[12] | 0;
    this.Gl = T256_IV[13] | 0;
    this.Hh = T256_IV[14] | 0;
    this.Hl = T256_IV[15] | 0;
  }
};
var sha2563 = createHasher(() => new SHA256());
var sha224 = createHasher(() => new SHA224());
var sha512 = createHasher(() => new SHA512());
var sha384 = createHasher(() => new SHA384());
var sha512_256 = createHasher(() => new SHA512_256());
var sha512_224 = createHasher(() => new SHA512_224());

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Hash.js
function keccak2562(value, options = {}) {
  const { as = typeof value === "string" ? "Hex" : "Bytes" } = options;
  const bytes = keccak_256(from(value));
  if (as === "Bytes")
    return bytes;
  return fromBytes2(bytes);
}

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/lru.js
var LruMap2 = class extends Map {
  constructor(size4) {
    super();
    Object.defineProperty(this, "maxSize", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.maxSize = size4;
  }
  get(key) {
    const value = super.get(key);
    if (super.has(key) && value !== void 0) {
      this.delete(key);
      super.set(key, value);
    }
    return value;
  }
  set(key, value) {
    super.set(key, value);
    if (this.maxSize && this.size > this.maxSize) {
      const firstKey = this.keys().next().value;
      if (firstKey)
        this.delete(firstKey);
    }
    return this;
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Caches.js
var caches = {
  checksum: new LruMap2(8192)
};
var checksum = caches.checksum;

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Address.js
var addressRegex = /^0x[a-fA-F0-9]{40}$/;
function assert(value, options = {}) {
  const { strict = true } = options;
  if (!addressRegex.test(value))
    throw new InvalidAddressError2({
      address: value,
      cause: new InvalidInputError()
    });
  if (strict) {
    if (value.toLowerCase() === value)
      return;
    if (checksum2(value) !== value)
      throw new InvalidAddressError2({
        address: value,
        cause: new InvalidChecksumError()
      });
  }
}
function checksum2(address) {
  if (checksum.has(address))
    return checksum.get(address);
  assert(address, { strict: false });
  const hexAddress = address.substring(2).toLowerCase();
  const hash = keccak2562(fromString2(hexAddress), { as: "Bytes" });
  const characters = hexAddress.split("");
  for (let i3 = 0; i3 < 40; i3 += 2) {
    if (hash[i3 >> 1] >> 4 >= 8 && characters[i3]) {
      characters[i3] = characters[i3].toUpperCase();
    }
    if ((hash[i3 >> 1] & 15) >= 8 && characters[i3 + 1]) {
      characters[i3 + 1] = characters[i3 + 1].toUpperCase();
    }
  }
  const result = `0x${characters.join("")}`;
  checksum.set(address, result);
  return result;
}
var InvalidAddressError2 = class extends BaseError2 {
  constructor({ address, cause }) {
    super(`Address "${address}" is invalid.`, {
      cause
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidAddressError"
    });
  }
};
var InvalidInputError = class extends BaseError2 {
  constructor() {
    super("Address is not a 20 byte (40 hexadecimal character) value.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidInputError"
    });
  }
};
var InvalidChecksumError = class extends BaseError2 {
  constructor() {
    super("Address does not match its checksum counterpart.");
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Address.InvalidChecksumError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/Solidity.js
var arrayRegex2 = /^(.*)\[([0-9]*)\]$/;
var bytesRegex3 = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
var integerRegex3 = /^(u?int)(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
var maxInt8 = 2n ** (8n - 1n) - 1n;
var maxInt16 = 2n ** (16n - 1n) - 1n;
var maxInt24 = 2n ** (24n - 1n) - 1n;
var maxInt32 = 2n ** (32n - 1n) - 1n;
var maxInt40 = 2n ** (40n - 1n) - 1n;
var maxInt48 = 2n ** (48n - 1n) - 1n;
var maxInt56 = 2n ** (56n - 1n) - 1n;
var maxInt64 = 2n ** (64n - 1n) - 1n;
var maxInt72 = 2n ** (72n - 1n) - 1n;
var maxInt80 = 2n ** (80n - 1n) - 1n;
var maxInt88 = 2n ** (88n - 1n) - 1n;
var maxInt96 = 2n ** (96n - 1n) - 1n;
var maxInt104 = 2n ** (104n - 1n) - 1n;
var maxInt112 = 2n ** (112n - 1n) - 1n;
var maxInt120 = 2n ** (120n - 1n) - 1n;
var maxInt128 = 2n ** (128n - 1n) - 1n;
var maxInt136 = 2n ** (136n - 1n) - 1n;
var maxInt144 = 2n ** (144n - 1n) - 1n;
var maxInt152 = 2n ** (152n - 1n) - 1n;
var maxInt160 = 2n ** (160n - 1n) - 1n;
var maxInt168 = 2n ** (168n - 1n) - 1n;
var maxInt176 = 2n ** (176n - 1n) - 1n;
var maxInt184 = 2n ** (184n - 1n) - 1n;
var maxInt192 = 2n ** (192n - 1n) - 1n;
var maxInt200 = 2n ** (200n - 1n) - 1n;
var maxInt208 = 2n ** (208n - 1n) - 1n;
var maxInt216 = 2n ** (216n - 1n) - 1n;
var maxInt224 = 2n ** (224n - 1n) - 1n;
var maxInt232 = 2n ** (232n - 1n) - 1n;
var maxInt240 = 2n ** (240n - 1n) - 1n;
var maxInt248 = 2n ** (248n - 1n) - 1n;
var maxInt256 = 2n ** (256n - 1n) - 1n;
var minInt8 = -(2n ** (8n - 1n));
var minInt16 = -(2n ** (16n - 1n));
var minInt24 = -(2n ** (24n - 1n));
var minInt32 = -(2n ** (32n - 1n));
var minInt40 = -(2n ** (40n - 1n));
var minInt48 = -(2n ** (48n - 1n));
var minInt56 = -(2n ** (56n - 1n));
var minInt64 = -(2n ** (64n - 1n));
var minInt72 = -(2n ** (72n - 1n));
var minInt80 = -(2n ** (80n - 1n));
var minInt88 = -(2n ** (88n - 1n));
var minInt96 = -(2n ** (96n - 1n));
var minInt104 = -(2n ** (104n - 1n));
var minInt112 = -(2n ** (112n - 1n));
var minInt120 = -(2n ** (120n - 1n));
var minInt128 = -(2n ** (128n - 1n));
var minInt136 = -(2n ** (136n - 1n));
var minInt144 = -(2n ** (144n - 1n));
var minInt152 = -(2n ** (152n - 1n));
var minInt160 = -(2n ** (160n - 1n));
var minInt168 = -(2n ** (168n - 1n));
var minInt176 = -(2n ** (176n - 1n));
var minInt184 = -(2n ** (184n - 1n));
var minInt192 = -(2n ** (192n - 1n));
var minInt200 = -(2n ** (200n - 1n));
var minInt208 = -(2n ** (208n - 1n));
var minInt216 = -(2n ** (216n - 1n));
var minInt224 = -(2n ** (224n - 1n));
var minInt232 = -(2n ** (232n - 1n));
var minInt240 = -(2n ** (240n - 1n));
var minInt248 = -(2n ** (248n - 1n));
var minInt256 = -(2n ** (256n - 1n));
var maxUint8 = 2n ** 8n - 1n;
var maxUint16 = 2n ** 16n - 1n;
var maxUint24 = 2n ** 24n - 1n;
var maxUint32 = 2n ** 32n - 1n;
var maxUint40 = 2n ** 40n - 1n;
var maxUint48 = 2n ** 48n - 1n;
var maxUint56 = 2n ** 56n - 1n;
var maxUint64 = 2n ** 64n - 1n;
var maxUint72 = 2n ** 72n - 1n;
var maxUint80 = 2n ** 80n - 1n;
var maxUint88 = 2n ** 88n - 1n;
var maxUint96 = 2n ** 96n - 1n;
var maxUint104 = 2n ** 104n - 1n;
var maxUint112 = 2n ** 112n - 1n;
var maxUint120 = 2n ** 120n - 1n;
var maxUint128 = 2n ** 128n - 1n;
var maxUint136 = 2n ** 136n - 1n;
var maxUint144 = 2n ** 144n - 1n;
var maxUint152 = 2n ** 152n - 1n;
var maxUint160 = 2n ** 160n - 1n;
var maxUint168 = 2n ** 168n - 1n;
var maxUint176 = 2n ** 176n - 1n;
var maxUint184 = 2n ** 184n - 1n;
var maxUint192 = 2n ** 192n - 1n;
var maxUint200 = 2n ** 200n - 1n;
var maxUint208 = 2n ** 208n - 1n;
var maxUint216 = 2n ** 216n - 1n;
var maxUint224 = 2n ** 224n - 1n;
var maxUint232 = 2n ** 232n - 1n;
var maxUint240 = 2n ** 240n - 1n;
var maxUint248 = 2n ** 248n - 1n;
var maxUint2562 = 2n ** 256n - 1n;

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/internal/cursor.js
var staticCursor = {
  bytes: new Uint8Array(),
  dataView: new DataView(new ArrayBuffer(0)),
  position: 0,
  positionReadCount: /* @__PURE__ */ new Map(),
  recursiveReadCount: 0,
  recursiveReadLimit: Number.POSITIVE_INFINITY,
  assertReadLimit() {
    if (this.recursiveReadCount >= this.recursiveReadLimit)
      throw new RecursiveReadLimitExceededError({
        count: this.recursiveReadCount + 1,
        limit: this.recursiveReadLimit
      });
  },
  assertPosition(position) {
    if (position < 0 || position > this.bytes.length - 1)
      throw new PositionOutOfBoundsError2({
        length: this.bytes.length,
        position
      });
  },
  decrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position - offset;
    this.assertPosition(position);
    this.position = position;
  },
  getReadCount(position) {
    return this.positionReadCount.get(position || this.position) || 0;
  },
  incrementPosition(offset) {
    if (offset < 0)
      throw new NegativeOffsetError({ offset });
    const position = this.position + offset;
    this.assertPosition(position);
    this.position = position;
  },
  inspectByte(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectBytes(length, position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + length - 1);
    return this.bytes.subarray(position, position + length);
  },
  inspectUint8(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position);
    return this.bytes[position];
  },
  inspectUint16(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 1);
    return this.dataView.getUint16(position);
  },
  inspectUint24(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 2);
    return (this.dataView.getUint16(position) << 8) + this.dataView.getUint8(position + 2);
  },
  inspectUint32(position_) {
    const position = position_ ?? this.position;
    this.assertPosition(position + 3);
    return this.dataView.getUint32(position);
  },
  pushByte(byte) {
    this.assertPosition(this.position);
    this.bytes[this.position] = byte;
    this.position++;
  },
  pushBytes(bytes) {
    this.assertPosition(this.position + bytes.length - 1);
    this.bytes.set(bytes, this.position);
    this.position += bytes.length;
  },
  pushUint8(value) {
    this.assertPosition(this.position);
    this.bytes[this.position] = value;
    this.position++;
  },
  pushUint16(value) {
    this.assertPosition(this.position + 1);
    this.dataView.setUint16(this.position, value);
    this.position += 2;
  },
  pushUint24(value) {
    this.assertPosition(this.position + 2);
    this.dataView.setUint16(this.position, value >> 8);
    this.dataView.setUint8(this.position + 2, value & ~4294967040);
    this.position += 3;
  },
  pushUint32(value) {
    this.assertPosition(this.position + 3);
    this.dataView.setUint32(this.position, value);
    this.position += 4;
  },
  readByte() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectByte();
    this.position++;
    return value;
  },
  readBytes(length, size4) {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectBytes(length);
    this.position += size4 ?? length;
    return value;
  },
  readUint8() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint8();
    this.position += 1;
    return value;
  },
  readUint16() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint16();
    this.position += 2;
    return value;
  },
  readUint24() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint24();
    this.position += 3;
    return value;
  },
  readUint32() {
    this.assertReadLimit();
    this._touch();
    const value = this.inspectUint32();
    this.position += 4;
    return value;
  },
  get remaining() {
    return this.bytes.length - this.position;
  },
  setPosition(position) {
    const oldPosition = this.position;
    this.assertPosition(position);
    this.position = position;
    return () => this.position = oldPosition;
  },
  _touch() {
    if (this.recursiveReadLimit === Number.POSITIVE_INFINITY)
      return;
    const count = this.getReadCount();
    this.positionReadCount.set(this.position, count + 1);
    if (count > 0)
      this.recursiveReadCount++;
  }
};
var NegativeOffsetError = class extends BaseError2 {
  constructor({ offset }) {
    super(`Offset \`${offset}\` cannot be negative.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.NegativeOffsetError"
    });
  }
};
var PositionOutOfBoundsError2 = class extends BaseError2 {
  constructor({ length, position }) {
    super(`Position \`${position}\` is out of bounds (\`0 < position < ${length}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.PositionOutOfBoundsError"
    });
  }
};
var RecursiveReadLimitExceededError = class extends BaseError2 {
  constructor({ count, limit }) {
    super(`Recursive read limit of \`${limit}\` exceeded (recursive read count: \`${count}\`).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "Cursor.RecursiveReadLimitExceededError"
    });
  }
};

// node_modules/@walletconnect/utils/node_modules/ox/_esm/core/AbiParameters.js
function encodePacked2(types, values) {
  if (types.length !== values.length)
    throw new LengthMismatchError({
      expectedLength: types.length,
      givenLength: values.length
    });
  const data = [];
  for (let i3 = 0; i3 < types.length; i3++) {
    const type = types[i3];
    const value = values[i3];
    data.push(encodePacked2.encode(type, value));
  }
  return concat3(...data);
}
(function(encodePacked3) {
  function encode4(type, value, isArray = false) {
    if (type === "address") {
      const address = value;
      assert(address);
      return padLeft(address.toLowerCase(), isArray ? 32 : 0);
    }
    if (type === "string")
      return fromString3(value);
    if (type === "bytes")
      return value;
    if (type === "bool")
      return padLeft(fromBoolean(value), isArray ? 32 : 1);
    const intMatch = type.match(integerRegex3);
    if (intMatch) {
      const [_type, baseType, bits = "256"] = intMatch;
      const size4 = Number.parseInt(bits) / 8;
      return fromNumber(value, {
        size: isArray ? 32 : size4,
        signed: baseType === "int"
      });
    }
    const bytesMatch = type.match(bytesRegex3);
    if (bytesMatch) {
      const [_type, size4] = bytesMatch;
      if (Number.parseInt(size4) !== (value.length - 2) / 2)
        throw new BytesSizeMismatchError2({
          expectedSize: Number.parseInt(size4),
          value
        });
      return padRight(value, isArray ? 32 : 0);
    }
    const arrayMatch = type.match(arrayRegex2);
    if (arrayMatch && Array.isArray(value)) {
      const [_type, childType] = arrayMatch;
      const data = [];
      for (let i3 = 0; i3 < value.length; i3++) {
        data.push(encode4(childType, value[i3], true));
      }
      if (data.length === 0)
        return "0x";
      return concat3(...data);
    }
    throw new InvalidTypeError(type);
  }
  encodePacked3.encode = encode4;
})(encodePacked2 || (encodePacked2 = {}));
var BytesSizeMismatchError2 = class extends BaseError2 {
  constructor({ expectedSize, value }) {
    super(`Size of bytes "${value}" (bytes${size3(value)}) does not match expected size (bytes${expectedSize}).`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.BytesSizeMismatchError"
    });
  }
};
var LengthMismatchError = class extends BaseError2 {
  constructor({ expectedLength, givenLength }) {
    super([
      "ABI encoding parameters/values length mismatch.",
      `Expected length (parameters): ${expectedLength}`,
      `Given length (values): ${givenLength}`
    ].join("\n"));
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.LengthMismatchError"
    });
  }
};
var InvalidTypeError = class extends BaseError2 {
  constructor(type) {
    super(`Type \`${type}\` is not a valid ABI Type.`);
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: "AbiParameters.InvalidTypeError"
    });
  }
};

// node_modules/@walletconnect/utils/dist/index.es.js
var ae = ":";
function Ne(t) {
  const [e, n3] = t.split(ae);
  return { namespace: e, reference: n3 };
}
function Ko(t, e = []) {
  const n3 = [];
  return Object.keys(t).forEach((r2) => {
    if (e.length && !e.includes(r2)) return;
    const o2 = t[r2];
    n3.push(...o2.accounts);
  }), n3;
}
function ue(t, e) {
  return t.includes(":") ? [t] : e.chains || [];
}
var Zo = Object.defineProperty;
var Yo = Object.defineProperties;
var Go = Object.getOwnPropertyDescriptors;
var Tn = Object.getOwnPropertySymbols;
var Wo = Object.prototype.hasOwnProperty;
var Xo = Object.prototype.propertyIsEnumerable;
var Rn = (t, e, n3) => e in t ? Zo(t, e, { enumerable: true, configurable: true, writable: true, value: n3 }) : t[e] = n3;
var _n = (t, e) => {
  for (var n3 in e || (e = {})) Wo.call(e, n3) && Rn(t, n3, e[n3]);
  if (Tn) for (var n3 of Tn(e)) Xo.call(e, n3) && Rn(t, n3, e[n3]);
  return t;
};
var Jo = (t, e) => Yo(t, Go(e));
var $n = "ReactNative";
var Y = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" };
var jn = "js";
function _e() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function pt() {
  return !(0, import_window_getters.getDocument)() && !!(0, import_window_getters.getNavigator)() && navigator.product === $n;
}
function ei() {
  return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "android";
}
function ni() {
  return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u" && (global == null ? void 0 : global.Platform.OS) === "ios";
}
function Tt() {
  return !_e() && !!(0, import_window_getters.getNavigator)() && !!(0, import_window_getters.getDocument)();
}
function xt() {
  return pt() ? Y.reactNative : _e() ? Y.node : Tt() ? Y.browser : Y.unknown;
}
function ri() {
  var t;
  try {
    return pt() && typeof global < "u" && typeof (global == null ? void 0 : global.Application) < "u" ? (t = global.Application) == null ? void 0 : t.applicationId : void 0;
  } catch {
    return;
  }
}
function Cn(t, e) {
  const n3 = new URLSearchParams(t);
  for (const r2 of Object.keys(e).sort()) if (e.hasOwnProperty(r2)) {
    const o2 = e[r2];
    o2 !== void 0 && n3.set(r2, o2);
  }
  return n3.toString();
}
function oi(t) {
  var e, n3;
  const r2 = Pn();
  try {
    return t != null && t.url && r2.url && new URL(t.url).host !== new URL(r2.url).host && (console.warn(`The configured WalletConnect 'metadata.url':${t.url} differs from the actual page url:${r2.url}. This is probably unintended and can lead to issues.`), t.url = r2.url), (e = t == null ? void 0 : t.icons) != null && e.length && t.icons.length > 0 && (t.icons = t.icons.filter((o2) => o2 !== "")), Jo(_n(_n({}, r2), t), { url: (t == null ? void 0 : t.url) || r2.url, name: (t == null ? void 0 : t.name) || r2.name, description: (t == null ? void 0 : t.description) || r2.description, icons: (n3 = t == null ? void 0 : t.icons) != null && n3.length && t.icons.length > 0 ? t.icons : r2.icons });
  } catch (o2) {
    return console.warn("Error populating app metadata", o2), t || r2;
  }
}
function Pn() {
  return (0, import_window_metadata.getWindowMetadata)() || { name: "", description: "", url: "", icons: [""] };
}
function kn() {
  if (xt() === Y.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: n3, Version: r2 } = global.Platform;
    return [n3, r2].join("-");
  }
  const t = detect();
  if (t === null) return "unknown";
  const e = t.os ? t.os.replace(" ", "").toLowerCase() : "unknown";
  return t.type === "browser" ? [e, t.name, t.version].join("-") : [e, t.version].join("-");
}
function Vn() {
  var t;
  const e = xt();
  return e === Y.browser ? [e, ((t = (0, import_window_getters.getLocation)()) == null ? void 0 : t.host) || "unknown"].join(":") : e;
}
function Mn(t, e, n3) {
  const r2 = kn(), o2 = Vn();
  return [[t, e].join("-"), [jn, n3].join("-"), r2, o2].join("/");
}
function si({ protocol: t, version: e, relayUrl: n3, sdkVersion: r2, auth: o2, projectId: i3, useOnCloseEvent: s, bundleId: c3, packageName: a2 }) {
  const u3 = n3.split("?"), l4 = Mn(t, e, r2), f7 = { auth: o2, ua: l4, projectId: i3, useOnCloseEvent: s || void 0, packageName: a2 || void 0, bundleId: c3 || void 0 }, h4 = Cn(u3[1] || "", f7);
  return u3[0] + "?" + h4;
}
function gt(t, e) {
  return t.filter((n3) => e.includes(n3)).length === t.length;
}
function fi(t) {
  return Object.fromEntries(t.entries());
}
function li(t) {
  return new Map(Object.entries(t));
}
function gi(t = import_time.FIVE_MINUTES, e) {
  const n3 = (0, import_time.toMiliseconds)(t || import_time.FIVE_MINUTES);
  let r2, o2, i3, s;
  return { resolve: (c3) => {
    i3 && r2 && (clearTimeout(i3), r2(c3), s = Promise.resolve(c3));
  }, reject: (c3) => {
    i3 && o2 && (clearTimeout(i3), o2(c3));
  }, done: () => new Promise((c3, a2) => {
    if (s) return c3(s);
    i3 = setTimeout(() => {
      const u3 = new Error(e);
      s = Promise.reject(u3), a2(u3);
    }, n3), r2 = c3, o2 = a2;
  }) };
}
function yi(t, e, n3) {
  return new Promise(async (r2, o2) => {
    const i3 = setTimeout(() => o2(new Error(n3)), e);
    try {
      const s = await t;
      r2(s);
    } catch (s) {
      o2(s);
    }
    clearTimeout(i3);
  });
}
function $e(t, e) {
  if (typeof e == "string" && e.startsWith(`${t}:`)) return e;
  if (t.toLowerCase() === "topic") {
    if (typeof e != "string") throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (t.toLowerCase() === "id") {
    if (typeof e != "number") throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${t}`);
}
function mi(t) {
  return $e("topic", t);
}
function wi(t) {
  return $e("id", t);
}
function bi(t) {
  const [e, n3] = t.split(":"), r2 = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof n3 == "string") r2.topic = n3;
  else if (e === "id" && Number.isInteger(Number(n3))) r2.id = Number(n3);
  else throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${n3}`);
  return r2;
}
function Ei(t, e) {
  return (0, import_time.fromMiliseconds)((e || Date.now()) + (0, import_time.toMiliseconds)(t));
}
function vi(t) {
  return Date.now() >= (0, import_time.toMiliseconds)(t);
}
function xi(t, e) {
  return `${t}${e ? `:${e}` : ""}`;
}
function ot(t = [], e = []) {
  return [.../* @__PURE__ */ new Set([...t, ...e])];
}
async function Si({ id: t, topic: e, wcDeepLink: n3 }) {
  var r2;
  try {
    if (!n3) return;
    const o2 = typeof n3 == "string" ? JSON.parse(n3) : n3, i3 = o2 == null ? void 0 : o2.href;
    if (typeof i3 != "string") return;
    const s = Kn(i3, t, e), c3 = xt();
    if (c3 === Y.browser) {
      if (!((r2 = (0, import_window_getters.getDocument)()) != null && r2.hasFocus())) {
        console.warn("Document does not have focus, skipping deeplink.");
        return;
      }
      Fn(s);
    } else c3 === Y.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(s);
  } catch (o2) {
    console.error(o2);
  }
}
function Kn(t, e, n3) {
  const r2 = `requestId=${e}&sessionTopic=${n3}`;
  t.endsWith("/") && (t = t.slice(0, -1));
  let o2 = `${t}`;
  if (t.startsWith("https://t.me")) {
    const i3 = t.includes("?") ? "&startapp=" : "?startapp=";
    o2 = `${o2}${i3}${Yn(r2, true)}`;
  } else o2 = `${o2}/wc?${r2}`;
  return o2;
}
function Fn(t) {
  let e = "_self";
  Zn() ? e = "_top" : (zn() || t.startsWith("https://") || t.startsWith("http://")) && (e = "_blank"), window.open(t, e, "noreferrer noopener");
}
async function Oi(t, e) {
  let n3 = "";
  try {
    if (Tt() && (n3 = localStorage.getItem(e), n3)) return n3;
    n3 = await t.getItem(e);
  } catch (r2) {
    console.error(r2);
  }
  return n3;
}
function Ai(t, e) {
  if (!t.includes(e)) return null;
  const n3 = t.split(/([&,?,=])/), r2 = n3.indexOf(e);
  return n3[r2 + 2];
}
function Bi() {
  return typeof crypto < "u" && crypto != null && crypto.randomUUID ? crypto.randomUUID() : "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/gu, (t) => {
    const e = Math.random() * 16 | 0;
    return (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
function Ii() {
  return typeof process < "u" && process.env.IS_VITEST === "true";
}
function zn() {
  return typeof window < "u" && (!!window.TelegramWebviewProxy || !!window.Telegram || !!window.TelegramWebviewProxyProto);
}
function Zn() {
  try {
    return window.self !== window.top;
  } catch {
    return false;
  }
}
function Yn(t, e = false) {
  const n3 = Buffer.from(t).toString("base64");
  return e ? n3.replace(/[=]/g, "") : n3;
}
function je(t) {
  return Buffer.from(t, "base64").toString("utf-8");
}
function Ni(t) {
  return new Promise((e) => setTimeout(e, t));
}
function Wt(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function Ui(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function Xt(t, ...e) {
  if (!Ui(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function Ce(t) {
  if (typeof t != "function" || typeof t.create != "function") throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Wt(t.outputLen), Wt(t.blockLen);
}
function Rt(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function Gn(t, e) {
  Xt(t);
  const n3 = e.outputLen;
  if (t.length < n3) throw new Error("digestInto() expects output buffer of length at least " + n3);
}
var le = BigInt(2 ** 32 - 1);
var Wn = BigInt(32);
function Ti(t, e = false) {
  return e ? { h: Number(t & le), l: Number(t >> Wn & le) } : { h: Number(t >> Wn & le) | 0, l: Number(t & le) | 0 };
}
function Ri(t, e = false) {
  let n3 = new Uint32Array(t.length), r2 = new Uint32Array(t.length);
  for (let o2 = 0; o2 < t.length; o2++) {
    const { h: i3, l: s } = Ti(t[o2], e);
    [n3[o2], r2[o2]] = [i3, s];
  }
  return [n3, r2];
}
var _i = (t, e, n3) => t << n3 | e >>> 32 - n3;
var $i = (t, e, n3) => e << n3 | t >>> 32 - n3;
var Li = (t, e, n3) => e << n3 - 32 | t >>> 64 - n3;
var ji = (t, e, n3) => t << n3 - 32 | e >>> 64 - n3;
var _t = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
function Ci(t) {
  return new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
}
function Pe(t) {
  return new DataView(t.buffer, t.byteOffset, t.byteLength);
}
function ct(t, e) {
  return t << 32 - e | t >>> e;
}
var Xn = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
function Pi2(t) {
  return t << 24 & 4278190080 | t << 8 & 16711680 | t >>> 8 & 65280 | t >>> 24 & 255;
}
function Jn(t) {
  for (let e = 0; e < t.length; e++) t[e] = Pi2(t[e]);
}
function ki(t) {
  if (typeof t != "string") throw new Error("utf8ToBytes expected string, got " + typeof t);
  return new Uint8Array(new TextEncoder().encode(t));
}
function $t(t) {
  return typeof t == "string" && (t = ki(t)), Xt(t), t;
}
function Vi(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    Xt(o2), e += o2.length;
  }
  const n3 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const i3 = t[r2];
    n3.set(i3, o2), o2 += i3.length;
  }
  return n3;
}
var ke = class {
  clone() {
    return this._cloneInto();
  }
};
function Qn(t) {
  const e = (r2) => t().update($t(r2)).digest(), n3 = t();
  return e.outputLen = n3.outputLen, e.blockLen = n3.blockLen, e.create = () => t(), e;
}
function Lt(t = 32) {
  if (_t && typeof _t.getRandomValues == "function") return _t.getRandomValues(new Uint8Array(t));
  if (_t && typeof _t.randomBytes == "function") return _t.randomBytes(t);
  throw new Error("crypto.getRandomValues must be defined");
}
var tr = [];
var er = [];
var nr = [];
var Mi = BigInt(0);
var Jt = BigInt(1);
var Di = BigInt(2);
var Hi = BigInt(7);
var qi = BigInt(256);
var Ki = BigInt(113);
for (let t = 0, e = Jt, n3 = 1, r2 = 0; t < 24; t++) {
  [n3, r2] = [r2, (2 * n3 + 3 * r2) % 5], tr.push(2 * (5 * r2 + n3)), er.push((t + 1) * (t + 2) / 2 % 64);
  let o2 = Mi;
  for (let i3 = 0; i3 < 7; i3++) e = (e << Jt ^ (e >> Hi) * Ki) % qi, e & Di && (o2 ^= Jt << (Jt << BigInt(i3)) - Jt);
  nr.push(o2);
}
var [Fi, zi] = Ri(nr, true);
var rr = (t, e, n3) => n3 > 32 ? Li(t, e, n3) : _i(t, e, n3);
var or = (t, e, n3) => n3 > 32 ? ji(t, e, n3) : $i(t, e, n3);
function Zi(t, e = 24) {
  const n3 = new Uint32Array(10);
  for (let r2 = 24 - e; r2 < 24; r2++) {
    for (let s = 0; s < 10; s++) n3[s] = t[s] ^ t[s + 10] ^ t[s + 20] ^ t[s + 30] ^ t[s + 40];
    for (let s = 0; s < 10; s += 2) {
      const c3 = (s + 8) % 10, a2 = (s + 2) % 10, u3 = n3[a2], l4 = n3[a2 + 1], f7 = rr(u3, l4, 1) ^ n3[c3], h4 = or(u3, l4, 1) ^ n3[c3 + 1];
      for (let y5 = 0; y5 < 50; y5 += 10) t[s + y5] ^= f7, t[s + y5 + 1] ^= h4;
    }
    let o2 = t[2], i3 = t[3];
    for (let s = 0; s < 24; s++) {
      const c3 = er[s], a2 = rr(o2, i3, c3), u3 = or(o2, i3, c3), l4 = tr[s];
      o2 = t[l4], i3 = t[l4 + 1], t[l4] = a2, t[l4 + 1] = u3;
    }
    for (let s = 0; s < 50; s += 10) {
      for (let c3 = 0; c3 < 10; c3++) n3[c3] = t[s + c3];
      for (let c3 = 0; c3 < 10; c3++) t[s + c3] ^= ~n3[(c3 + 2) % 10] & n3[(c3 + 4) % 10];
    }
    t[0] ^= Fi[r2], t[1] ^= zi[r2];
  }
  n3.fill(0);
}
var En = class _En extends ke {
  constructor(e, n3, r2, o2 = false, i3 = 24) {
    if (super(), this.blockLen = e, this.suffix = n3, this.outputLen = r2, this.enableXOF = o2, this.rounds = i3, this.pos = 0, this.posOut = 0, this.finished = false, this.destroyed = false, Wt(r2), 0 >= this.blockLen || this.blockLen >= 200) throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = Ci(this.state);
  }
  keccak() {
    Xn || Jn(this.state32), Zi(this.state32, this.rounds), Xn || Jn(this.state32), this.posOut = 0, this.pos = 0;
  }
  update(e) {
    Rt(this);
    const { blockLen: n3, state: r2 } = this;
    e = $t(e);
    const o2 = e.length;
    for (let i3 = 0; i3 < o2; ) {
      const s = Math.min(n3 - this.pos, o2 - i3);
      for (let c3 = 0; c3 < s; c3++) r2[this.pos++] ^= e[i3++];
      this.pos === n3 && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished) return;
    this.finished = true;
    const { state: e, suffix: n3, pos: r2, blockLen: o2 } = this;
    e[r2] ^= n3, (n3 & 128) !== 0 && r2 === o2 - 1 && this.keccak(), e[o2 - 1] ^= 128, this.keccak();
  }
  writeInto(e) {
    Rt(this, false), Xt(e), this.finish();
    const n3 = this.state, { blockLen: r2 } = this;
    for (let o2 = 0, i3 = e.length; o2 < i3; ) {
      this.posOut >= r2 && this.keccak();
      const s = Math.min(r2 - this.posOut, i3 - o2);
      e.set(n3.subarray(this.posOut, this.posOut + s), o2), this.posOut += s, o2 += s;
    }
    return e;
  }
  xofInto(e) {
    if (!this.enableXOF) throw new Error("XOF is not possible for this instance");
    return this.writeInto(e);
  }
  xof(e) {
    return Wt(e), this.xofInto(new Uint8Array(e));
  }
  digestInto(e) {
    if (Gn(e, this), this.finished) throw new Error("digest() was already called");
    return this.writeInto(e), this.destroy(), e;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true, this.state.fill(0);
  }
  _cloneInto(e) {
    const { blockLen: n3, suffix: r2, outputLen: o2, rounds: i3, enableXOF: s } = this;
    return e || (e = new _En(n3, r2, o2, s, i3)), e.state32.set(this.state32), e.pos = this.pos, e.posOut = this.posOut, e.finished = this.finished, e.rounds = i3, e.suffix = r2, e.outputLen = o2, e.enableXOF = s, e.destroyed = this.destroyed, e;
  }
};
var Yi = (t, e, n3) => Qn(() => new En(e, t, n3));
var Gi = Yi(1, 136, 256 / 8);
var Wi = "https://rpc.walletconnect.org/v1";
function Ve(t) {
  const e = `Ethereum Signed Message:
${t.length}`, n3 = new TextEncoder().encode(e + t);
  return "0x" + Buffer.from(Gi(n3)).toString("hex");
}
async function ir(t, e, n3, r2, o2, i3) {
  switch (n3.t) {
    case "eip191":
      return await sr(t, e, n3.s);
    case "eip1271":
      return await cr(t, e, n3.s, r2, o2, i3);
    default:
      throw new Error(`verifySignature failed: Attempted to verify CacaoSignature with unknown type: ${n3.t}`);
  }
}
async function sr(t, e, n3) {
  return (await recoverAddress({ hash: Ve(e), signature: n3 })).toLowerCase() === t.toLowerCase();
}
async function cr(t, e, n3, r2, o2, i3) {
  const s = Ne(r2);
  if (!s.namespace || !s.reference) throw new Error(`isValidEip1271Signature failed: chainId must be in CAIP-2 format, received: ${r2}`);
  try {
    const c3 = "0x1626ba7e", a2 = "0000000000000000000000000000000000000000000000000000000000000040", u3 = "0000000000000000000000000000000000000000000000000000000000000041", l4 = n3.substring(2), f7 = Ve(e).substring(2), h4 = c3 + f7 + a2 + u3 + l4, y5 = await fetch(`${i3 || Wi}/?chainId=${r2}&projectId=${o2}`, { method: "POST", body: JSON.stringify({ id: Xi(), jsonrpc: "2.0", method: "eth_call", params: [{ to: t, data: h4 }, "latest"] }) }), { result: E6 } = await y5.json();
    return E6 ? E6.slice(0, c3.length).toLowerCase() === c3.toLowerCase() : false;
  } catch (c3) {
    return console.error("isValidEip1271Signature: ", c3), false;
  }
}
function Xi() {
  return Date.now() + Math.floor(Math.random() * 1e3);
}
function Ji(t) {
  const e = atob(t), n3 = new Uint8Array(e.length);
  for (let s = 0; s < e.length; s++) n3[s] = e.charCodeAt(s);
  const r2 = n3[0];
  if (r2 === 0) throw new Error("No signatures found");
  const o2 = 1 + r2 * 64;
  if (n3.length < o2) throw new Error("Transaction data too short for claimed signature count");
  if (n3.length < 100) throw new Error("Transaction too short");
  const i3 = Buffer.from(t, "base64").slice(1, 65);
  return esm_default.encode(i3);
}
var Qi = Object.defineProperty;
var ts = Object.defineProperties;
var es = Object.getOwnPropertyDescriptors;
var ar = Object.getOwnPropertySymbols;
var ns = Object.prototype.hasOwnProperty;
var rs = Object.prototype.propertyIsEnumerable;
var ur = (t, e, n3) => e in t ? Qi(t, e, { enumerable: true, configurable: true, writable: true, value: n3 }) : t[e] = n3;
var Me = (t, e) => {
  for (var n3 in e || (e = {})) ns.call(e, n3) && ur(t, n3, e[n3]);
  if (ar) for (var n3 of ar(e)) rs.call(e, n3) && ur(t, n3, e[n3]);
  return t;
};
var fr = (t, e) => ts(t, es(e));
var os = "did:pkh:";
var de = (t) => t == null ? void 0 : t.split(":");
var lr = (t) => {
  const e = t && de(t);
  if (e) return t.includes(os) ? e[3] : e[1];
};
var dr = (t) => {
  const e = t && de(t);
  if (e) return e[2] + ":" + e[3];
};
var De = (t) => {
  const e = t && de(t);
  if (e) return e.pop();
};
async function is(t) {
  const { cacao: e, projectId: n3 } = t, { s: r2, p: o2 } = e, i3 = hr(o2, o2.iss), s = De(o2.iss);
  return await ir(s, i3, r2, dr(o2.iss), n3);
}
var hr = (t, e) => {
  const n3 = `${t.domain} wants you to sign in with your Ethereum account:`, r2 = De(e);
  if (!t.aud && !t.uri) throw new Error("Either `aud` or `uri` is required to construct the message");
  let o2 = t.statement || void 0;
  const i3 = `URI: ${t.aud || t.uri}`, s = `Version: ${t.version}`, c3 = `Chain ID: ${lr(e)}`, a2 = `Nonce: ${t.nonce}`, u3 = `Issued At: ${t.iat}`, l4 = t.exp ? `Expiration Time: ${t.exp}` : void 0, f7 = t.nbf ? `Not Before: ${t.nbf}` : void 0, h4 = t.requestId ? `Request ID: ${t.requestId}` : void 0, y5 = t.resources ? `Resources:${t.resources.map((p4) => `
- ${p4}`).join("")}` : void 0, E6 = pe(t.resources);
  if (E6) {
    const p4 = yt(E6);
    o2 = Ke(o2, p4);
  }
  return [n3, r2, "", o2, "", i3, s, c3, a2, u3, l4, f7, h4, y5].filter((p4) => p4 != null).join(`
`);
};
function mr(t) {
  return Buffer.from(JSON.stringify(t)).toString("base64");
}
function wr(t) {
  return JSON.parse(Buffer.from(t, "base64").toString("utf-8"));
}
function at(t) {
  if (!t) throw new Error("No recap provided, value is undefined");
  if (!t.att) throw new Error("No `att` property found");
  const e = Object.keys(t.att);
  if (!(e != null && e.length)) throw new Error("No resources found in `att` property");
  e.forEach((n3) => {
    const r2 = t.att[n3];
    if (Array.isArray(r2)) throw new Error(`Resource must be an object: ${n3}`);
    if (typeof r2 != "object") throw new Error(`Resource must be an object: ${n3}`);
    if (!Object.keys(r2).length) throw new Error(`Resource object is empty: ${n3}`);
    Object.keys(r2).forEach((o2) => {
      const i3 = r2[o2];
      if (!Array.isArray(i3)) throw new Error(`Ability limits ${o2} must be an array of objects, found: ${i3}`);
      if (!i3.length) throw new Error(`Value of ${o2} is empty array, must be an array with objects`);
      i3.forEach((s) => {
        if (typeof s != "object") throw new Error(`Ability limits (${o2}) must be an array of objects, found: ${s}`);
      });
    });
  });
}
function br(t, e, n3, r2 = {}) {
  return n3 == null ? void 0 : n3.sort((o2, i3) => o2.localeCompare(i3)), { att: { [t]: He(e, n3, r2) } };
}
function He(t, e, n3 = {}) {
  e = e == null ? void 0 : e.sort((o2, i3) => o2.localeCompare(i3));
  const r2 = e.map((o2) => ({ [`${t}/${o2}`]: [n3] }));
  return Object.assign({}, ...r2);
}
function he(t) {
  return at(t), `urn:recap:${mr(t).replace(/=/g, "")}`;
}
function yt(t) {
  const e = wr(t.replace("urn:recap:", ""));
  return at(e), e;
}
function fs(t, e, n3) {
  const r2 = br(t, e, n3);
  return he(r2);
}
function qe(t) {
  return t && t.includes("urn:recap:");
}
function ls(t, e) {
  const n3 = yt(t), r2 = yt(e), o2 = vr(n3, r2);
  return he(o2);
}
function vr(t, e) {
  at(t), at(e);
  const n3 = Object.keys(t.att).concat(Object.keys(e.att)).sort((o2, i3) => o2.localeCompare(i3)), r2 = { att: {} };
  return n3.forEach((o2) => {
    var i3, s;
    Object.keys(((i3 = t.att) == null ? void 0 : i3[o2]) || {}).concat(Object.keys(((s = e.att) == null ? void 0 : s[o2]) || {})).sort((c3, a2) => c3.localeCompare(a2)).forEach((c3) => {
      var a2, u3;
      r2.att[o2] = fr(Me({}, r2.att[o2]), { [c3]: ((a2 = t.att[o2]) == null ? void 0 : a2[c3]) || ((u3 = e.att[o2]) == null ? void 0 : u3[c3]) });
    });
  }), r2;
}
function Ke(t = "", e) {
  at(e);
  const n3 = "I further authorize the stated URI to perform the following actions on my behalf: ";
  if (t.includes(n3)) return t;
  const r2 = [];
  let o2 = 0;
  Object.keys(e.att).forEach((c3) => {
    const a2 = Object.keys(e.att[c3]).map((f7) => ({ ability: f7.split("/")[0], action: f7.split("/")[1] }));
    a2.sort((f7, h4) => f7.action.localeCompare(h4.action));
    const u3 = {};
    a2.forEach((f7) => {
      u3[f7.ability] || (u3[f7.ability] = []), u3[f7.ability].push(f7.action);
    });
    const l4 = Object.keys(u3).map((f7) => (o2++, `(${o2}) '${f7}': '${u3[f7].join("', '")}' for '${c3}'.`));
    r2.push(l4.join(", ").replace(".,", "."));
  });
  const i3 = r2.join(" "), s = `${n3}${i3}`;
  return `${t ? t + " " : ""}${s}`;
}
function ds(t) {
  var e;
  const n3 = yt(t);
  at(n3);
  const r2 = (e = n3.att) == null ? void 0 : e.eip155;
  return r2 ? Object.keys(r2).map((o2) => o2.split("/")[1]) : [];
}
function hs(t) {
  const e = yt(t);
  at(e);
  const n3 = [];
  return Object.values(e.att).forEach((r2) => {
    Object.values(r2).forEach((o2) => {
      var i3;
      (i3 = o2 == null ? void 0 : o2[0]) != null && i3.chains && n3.push(o2[0].chains);
    });
  }), [...new Set(n3.flat())];
}
function pe(t) {
  if (!t) return;
  const e = t == null ? void 0 : t[t.length - 1];
  return qe(e) ? e : void 0;
}
function Fe(t) {
  if (!Number.isSafeInteger(t) || t < 0) throw new Error("positive integer expected, got " + t);
}
function Sr(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function tt(t, ...e) {
  if (!Sr(t)) throw new Error("Uint8Array expected");
  if (e.length > 0 && !e.includes(t.length)) throw new Error("Uint8Array expected of length " + e + ", got length=" + t.length);
}
function Or(t, e = true) {
  if (t.destroyed) throw new Error("Hash instance has been destroyed");
  if (e && t.finished) throw new Error("Hash#digest() has already been called");
}
function ps(t, e) {
  tt(t);
  const n3 = e.outputLen;
  if (t.length < n3) throw new Error("digestInto() expects output buffer of length at least " + n3);
}
function Ar(t) {
  if (typeof t != "boolean") throw new Error(`boolean expected, not ${t}`);
}
var mt = (t) => new Uint32Array(t.buffer, t.byteOffset, Math.floor(t.byteLength / 4));
var gs = (t) => new DataView(t.buffer, t.byteOffset, t.byteLength);
var ys = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!ys) throw new Error("Non little-endian hardware is not supported");
function ms(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
function ze(t) {
  if (typeof t == "string") t = ms(t);
  else if (Sr(t)) t = Ze(t);
  else throw new Error("Uint8Array expected, got " + typeof t);
  return t;
}
function ws(t, e) {
  if (e == null || typeof e != "object") throw new Error("options must be defined");
  return Object.assign(t, e);
}
function bs(t, e) {
  if (t.length !== e.length) return false;
  let n3 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n3 |= t[r2] ^ e[r2];
  return n3 === 0;
}
var Es = (t, e) => {
  function n3(r2, ...o2) {
    if (tt(r2), t.nonceLength !== void 0) {
      const l4 = o2[0];
      if (!l4) throw new Error("nonce / iv required");
      t.varSizeNonce ? tt(l4) : tt(l4, t.nonceLength);
    }
    const i3 = t.tagLength;
    i3 && o2[1] !== void 0 && tt(o2[1]);
    const s = e(r2, ...o2), c3 = (l4, f7) => {
      if (f7 !== void 0) {
        if (l4 !== 2) throw new Error("cipher output not supported");
        tt(f7);
      }
    };
    let a2 = false;
    return { encrypt(l4, f7) {
      if (a2) throw new Error("cannot encrypt() twice with same key + nonce");
      return a2 = true, tt(l4), c3(s.encrypt.length, f7), s.encrypt(l4, f7);
    }, decrypt(l4, f7) {
      if (tt(l4), i3 && l4.length < i3) throw new Error("invalid ciphertext length: smaller than tagLength=" + i3);
      return c3(s.decrypt.length, f7), s.decrypt(l4, f7);
    } };
  }
  return Object.assign(n3, t), n3;
};
function Br(t, e, n3 = true) {
  if (e === void 0) return new Uint8Array(t);
  if (e.length !== t) throw new Error("invalid output length, expected " + t + ", got: " + e.length);
  if (n3 && !vs(e)) throw new Error("invalid output, must be aligned");
  return e;
}
function Ir(t, e, n3, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n3, r2);
  const o2 = BigInt(32), i3 = BigInt(4294967295), s = Number(n3 >> o2 & i3), c3 = Number(n3 & i3), a2 = r2 ? 4 : 0, u3 = r2 ? 0 : 4;
  t.setUint32(e + a2, s, r2), t.setUint32(e + u3, c3, r2);
}
function vs(t) {
  return t.byteOffset % 4 === 0;
}
function Ze(t) {
  return Uint8Array.from(t);
}
function jt(...t) {
  for (let e = 0; e < t.length; e++) t[e].fill(0);
}
var Nr = (t) => Uint8Array.from(t.split("").map((e) => e.charCodeAt(0)));
var xs = Nr("expand 16-byte k");
var Ss = Nr("expand 32-byte k");
var Os = mt(xs);
var As = mt(Ss);
function V(t, e) {
  return t << e | t >>> 32 - e;
}
function Ye(t) {
  return t.byteOffset % 4 === 0;
}
var ge = 64;
var Bs = 16;
var Ur = 2 ** 32 - 1;
var Tr = new Uint32Array();
function Is(t, e, n3, r2, o2, i3, s, c3) {
  const a2 = o2.length, u3 = new Uint8Array(ge), l4 = mt(u3), f7 = Ye(o2) && Ye(i3), h4 = f7 ? mt(o2) : Tr, y5 = f7 ? mt(i3) : Tr;
  for (let E6 = 0; E6 < a2; s++) {
    if (t(e, n3, r2, l4, s, c3), s >= Ur) throw new Error("arx: counter overflow");
    const p4 = Math.min(ge, a2 - E6);
    if (f7 && p4 === ge) {
      const d3 = E6 / 4;
      if (E6 % 4 !== 0) throw new Error("arx: invalid block position");
      for (let v5 = 0, m2; v5 < Bs; v5++) m2 = d3 + v5, y5[m2] = h4[m2] ^ l4[v5];
      E6 += ge;
      continue;
    }
    for (let d3 = 0, v5; d3 < p4; d3++) v5 = E6 + d3, i3[v5] = o2[v5] ^ u3[d3];
    E6 += p4;
  }
}
function Ns(t, e) {
  const { allowShortKeys: n3, extendNonceFn: r2, counterLength: o2, counterRight: i3, rounds: s } = ws({ allowShortKeys: false, counterLength: 8, counterRight: false, rounds: 20 }, e);
  if (typeof t != "function") throw new Error("core must be a function");
  return Fe(o2), Fe(s), Ar(i3), Ar(n3), (c3, a2, u3, l4, f7 = 0) => {
    tt(c3), tt(a2), tt(u3);
    const h4 = u3.length;
    if (l4 === void 0 && (l4 = new Uint8Array(h4)), tt(l4), Fe(f7), f7 < 0 || f7 >= Ur) throw new Error("arx: counter overflow");
    if (l4.length < h4) throw new Error(`arx: output (${l4.length}) is shorter than data (${h4})`);
    const y5 = [];
    let E6 = c3.length, p4, d3;
    if (E6 === 32) y5.push(p4 = Ze(c3)), d3 = As;
    else if (E6 === 16 && n3) p4 = new Uint8Array(32), p4.set(c3), p4.set(c3, 16), d3 = Os, y5.push(p4);
    else throw new Error(`arx: invalid 32-byte key, got length=${E6}`);
    Ye(a2) || y5.push(a2 = Ze(a2));
    const v5 = mt(p4);
    if (r2) {
      if (a2.length !== 24) throw new Error("arx: extended nonce must be 24 bytes");
      r2(d3, v5, mt(a2.subarray(0, 16)), v5), a2 = a2.subarray(16);
    }
    const m2 = 16 - o2;
    if (m2 !== a2.length) throw new Error(`arx: nonce must be ${m2} or 16 bytes`);
    if (m2 !== 12) {
      const N3 = new Uint8Array(12);
      N3.set(a2, i3 ? 0 : 12 - a2.length), a2 = N3, y5.push(a2);
    }
    const O4 = mt(a2);
    return Is(t, d3, v5, O4, u3, l4, f7, s), jt(...y5), l4;
  };
}
var F = (t, e) => t[e++] & 255 | (t[e++] & 255) << 8;
var Us = class {
  constructor(e) {
    this.blockLen = 16, this.outputLen = 16, this.buffer = new Uint8Array(16), this.r = new Uint16Array(10), this.h = new Uint16Array(10), this.pad = new Uint16Array(8), this.pos = 0, this.finished = false, e = ze(e), tt(e, 32);
    const n3 = F(e, 0), r2 = F(e, 2), o2 = F(e, 4), i3 = F(e, 6), s = F(e, 8), c3 = F(e, 10), a2 = F(e, 12), u3 = F(e, 14);
    this.r[0] = n3 & 8191, this.r[1] = (n3 >>> 13 | r2 << 3) & 8191, this.r[2] = (r2 >>> 10 | o2 << 6) & 7939, this.r[3] = (o2 >>> 7 | i3 << 9) & 8191, this.r[4] = (i3 >>> 4 | s << 12) & 255, this.r[5] = s >>> 1 & 8190, this.r[6] = (s >>> 14 | c3 << 2) & 8191, this.r[7] = (c3 >>> 11 | a2 << 5) & 8065, this.r[8] = (a2 >>> 8 | u3 << 8) & 8191, this.r[9] = u3 >>> 5 & 127;
    for (let l4 = 0; l4 < 8; l4++) this.pad[l4] = F(e, 16 + 2 * l4);
  }
  process(e, n3, r2 = false) {
    const o2 = r2 ? 0 : 2048, { h: i3, r: s } = this, c3 = s[0], a2 = s[1], u3 = s[2], l4 = s[3], f7 = s[4], h4 = s[5], y5 = s[6], E6 = s[7], p4 = s[8], d3 = s[9], v5 = F(e, n3 + 0), m2 = F(e, n3 + 2), O4 = F(e, n3 + 4), N3 = F(e, n3 + 6), $5 = F(e, n3 + 8), B4 = F(e, n3 + 10), A5 = F(e, n3 + 12), T3 = F(e, n3 + 14);
    let S5 = i3[0] + (v5 & 8191), L4 = i3[1] + ((v5 >>> 13 | m2 << 3) & 8191), U5 = i3[2] + ((m2 >>> 10 | O4 << 6) & 8191), _2 = i3[3] + ((O4 >>> 7 | N3 << 9) & 8191), j3 = i3[4] + ((N3 >>> 4 | $5 << 12) & 8191), g = i3[5] + ($5 >>> 1 & 8191), w3 = i3[6] + (($5 >>> 14 | B4 << 2) & 8191), b5 = i3[7] + ((B4 >>> 11 | A5 << 5) & 8191), I4 = i3[8] + ((A5 >>> 8 | T3 << 8) & 8191), R5 = i3[9] + (T3 >>> 5 | o2), x2 = 0, C6 = x2 + S5 * c3 + L4 * (5 * d3) + U5 * (5 * p4) + _2 * (5 * E6) + j3 * (5 * y5);
    x2 = C6 >>> 13, C6 &= 8191, C6 += g * (5 * h4) + w3 * (5 * f7) + b5 * (5 * l4) + I4 * (5 * u3) + R5 * (5 * a2), x2 += C6 >>> 13, C6 &= 8191;
    let P4 = x2 + S5 * a2 + L4 * c3 + U5 * (5 * d3) + _2 * (5 * p4) + j3 * (5 * E6);
    x2 = P4 >>> 13, P4 &= 8191, P4 += g * (5 * y5) + w3 * (5 * h4) + b5 * (5 * f7) + I4 * (5 * l4) + R5 * (5 * u3), x2 += P4 >>> 13, P4 &= 8191;
    let k6 = x2 + S5 * u3 + L4 * a2 + U5 * c3 + _2 * (5 * d3) + j3 * (5 * p4);
    x2 = k6 >>> 13, k6 &= 8191, k6 += g * (5 * E6) + w3 * (5 * y5) + b5 * (5 * h4) + I4 * (5 * f7) + R5 * (5 * l4), x2 += k6 >>> 13, k6 &= 8191;
    let M5 = x2 + S5 * l4 + L4 * u3 + U5 * a2 + _2 * c3 + j3 * (5 * d3);
    x2 = M5 >>> 13, M5 &= 8191, M5 += g * (5 * p4) + w3 * (5 * E6) + b5 * (5 * y5) + I4 * (5 * h4) + R5 * (5 * f7), x2 += M5 >>> 13, M5 &= 8191;
    let D3 = x2 + S5 * f7 + L4 * l4 + U5 * u3 + _2 * a2 + j3 * c3;
    x2 = D3 >>> 13, D3 &= 8191, D3 += g * (5 * d3) + w3 * (5 * p4) + b5 * (5 * E6) + I4 * (5 * y5) + R5 * (5 * h4), x2 += D3 >>> 13, D3 &= 8191;
    let z3 = x2 + S5 * h4 + L4 * f7 + U5 * l4 + _2 * u3 + j3 * a2;
    x2 = z3 >>> 13, z3 &= 8191, z3 += g * c3 + w3 * (5 * d3) + b5 * (5 * p4) + I4 * (5 * E6) + R5 * (5 * y5), x2 += z3 >>> 13, z3 &= 8191;
    let Z3 = x2 + S5 * y5 + L4 * h4 + U5 * f7 + _2 * l4 + j3 * u3;
    x2 = Z3 >>> 13, Z3 &= 8191, Z3 += g * a2 + w3 * c3 + b5 * (5 * d3) + I4 * (5 * p4) + R5 * (5 * E6), x2 += Z3 >>> 13, Z3 &= 8191;
    let st3 = x2 + S5 * E6 + L4 * y5 + U5 * h4 + _2 * f7 + j3 * l4;
    x2 = st3 >>> 13, st3 &= 8191, st3 += g * u3 + w3 * a2 + b5 * c3 + I4 * (5 * d3) + R5 * (5 * p4), x2 += st3 >>> 13, st3 &= 8191;
    let W4 = x2 + S5 * p4 + L4 * E6 + U5 * y5 + _2 * h4 + j3 * f7;
    x2 = W4 >>> 13, W4 &= 8191, W4 += g * l4 + w3 * u3 + b5 * a2 + I4 * c3 + R5 * (5 * d3), x2 += W4 >>> 13, W4 &= 8191;
    let J4 = x2 + S5 * d3 + L4 * p4 + U5 * E6 + _2 * y5 + j3 * h4;
    x2 = J4 >>> 13, J4 &= 8191, J4 += g * f7 + w3 * l4 + b5 * u3 + I4 * a2 + R5 * c3, x2 += J4 >>> 13, J4 &= 8191, x2 = (x2 << 2) + x2 | 0, x2 = x2 + C6 | 0, C6 = x2 & 8191, x2 = x2 >>> 13, P4 += x2, i3[0] = C6, i3[1] = P4, i3[2] = k6, i3[3] = M5, i3[4] = D3, i3[5] = z3, i3[6] = Z3, i3[7] = st3, i3[8] = W4, i3[9] = J4;
  }
  finalize() {
    const { h: e, pad: n3 } = this, r2 = new Uint16Array(10);
    let o2 = e[1] >>> 13;
    e[1] &= 8191;
    for (let c3 = 2; c3 < 10; c3++) e[c3] += o2, o2 = e[c3] >>> 13, e[c3] &= 8191;
    e[0] += o2 * 5, o2 = e[0] >>> 13, e[0] &= 8191, e[1] += o2, o2 = e[1] >>> 13, e[1] &= 8191, e[2] += o2, r2[0] = e[0] + 5, o2 = r2[0] >>> 13, r2[0] &= 8191;
    for (let c3 = 1; c3 < 10; c3++) r2[c3] = e[c3] + o2, o2 = r2[c3] >>> 13, r2[c3] &= 8191;
    r2[9] -= 8192;
    let i3 = (o2 ^ 1) - 1;
    for (let c3 = 0; c3 < 10; c3++) r2[c3] &= i3;
    i3 = ~i3;
    for (let c3 = 0; c3 < 10; c3++) e[c3] = e[c3] & i3 | r2[c3];
    e[0] = (e[0] | e[1] << 13) & 65535, e[1] = (e[1] >>> 3 | e[2] << 10) & 65535, e[2] = (e[2] >>> 6 | e[3] << 7) & 65535, e[3] = (e[3] >>> 9 | e[4] << 4) & 65535, e[4] = (e[4] >>> 12 | e[5] << 1 | e[6] << 14) & 65535, e[5] = (e[6] >>> 2 | e[7] << 11) & 65535, e[6] = (e[7] >>> 5 | e[8] << 8) & 65535, e[7] = (e[8] >>> 8 | e[9] << 5) & 65535;
    let s = e[0] + n3[0];
    e[0] = s & 65535;
    for (let c3 = 1; c3 < 8; c3++) s = (e[c3] + n3[c3] | 0) + (s >>> 16) | 0, e[c3] = s & 65535;
    jt(r2);
  }
  update(e) {
    Or(this);
    const { buffer: n3, blockLen: r2 } = this;
    e = ze(e);
    const o2 = e.length;
    for (let i3 = 0; i3 < o2; ) {
      const s = Math.min(r2 - this.pos, o2 - i3);
      if (s === r2) {
        for (; r2 <= o2 - i3; i3 += r2) this.process(e, i3);
        continue;
      }
      n3.set(e.subarray(i3, i3 + s), this.pos), this.pos += s, i3 += s, this.pos === r2 && (this.process(n3, 0, false), this.pos = 0);
    }
    return this;
  }
  destroy() {
    jt(this.h, this.r, this.buffer, this.pad);
  }
  digestInto(e) {
    Or(this), ps(e, this), this.finished = true;
    const { buffer: n3, h: r2 } = this;
    let { pos: o2 } = this;
    if (o2) {
      for (n3[o2++] = 1; o2 < 16; o2++) n3[o2] = 0;
      this.process(n3, 0, true);
    }
    this.finalize();
    let i3 = 0;
    for (let s = 0; s < 8; s++) e[i3++] = r2[s] >>> 0, e[i3++] = r2[s] >>> 8;
    return e;
  }
  digest() {
    const { buffer: e, outputLen: n3 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n3);
    return this.destroy(), r2;
  }
};
function Ts(t) {
  const e = (r2, o2) => t(o2).update(ze(r2)).digest(), n3 = t(new Uint8Array(32));
  return e.outputLen = n3.outputLen, e.blockLen = n3.blockLen, e.create = (r2) => t(r2), e;
}
var Rs = Ts((t) => new Us(t));
function _s(t, e, n3, r2, o2, i3 = 20) {
  let s = t[0], c3 = t[1], a2 = t[2], u3 = t[3], l4 = e[0], f7 = e[1], h4 = e[2], y5 = e[3], E6 = e[4], p4 = e[5], d3 = e[6], v5 = e[7], m2 = o2, O4 = n3[0], N3 = n3[1], $5 = n3[2], B4 = s, A5 = c3, T3 = a2, S5 = u3, L4 = l4, U5 = f7, _2 = h4, j3 = y5, g = E6, w3 = p4, b5 = d3, I4 = v5, R5 = m2, x2 = O4, C6 = N3, P4 = $5;
  for (let M5 = 0; M5 < i3; M5 += 2) B4 = B4 + L4 | 0, R5 = V(R5 ^ B4, 16), g = g + R5 | 0, L4 = V(L4 ^ g, 12), B4 = B4 + L4 | 0, R5 = V(R5 ^ B4, 8), g = g + R5 | 0, L4 = V(L4 ^ g, 7), A5 = A5 + U5 | 0, x2 = V(x2 ^ A5, 16), w3 = w3 + x2 | 0, U5 = V(U5 ^ w3, 12), A5 = A5 + U5 | 0, x2 = V(x2 ^ A5, 8), w3 = w3 + x2 | 0, U5 = V(U5 ^ w3, 7), T3 = T3 + _2 | 0, C6 = V(C6 ^ T3, 16), b5 = b5 + C6 | 0, _2 = V(_2 ^ b5, 12), T3 = T3 + _2 | 0, C6 = V(C6 ^ T3, 8), b5 = b5 + C6 | 0, _2 = V(_2 ^ b5, 7), S5 = S5 + j3 | 0, P4 = V(P4 ^ S5, 16), I4 = I4 + P4 | 0, j3 = V(j3 ^ I4, 12), S5 = S5 + j3 | 0, P4 = V(P4 ^ S5, 8), I4 = I4 + P4 | 0, j3 = V(j3 ^ I4, 7), B4 = B4 + U5 | 0, P4 = V(P4 ^ B4, 16), b5 = b5 + P4 | 0, U5 = V(U5 ^ b5, 12), B4 = B4 + U5 | 0, P4 = V(P4 ^ B4, 8), b5 = b5 + P4 | 0, U5 = V(U5 ^ b5, 7), A5 = A5 + _2 | 0, R5 = V(R5 ^ A5, 16), I4 = I4 + R5 | 0, _2 = V(_2 ^ I4, 12), A5 = A5 + _2 | 0, R5 = V(R5 ^ A5, 8), I4 = I4 + R5 | 0, _2 = V(_2 ^ I4, 7), T3 = T3 + j3 | 0, x2 = V(x2 ^ T3, 16), g = g + x2 | 0, j3 = V(j3 ^ g, 12), T3 = T3 + j3 | 0, x2 = V(x2 ^ T3, 8), g = g + x2 | 0, j3 = V(j3 ^ g, 7), S5 = S5 + L4 | 0, C6 = V(C6 ^ S5, 16), w3 = w3 + C6 | 0, L4 = V(L4 ^ w3, 12), S5 = S5 + L4 | 0, C6 = V(C6 ^ S5, 8), w3 = w3 + C6 | 0, L4 = V(L4 ^ w3, 7);
  let k6 = 0;
  r2[k6++] = s + B4 | 0, r2[k6++] = c3 + A5 | 0, r2[k6++] = a2 + T3 | 0, r2[k6++] = u3 + S5 | 0, r2[k6++] = l4 + L4 | 0, r2[k6++] = f7 + U5 | 0, r2[k6++] = h4 + _2 | 0, r2[k6++] = y5 + j3 | 0, r2[k6++] = E6 + g | 0, r2[k6++] = p4 + w3 | 0, r2[k6++] = d3 + b5 | 0, r2[k6++] = v5 + I4 | 0, r2[k6++] = m2 + R5 | 0, r2[k6++] = O4 + x2 | 0, r2[k6++] = N3 + C6 | 0, r2[k6++] = $5 + P4 | 0;
}
var $s = Ns(_s, { counterRight: false, counterLength: 4, allowShortKeys: false });
var Ls = new Uint8Array(16);
var Rr = (t, e) => {
  t.update(e);
  const n3 = e.length % 16;
  n3 && t.update(Ls.subarray(n3));
};
var js = new Uint8Array(32);
function _r(t, e, n3, r2, o2) {
  const i3 = t(e, n3, js), s = Rs.create(i3);
  o2 && Rr(s, o2), Rr(s, r2);
  const c3 = new Uint8Array(16), a2 = gs(c3);
  Ir(a2, 0, BigInt(o2 ? o2.length : 0), true), Ir(a2, 8, BigInt(r2.length), true), s.update(c3);
  const u3 = s.digest();
  return jt(i3, c3), u3;
}
var Cs = (t) => (e, n3, r2) => ({ encrypt(i3, s) {
  const c3 = i3.length;
  s = Br(c3 + 16, s, false), s.set(i3);
  const a2 = s.subarray(0, -16);
  t(e, n3, a2, a2, 1);
  const u3 = _r(t, e, n3, a2, r2);
  return s.set(u3, c3), jt(u3), s;
}, decrypt(i3, s) {
  s = Br(i3.length - 16, s, false);
  const c3 = i3.subarray(0, -16), a2 = i3.subarray(-16), u3 = _r(t, e, n3, c3, r2);
  if (!bs(a2, u3)) throw new Error("invalid tag");
  return s.set(i3.subarray(0, -16)), t(e, n3, s, s, 1), jt(u3), s;
} });
var $r = Es({ blockSize: 64, nonceLength: 12, tagLength: 16 }, Cs($s));
var Lr = class extends ke {
  constructor(e, n3) {
    super(), this.finished = false, this.destroyed = false, Ce(e);
    const r2 = $t(n3);
    if (this.iHash = e.create(), typeof this.iHash.update != "function") throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const o2 = this.blockLen, i3 = new Uint8Array(o2);
    i3.set(r2.length > o2 ? e.create().update(r2).digest() : r2);
    for (let s = 0; s < i3.length; s++) i3[s] ^= 54;
    this.iHash.update(i3), this.oHash = e.create();
    for (let s = 0; s < i3.length; s++) i3[s] ^= 106;
    this.oHash.update(i3), i3.fill(0);
  }
  update(e) {
    return Rt(this), this.iHash.update(e), this;
  }
  digestInto(e) {
    Rt(this), Xt(e, this.outputLen), this.finished = true, this.iHash.digestInto(e), this.oHash.update(e), this.oHash.digestInto(e), this.destroy();
  }
  digest() {
    const e = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(e), e;
  }
  _cloneInto(e) {
    e || (e = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: n3, iHash: r2, finished: o2, destroyed: i3, blockLen: s, outputLen: c3 } = this;
    return e = e, e.finished = o2, e.destroyed = i3, e.blockLen = s, e.outputLen = c3, e.oHash = n3._cloneInto(e.oHash), e.iHash = r2._cloneInto(e.iHash), e;
  }
  destroy() {
    this.destroyed = true, this.oHash.destroy(), this.iHash.destroy();
  }
};
var ye = (t, e, n3) => new Lr(t, e).update(n3).digest();
ye.create = (t, e) => new Lr(t, e);
function Ps(t, e, n3) {
  return Ce(t), n3 === void 0 && (n3 = new Uint8Array(t.outputLen)), ye(t, $t(n3), $t(e));
}
var Ge = new Uint8Array([0]);
var jr = new Uint8Array();
function ks(t, e, n3, r2 = 32) {
  if (Ce(t), Wt(r2), r2 > 255 * t.outputLen) throw new Error("Length should be <= 255*HashLen");
  const o2 = Math.ceil(r2 / t.outputLen);
  n3 === void 0 && (n3 = jr);
  const i3 = new Uint8Array(o2 * t.outputLen), s = ye.create(t, e), c3 = s._cloneInto(), a2 = new Uint8Array(s.outputLen);
  for (let u3 = 0; u3 < o2; u3++) Ge[0] = u3 + 1, c3.update(u3 === 0 ? jr : a2).update(n3).update(Ge).digestInto(a2), i3.set(a2, t.outputLen * u3), s._cloneInto(c3);
  return s.destroy(), c3.destroy(), a2.fill(0), Ge.fill(0), i3.slice(0, r2);
}
var Vs = (t, e, n3, r2, o2) => ks(t, Ps(t, e, n3), r2, o2);
function Ms(t, e, n3, r2) {
  if (typeof t.setBigUint64 == "function") return t.setBigUint64(e, n3, r2);
  const o2 = BigInt(32), i3 = BigInt(4294967295), s = Number(n3 >> o2 & i3), c3 = Number(n3 & i3), a2 = r2 ? 4 : 0, u3 = r2 ? 0 : 4;
  t.setUint32(e + a2, s, r2), t.setUint32(e + u3, c3, r2);
}
function Ds(t, e, n3) {
  return t & e ^ ~t & n3;
}
function Hs(t, e, n3) {
  return t & e ^ t & n3 ^ e & n3;
}
var qs = class extends ke {
  constructor(e, n3, r2, o2) {
    super(), this.blockLen = e, this.outputLen = n3, this.padOffset = r2, this.isLE = o2, this.finished = false, this.length = 0, this.pos = 0, this.destroyed = false, this.buffer = new Uint8Array(e), this.view = Pe(this.buffer);
  }
  update(e) {
    Rt(this);
    const { view: n3, buffer: r2, blockLen: o2 } = this;
    e = $t(e);
    const i3 = e.length;
    for (let s = 0; s < i3; ) {
      const c3 = Math.min(o2 - this.pos, i3 - s);
      if (c3 === o2) {
        const a2 = Pe(e);
        for (; o2 <= i3 - s; s += o2) this.process(a2, s);
        continue;
      }
      r2.set(e.subarray(s, s + c3), this.pos), this.pos += c3, s += c3, this.pos === o2 && (this.process(n3, 0), this.pos = 0);
    }
    return this.length += e.length, this.roundClean(), this;
  }
  digestInto(e) {
    Rt(this), Gn(e, this), this.finished = true;
    const { buffer: n3, view: r2, blockLen: o2, isLE: i3 } = this;
    let { pos: s } = this;
    n3[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > o2 - s && (this.process(r2, 0), s = 0);
    for (let f7 = s; f7 < o2; f7++) n3[f7] = 0;
    Ms(r2, o2 - 8, BigInt(this.length * 8), i3), this.process(r2, 0);
    const c3 = Pe(e), a2 = this.outputLen;
    if (a2 % 4) throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u3 = a2 / 4, l4 = this.get();
    if (u3 > l4.length) throw new Error("_sha2: outputLen bigger than state");
    for (let f7 = 0; f7 < u3; f7++) c3.setUint32(4 * f7, l4[f7], i3);
  }
  digest() {
    const { buffer: e, outputLen: n3 } = this;
    this.digestInto(e);
    const r2 = e.slice(0, n3);
    return this.destroy(), r2;
  }
  _cloneInto(e) {
    e || (e = new this.constructor()), e.set(...this.get());
    const { blockLen: n3, buffer: r2, length: o2, finished: i3, destroyed: s, pos: c3 } = this;
    return e.length = o2, e.pos = c3, e.finished = i3, e.destroyed = s, o2 % n3 && e.buffer.set(r2), e;
  }
};
var Ks = new Uint32Array([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
var wt = new Uint32Array([1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225]);
var bt = new Uint32Array(64);
var Fs = class extends qs {
  constructor() {
    super(64, 32, 8, false), this.A = wt[0] | 0, this.B = wt[1] | 0, this.C = wt[2] | 0, this.D = wt[3] | 0, this.E = wt[4] | 0, this.F = wt[5] | 0, this.G = wt[6] | 0, this.H = wt[7] | 0;
  }
  get() {
    const { A: e, B: n3, C: r2, D: o2, E: i3, F: s, G: c3, H: a2 } = this;
    return [e, n3, r2, o2, i3, s, c3, a2];
  }
  set(e, n3, r2, o2, i3, s, c3, a2) {
    this.A = e | 0, this.B = n3 | 0, this.C = r2 | 0, this.D = o2 | 0, this.E = i3 | 0, this.F = s | 0, this.G = c3 | 0, this.H = a2 | 0;
  }
  process(e, n3) {
    for (let f7 = 0; f7 < 16; f7++, n3 += 4) bt[f7] = e.getUint32(n3, false);
    for (let f7 = 16; f7 < 64; f7++) {
      const h4 = bt[f7 - 15], y5 = bt[f7 - 2], E6 = ct(h4, 7) ^ ct(h4, 18) ^ h4 >>> 3, p4 = ct(y5, 17) ^ ct(y5, 19) ^ y5 >>> 10;
      bt[f7] = p4 + bt[f7 - 7] + E6 + bt[f7 - 16] | 0;
    }
    let { A: r2, B: o2, C: i3, D: s, E: c3, F: a2, G: u3, H: l4 } = this;
    for (let f7 = 0; f7 < 64; f7++) {
      const h4 = ct(c3, 6) ^ ct(c3, 11) ^ ct(c3, 25), y5 = l4 + h4 + Ds(c3, a2, u3) + Ks[f7] + bt[f7] | 0, p4 = (ct(r2, 2) ^ ct(r2, 13) ^ ct(r2, 22)) + Hs(r2, o2, i3) | 0;
      l4 = u3, u3 = a2, a2 = c3, c3 = s + y5 | 0, s = i3, i3 = o2, o2 = r2, r2 = y5 + p4 | 0;
    }
    r2 = r2 + this.A | 0, o2 = o2 + this.B | 0, i3 = i3 + this.C | 0, s = s + this.D | 0, c3 = c3 + this.E | 0, a2 = a2 + this.F | 0, u3 = u3 + this.G | 0, l4 = l4 + this.H | 0, this.set(r2, o2, i3, s, c3, a2, u3, l4);
  }
  roundClean() {
    bt.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
var Qt = Qn(() => new Fs());
var me = BigInt(0);
var we = BigInt(1);
var zs = BigInt(2);
function St(t) {
  return t instanceof Uint8Array || ArrayBuffer.isView(t) && t.constructor.name === "Uint8Array";
}
function te(t) {
  if (!St(t)) throw new Error("Uint8Array expected");
}
function Ct(t, e) {
  if (typeof e != "boolean") throw new Error(t + " boolean expected, got " + e);
}
var Zs = Array.from({ length: 256 }, (t, e) => e.toString(16).padStart(2, "0"));
function Pt(t) {
  te(t);
  let e = "";
  for (let n3 = 0; n3 < t.length; n3++) e += Zs[t[n3]];
  return e;
}
function kt(t) {
  const e = t.toString(16);
  return e.length & 1 ? "0" + e : e;
}
function We(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  return t === "" ? me : BigInt("0x" + t);
}
var ut = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };
function Cr(t) {
  if (t >= ut._0 && t <= ut._9) return t - ut._0;
  if (t >= ut.A && t <= ut.F) return t - (ut.A - 10);
  if (t >= ut.a && t <= ut.f) return t - (ut.a - 10);
}
function Vt(t) {
  if (typeof t != "string") throw new Error("hex string expected, got " + typeof t);
  const e = t.length, n3 = e / 2;
  if (e % 2) throw new Error("hex string expected, got unpadded hex of length " + e);
  const r2 = new Uint8Array(n3);
  for (let o2 = 0, i3 = 0; o2 < n3; o2++, i3 += 2) {
    const s = Cr(t.charCodeAt(i3)), c3 = Cr(t.charCodeAt(i3 + 1));
    if (s === void 0 || c3 === void 0) {
      const a2 = t[i3] + t[i3 + 1];
      throw new Error('hex string expected, got non-hex character "' + a2 + '" at index ' + i3);
    }
    r2[o2] = s * 16 + c3;
  }
  return r2;
}
function Ot(t) {
  return We(Pt(t));
}
function ee(t) {
  return te(t), We(Pt(Uint8Array.from(t).reverse()));
}
function Mt(t, e) {
  return Vt(t.toString(16).padStart(e * 2, "0"));
}
function be(t, e) {
  return Mt(t, e).reverse();
}
function Ys(t) {
  return Vt(kt(t));
}
function et(t, e, n3) {
  let r2;
  if (typeof e == "string") try {
    r2 = Vt(e);
  } catch (i3) {
    throw new Error(t + " must be hex string or Uint8Array, cause: " + i3);
  }
  else if (St(e)) r2 = Uint8Array.from(e);
  else throw new Error(t + " must be hex string or Uint8Array");
  const o2 = r2.length;
  if (typeof n3 == "number" && o2 !== n3) throw new Error(t + " of length " + n3 + " expected, got " + o2);
  return r2;
}
function ne(...t) {
  let e = 0;
  for (let r2 = 0; r2 < t.length; r2++) {
    const o2 = t[r2];
    te(o2), e += o2.length;
  }
  const n3 = new Uint8Array(e);
  for (let r2 = 0, o2 = 0; r2 < t.length; r2++) {
    const i3 = t[r2];
    n3.set(i3, o2), o2 += i3.length;
  }
  return n3;
}
function Gs(t, e) {
  if (t.length !== e.length) return false;
  let n3 = 0;
  for (let r2 = 0; r2 < t.length; r2++) n3 |= t[r2] ^ e[r2];
  return n3 === 0;
}
function Ws(t) {
  if (typeof t != "string") throw new Error("string expected");
  return new Uint8Array(new TextEncoder().encode(t));
}
var Xe = (t) => typeof t == "bigint" && me <= t;
function Ee(t, e, n3) {
  return Xe(t) && Xe(e) && Xe(n3) && e <= t && t < n3;
}
function ft(t, e, n3, r2) {
  if (!Ee(e, n3, r2)) throw new Error("expected valid " + t + ": " + n3 + " <= n < " + r2 + ", got " + e);
}
function Pr(t) {
  let e;
  for (e = 0; t > me; t >>= we, e += 1) ;
  return e;
}
function Xs(t, e) {
  return t >> BigInt(e) & we;
}
function Js(t, e, n3) {
  return t | (n3 ? we : me) << BigInt(e);
}
var Je = (t) => (zs << BigInt(t - 1)) - we;
var Qe2 = (t) => new Uint8Array(t);
var kr = (t) => Uint8Array.from(t);
function Vr(t, e, n3) {
  if (typeof t != "number" || t < 2) throw new Error("hashLen must be a number");
  if (typeof e != "number" || e < 2) throw new Error("qByteLen must be a number");
  if (typeof n3 != "function") throw new Error("hmacFn must be a function");
  let r2 = Qe2(t), o2 = Qe2(t), i3 = 0;
  const s = () => {
    r2.fill(1), o2.fill(0), i3 = 0;
  }, c3 = (...f7) => n3(o2, r2, ...f7), a2 = (f7 = Qe2()) => {
    o2 = c3(kr([0]), f7), r2 = c3(), f7.length !== 0 && (o2 = c3(kr([1]), f7), r2 = c3());
  }, u3 = () => {
    if (i3++ >= 1e3) throw new Error("drbg: tried 1000 values");
    let f7 = 0;
    const h4 = [];
    for (; f7 < e; ) {
      r2 = c3();
      const y5 = r2.slice();
      h4.push(y5), f7 += r2.length;
    }
    return ne(...h4);
  };
  return (f7, h4) => {
    s(), a2(f7);
    let y5;
    for (; !(y5 = h4(u3())); ) a2();
    return s(), y5;
  };
}
var Qs = { bigint: (t) => typeof t == "bigint", function: (t) => typeof t == "function", boolean: (t) => typeof t == "boolean", string: (t) => typeof t == "string", stringOrUint8Array: (t) => typeof t == "string" || St(t), isSafeInteger: (t) => Number.isSafeInteger(t), array: (t) => Array.isArray(t), field: (t, e) => e.Fp.isValid(t), hash: (t) => typeof t == "function" && Number.isSafeInteger(t.outputLen) };
function Dt(t, e, n3 = {}) {
  const r2 = (o2, i3, s) => {
    const c3 = Qs[i3];
    if (typeof c3 != "function") throw new Error("invalid validator function");
    const a2 = t[o2];
    if (!(s && a2 === void 0) && !c3(a2, t)) throw new Error("param " + String(o2) + " is invalid. Expected " + i3 + ", got " + a2);
  };
  for (const [o2, i3] of Object.entries(e)) r2(o2, i3, false);
  for (const [o2, i3] of Object.entries(n3)) r2(o2, i3, true);
  return t;
}
var tc = () => {
  throw new Error("not implemented");
};
function tn(t) {
  const e = /* @__PURE__ */ new WeakMap();
  return (n3, ...r2) => {
    const o2 = e.get(n3);
    if (o2 !== void 0) return o2;
    const i3 = t(n3, ...r2);
    return e.set(n3, i3), i3;
  };
}
var ec = Object.freeze({ __proto__: null, isBytes: St, abytes: te, abool: Ct, bytesToHex: Pt, numberToHexUnpadded: kt, hexToNumber: We, hexToBytes: Vt, bytesToNumberBE: Ot, bytesToNumberLE: ee, numberToBytesBE: Mt, numberToBytesLE: be, numberToVarBytesBE: Ys, ensureBytes: et, concatBytes: ne, equalBytes: Gs, utf8ToBytes: Ws, inRange: Ee, aInRange: ft, bitLen: Pr, bitGet: Xs, bitSet: Js, bitMask: Je, createHmacDrbg: Vr, validateObject: Dt, notImplemented: tc, memoized: tn });
var q = BigInt(0);
var H = BigInt(1);
var At = BigInt(2);
var nc = BigInt(3);
var en = BigInt(4);
var Mr = BigInt(5);
var Dr = BigInt(8);
function X(t, e) {
  const n3 = t % e;
  return n3 >= q ? n3 : e + n3;
}
function Hr(t, e, n3) {
  if (e < q) throw new Error("invalid exponent, negatives unsupported");
  if (n3 <= q) throw new Error("invalid modulus");
  if (n3 === H) return q;
  let r2 = H;
  for (; e > q; ) e & H && (r2 = r2 * t % n3), t = t * t % n3, e >>= H;
  return r2;
}
function it(t, e, n3) {
  let r2 = t;
  for (; e-- > q; ) r2 *= r2, r2 %= n3;
  return r2;
}
function nn(t, e) {
  if (t === q) throw new Error("invert: expected non-zero number");
  if (e <= q) throw new Error("invert: expected positive modulus, got " + e);
  let n3 = X(t, e), r2 = e, o2 = q, i3 = H;
  for (; n3 !== q; ) {
    const c3 = r2 / n3, a2 = r2 % n3, u3 = o2 - i3 * c3;
    r2 = n3, n3 = a2, o2 = i3, i3 = u3;
  }
  if (r2 !== H) throw new Error("invert: does not exist");
  return X(o2, e);
}
function rc(t) {
  const e = (t - H) / At;
  let n3, r2, o2;
  for (n3 = t - H, r2 = 0; n3 % At === q; n3 /= At, r2++) ;
  for (o2 = At; o2 < t && Hr(o2, e, t) !== t - H; o2++) if (o2 > 1e3) throw new Error("Cannot find square root: likely non-prime P");
  if (r2 === 1) {
    const s = (t + H) / en;
    return function(a2, u3) {
      const l4 = a2.pow(u3, s);
      if (!a2.eql(a2.sqr(l4), u3)) throw new Error("Cannot find square root");
      return l4;
    };
  }
  const i3 = (n3 + H) / At;
  return function(c3, a2) {
    if (c3.pow(a2, e) === c3.neg(c3.ONE)) throw new Error("Cannot find square root");
    let u3 = r2, l4 = c3.pow(c3.mul(c3.ONE, o2), n3), f7 = c3.pow(a2, i3), h4 = c3.pow(a2, n3);
    for (; !c3.eql(h4, c3.ONE); ) {
      if (c3.eql(h4, c3.ZERO)) return c3.ZERO;
      let y5 = 1;
      for (let p4 = c3.sqr(h4); y5 < u3 && !c3.eql(p4, c3.ONE); y5++) p4 = c3.sqr(p4);
      const E6 = c3.pow(l4, H << BigInt(u3 - y5 - 1));
      l4 = c3.sqr(E6), f7 = c3.mul(f7, E6), h4 = c3.mul(h4, l4), u3 = y5;
    }
    return f7;
  };
}
function oc(t) {
  if (t % en === nc) {
    const e = (t + H) / en;
    return function(r2, o2) {
      const i3 = r2.pow(o2, e);
      if (!r2.eql(r2.sqr(i3), o2)) throw new Error("Cannot find square root");
      return i3;
    };
  }
  if (t % Dr === Mr) {
    const e = (t - Mr) / Dr;
    return function(r2, o2) {
      const i3 = r2.mul(o2, At), s = r2.pow(i3, e), c3 = r2.mul(o2, s), a2 = r2.mul(r2.mul(c3, At), s), u3 = r2.mul(c3, r2.sub(a2, r2.ONE));
      if (!r2.eql(r2.sqr(u3), o2)) throw new Error("Cannot find square root");
      return u3;
    };
  }
  return rc(t);
}
var ic = ["create", "isValid", "is0", "neg", "inv", "sqrt", "sqr", "eql", "add", "sub", "mul", "pow", "div", "addN", "subN", "mulN", "sqrN"];
function sc(t) {
  const e = { ORDER: "bigint", MASK: "bigint", BYTES: "isSafeInteger", BITS: "isSafeInteger" }, n3 = ic.reduce((r2, o2) => (r2[o2] = "function", r2), e);
  return Dt(t, n3);
}
function cc(t, e, n3) {
  if (n3 < q) throw new Error("invalid exponent, negatives unsupported");
  if (n3 === q) return t.ONE;
  if (n3 === H) return e;
  let r2 = t.ONE, o2 = e;
  for (; n3 > q; ) n3 & H && (r2 = t.mul(r2, o2)), o2 = t.sqr(o2), n3 >>= H;
  return r2;
}
function ac(t, e) {
  const n3 = new Array(e.length), r2 = e.reduce((i3, s, c3) => t.is0(s) ? i3 : (n3[c3] = i3, t.mul(i3, s)), t.ONE), o2 = t.inv(r2);
  return e.reduceRight((i3, s, c3) => t.is0(s) ? i3 : (n3[c3] = t.mul(i3, n3[c3]), t.mul(i3, s)), o2), n3;
}
function qr(t, e) {
  const n3 = e !== void 0 ? e : t.toString(2).length, r2 = Math.ceil(n3 / 8);
  return { nBitLength: n3, nByteLength: r2 };
}
function Kr2(t, e, n3 = false, r2 = {}) {
  if (t <= q) throw new Error("invalid field: expected ORDER > 0, got " + t);
  const { nBitLength: o2, nByteLength: i3 } = qr(t, e);
  if (i3 > 2048) throw new Error("invalid field: expected ORDER of <= 2048 bytes");
  let s;
  const c3 = Object.freeze({ ORDER: t, isLE: n3, BITS: o2, BYTES: i3, MASK: Je(o2), ZERO: q, ONE: H, create: (a2) => X(a2, t), isValid: (a2) => {
    if (typeof a2 != "bigint") throw new Error("invalid field element: expected bigint, got " + typeof a2);
    return q <= a2 && a2 < t;
  }, is0: (a2) => a2 === q, isOdd: (a2) => (a2 & H) === H, neg: (a2) => X(-a2, t), eql: (a2, u3) => a2 === u3, sqr: (a2) => X(a2 * a2, t), add: (a2, u3) => X(a2 + u3, t), sub: (a2, u3) => X(a2 - u3, t), mul: (a2, u3) => X(a2 * u3, t), pow: (a2, u3) => cc(c3, a2, u3), div: (a2, u3) => X(a2 * nn(u3, t), t), sqrN: (a2) => a2 * a2, addN: (a2, u3) => a2 + u3, subN: (a2, u3) => a2 - u3, mulN: (a2, u3) => a2 * u3, inv: (a2) => nn(a2, t), sqrt: r2.sqrt || ((a2) => (s || (s = oc(t)), s(c3, a2))), invertBatch: (a2) => ac(c3, a2), cmov: (a2, u3, l4) => l4 ? u3 : a2, toBytes: (a2) => n3 ? be(a2, i3) : Mt(a2, i3), fromBytes: (a2) => {
    if (a2.length !== i3) throw new Error("Field.fromBytes: expected " + i3 + " bytes, got " + a2.length);
    return n3 ? ee(a2) : Ot(a2);
  } });
  return Object.freeze(c3);
}
function Fr(t) {
  if (typeof t != "bigint") throw new Error("field order must be bigint");
  const e = t.toString(2).length;
  return Math.ceil(e / 8);
}
function zr(t) {
  const e = Fr(t);
  return e + Math.ceil(e / 2);
}
function uc(t, e, n3 = false) {
  const r2 = t.length, o2 = Fr(e), i3 = zr(e);
  if (r2 < 16 || r2 < i3 || r2 > 1024) throw new Error("expected " + i3 + "-1024 bytes of input, got " + r2);
  const s = n3 ? ee(t) : Ot(t), c3 = X(s, e - H) + H;
  return n3 ? be(c3, o2) : Mt(c3, o2);
}
var Zr = BigInt(0);
var ve = BigInt(1);
function rn(t, e) {
  const n3 = e.negate();
  return t ? n3 : e;
}
function Yr(t, e) {
  if (!Number.isSafeInteger(t) || t <= 0 || t > e) throw new Error("invalid window size, expected [1.." + e + "], got W=" + t);
}
function on(t, e) {
  Yr(t, e);
  const n3 = Math.ceil(e / t) + 1, r2 = 2 ** (t - 1);
  return { windows: n3, windowSize: r2 };
}
function fc(t, e) {
  if (!Array.isArray(t)) throw new Error("array expected");
  t.forEach((n3, r2) => {
    if (!(n3 instanceof e)) throw new Error("invalid point at index " + r2);
  });
}
function lc(t, e) {
  if (!Array.isArray(t)) throw new Error("array of scalars expected");
  t.forEach((n3, r2) => {
    if (!e.isValid(n3)) throw new Error("invalid scalar at index " + r2);
  });
}
var sn2 = /* @__PURE__ */ new WeakMap();
var Gr = /* @__PURE__ */ new WeakMap();
function cn(t) {
  return Gr.get(t) || 1;
}
function dc(t, e) {
  return { constTimeNegate: rn, hasPrecomputes(n3) {
    return cn(n3) !== 1;
  }, unsafeLadder(n3, r2, o2 = t.ZERO) {
    let i3 = n3;
    for (; r2 > Zr; ) r2 & ve && (o2 = o2.add(i3)), i3 = i3.double(), r2 >>= ve;
    return o2;
  }, precomputeWindow(n3, r2) {
    const { windows: o2, windowSize: i3 } = on(r2, e), s = [];
    let c3 = n3, a2 = c3;
    for (let u3 = 0; u3 < o2; u3++) {
      a2 = c3, s.push(a2);
      for (let l4 = 1; l4 < i3; l4++) a2 = a2.add(c3), s.push(a2);
      c3 = a2.double();
    }
    return s;
  }, wNAF(n3, r2, o2) {
    const { windows: i3, windowSize: s } = on(n3, e);
    let c3 = t.ZERO, a2 = t.BASE;
    const u3 = BigInt(2 ** n3 - 1), l4 = 2 ** n3, f7 = BigInt(n3);
    for (let h4 = 0; h4 < i3; h4++) {
      const y5 = h4 * s;
      let E6 = Number(o2 & u3);
      o2 >>= f7, E6 > s && (E6 -= l4, o2 += ve);
      const p4 = y5, d3 = y5 + Math.abs(E6) - 1, v5 = h4 % 2 !== 0, m2 = E6 < 0;
      E6 === 0 ? a2 = a2.add(rn(v5, r2[p4])) : c3 = c3.add(rn(m2, r2[d3]));
    }
    return { p: c3, f: a2 };
  }, wNAFUnsafe(n3, r2, o2, i3 = t.ZERO) {
    const { windows: s, windowSize: c3 } = on(n3, e), a2 = BigInt(2 ** n3 - 1), u3 = 2 ** n3, l4 = BigInt(n3);
    for (let f7 = 0; f7 < s; f7++) {
      const h4 = f7 * c3;
      if (o2 === Zr) break;
      let y5 = Number(o2 & a2);
      if (o2 >>= l4, y5 > c3 && (y5 -= u3, o2 += ve), y5 === 0) continue;
      let E6 = r2[h4 + Math.abs(y5) - 1];
      y5 < 0 && (E6 = E6.negate()), i3 = i3.add(E6);
    }
    return i3;
  }, getPrecomputes(n3, r2, o2) {
    let i3 = sn2.get(r2);
    return i3 || (i3 = this.precomputeWindow(r2, n3), n3 !== 1 && sn2.set(r2, o2(i3))), i3;
  }, wNAFCached(n3, r2, o2) {
    const i3 = cn(n3);
    return this.wNAF(i3, this.getPrecomputes(i3, n3, o2), r2);
  }, wNAFCachedUnsafe(n3, r2, o2, i3) {
    const s = cn(n3);
    return s === 1 ? this.unsafeLadder(n3, r2, i3) : this.wNAFUnsafe(s, this.getPrecomputes(s, n3, o2), r2, i3);
  }, setWindowSize(n3, r2) {
    Yr(r2, e), Gr.set(n3, r2), sn2.delete(n3);
  } };
}
function hc(t, e, n3, r2) {
  if (fc(n3, t), lc(r2, e), n3.length !== r2.length) throw new Error("arrays of points and scalars must have equal length");
  const o2 = t.ZERO, i3 = Pr(BigInt(n3.length)), s = i3 > 12 ? i3 - 3 : i3 > 4 ? i3 - 2 : i3 ? 2 : 1, c3 = (1 << s) - 1, a2 = new Array(c3 + 1).fill(o2), u3 = Math.floor((e.BITS - 1) / s) * s;
  let l4 = o2;
  for (let f7 = u3; f7 >= 0; f7 -= s) {
    a2.fill(o2);
    for (let y5 = 0; y5 < r2.length; y5++) {
      const E6 = r2[y5], p4 = Number(E6 >> BigInt(f7) & BigInt(c3));
      a2[p4] = a2[p4].add(n3[y5]);
    }
    let h4 = o2;
    for (let y5 = a2.length - 1, E6 = o2; y5 > 0; y5--) E6 = E6.add(a2[y5]), h4 = h4.add(E6);
    if (l4 = l4.add(h4), f7 !== 0) for (let y5 = 0; y5 < s; y5++) l4 = l4.double();
  }
  return l4;
}
function Wr(t) {
  return sc(t.Fp), Dt(t, { n: "bigint", h: "bigint", Gx: "field", Gy: "field" }, { nBitLength: "isSafeInteger", nByteLength: "isSafeInteger" }), Object.freeze({ ...qr(t.n, t.nBitLength), ...t, p: t.Fp.ORDER });
}
BigInt(0), BigInt(1), BigInt(2), BigInt(8);
var Ht = BigInt(0);
var an = BigInt(1);
function pc(t) {
  return Dt(t, { a: "bigint" }, { montgomeryBits: "isSafeInteger", nByteLength: "isSafeInteger", adjustScalarBytes: "function", domain: "function", powPminus2: "function", Gu: "bigint" }), Object.freeze({ ...t });
}
function gc(t) {
  const e = pc(t), { P: n3 } = e, r2 = (m2) => X(m2, n3), o2 = e.montgomeryBits, i3 = Math.ceil(o2 / 8), s = e.nByteLength, c3 = e.adjustScalarBytes || ((m2) => m2), a2 = e.powPminus2 || ((m2) => Hr(m2, n3 - BigInt(2), n3));
  function u3(m2, O4, N3) {
    const $5 = r2(m2 * (O4 - N3));
    return O4 = r2(O4 - $5), N3 = r2(N3 + $5), [O4, N3];
  }
  const l4 = (e.a - BigInt(2)) / BigInt(4);
  function f7(m2, O4) {
    ft("u", m2, Ht, n3), ft("scalar", O4, Ht, n3);
    const N3 = O4, $5 = m2;
    let B4 = an, A5 = Ht, T3 = m2, S5 = an, L4 = Ht, U5;
    for (let j3 = BigInt(o2 - 1); j3 >= Ht; j3--) {
      const g = N3 >> j3 & an;
      L4 ^= g, U5 = u3(L4, B4, T3), B4 = U5[0], T3 = U5[1], U5 = u3(L4, A5, S5), A5 = U5[0], S5 = U5[1], L4 = g;
      const w3 = B4 + A5, b5 = r2(w3 * w3), I4 = B4 - A5, R5 = r2(I4 * I4), x2 = b5 - R5, C6 = T3 + S5, P4 = T3 - S5, k6 = r2(P4 * w3), M5 = r2(C6 * I4), D3 = k6 + M5, z3 = k6 - M5;
      T3 = r2(D3 * D3), S5 = r2($5 * r2(z3 * z3)), B4 = r2(b5 * R5), A5 = r2(x2 * (b5 + r2(l4 * x2)));
    }
    U5 = u3(L4, B4, T3), B4 = U5[0], T3 = U5[1], U5 = u3(L4, A5, S5), A5 = U5[0], S5 = U5[1];
    const _2 = a2(A5);
    return r2(B4 * _2);
  }
  function h4(m2) {
    return be(r2(m2), i3);
  }
  function y5(m2) {
    const O4 = et("u coordinate", m2, i3);
    return s === 32 && (O4[31] &= 127), ee(O4);
  }
  function E6(m2) {
    const O4 = et("scalar", m2), N3 = O4.length;
    if (N3 !== i3 && N3 !== s) {
      let $5 = "" + i3 + " or " + s;
      throw new Error("invalid scalar, expected " + $5 + " bytes, got " + N3);
    }
    return ee(c3(O4));
  }
  function p4(m2, O4) {
    const N3 = y5(O4), $5 = E6(m2), B4 = f7(N3, $5);
    if (B4 === Ht) throw new Error("invalid private or public key received");
    return h4(B4);
  }
  const d3 = h4(e.Gu);
  function v5(m2) {
    return p4(m2, d3);
  }
  return { scalarMult: p4, scalarMultBase: v5, getSharedSecret: (m2, O4) => p4(m2, O4), getPublicKey: (m2) => v5(m2), utils: { randomPrivateKey: () => e.randomBytes(e.nByteLength) }, GuBytes: d3 };
}
var un = BigInt("57896044618658097711785492504343953926634992332820282019728792003956564819949");
BigInt(0);
var yc = BigInt(1);
var Xr = BigInt(2);
var mc = BigInt(3);
var wc = BigInt(5);
BigInt(8);
function bc(t) {
  const e = BigInt(10), n3 = BigInt(20), r2 = BigInt(40), o2 = BigInt(80), i3 = un, c3 = t * t % i3 * t % i3, a2 = it(c3, Xr, i3) * c3 % i3, u3 = it(a2, yc, i3) * t % i3, l4 = it(u3, wc, i3) * u3 % i3, f7 = it(l4, e, i3) * l4 % i3, h4 = it(f7, n3, i3) * f7 % i3, y5 = it(h4, r2, i3) * h4 % i3, E6 = it(y5, o2, i3) * y5 % i3, p4 = it(E6, o2, i3) * y5 % i3, d3 = it(p4, e, i3) * l4 % i3;
  return { pow_p_5_8: it(d3, Xr, i3) * t % i3, b2: c3 };
}
function Ec(t) {
  return t[0] &= 248, t[31] &= 127, t[31] |= 64, t;
}
var fn = gc({ P: un, a: BigInt(486662), montgomeryBits: 255, nByteLength: 32, Gu: BigInt(9), powPminus2: (t) => {
  const e = un, { pow_p_5_8: n3, b2: r2 } = bc(t);
  return X(it(n3, mc, e) * r2, e);
}, adjustScalarBytes: Ec, randomBytes: Lt });
function Jr(t) {
  t.lowS !== void 0 && Ct("lowS", t.lowS), t.prehash !== void 0 && Ct("prehash", t.prehash);
}
function vc(t) {
  const e = Wr(t);
  Dt(e, { a: "field", b: "field" }, { allowedPrivateKeyLengths: "array", wrapPrivateKey: "boolean", isTorsionFree: "function", clearCofactor: "function", allowInfinityPoint: "boolean", fromBytes: "function", toBytes: "function" });
  const { endo: n3, Fp: r2, a: o2 } = e;
  if (n3) {
    if (!r2.eql(o2, r2.ZERO)) throw new Error("invalid endomorphism, can only be defined for Koblitz curves that have a=0");
    if (typeof n3 != "object" || typeof n3.beta != "bigint" || typeof n3.splitScalar != "function") throw new Error("invalid endomorphism, expected beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...e });
}
var { bytesToNumberBE: xc, hexToBytes: Sc } = ec;
var Oc = class extends Error {
  constructor(e = "") {
    super(e);
  }
};
var lt = { Err: Oc, _tlv: { encode: (t, e) => {
  const { Err: n3 } = lt;
  if (t < 0 || t > 256) throw new n3("tlv.encode: wrong tag");
  if (e.length & 1) throw new n3("tlv.encode: unpadded data");
  const r2 = e.length / 2, o2 = kt(r2);
  if (o2.length / 2 & 128) throw new n3("tlv.encode: long form length too big");
  const i3 = r2 > 127 ? kt(o2.length / 2 | 128) : "";
  return kt(t) + i3 + o2 + e;
}, decode(t, e) {
  const { Err: n3 } = lt;
  let r2 = 0;
  if (t < 0 || t > 256) throw new n3("tlv.encode: wrong tag");
  if (e.length < 2 || e[r2++] !== t) throw new n3("tlv.decode: wrong tlv");
  const o2 = e[r2++], i3 = !!(o2 & 128);
  let s = 0;
  if (!i3) s = o2;
  else {
    const a2 = o2 & 127;
    if (!a2) throw new n3("tlv.decode(long): indefinite length not supported");
    if (a2 > 4) throw new n3("tlv.decode(long): byte length is too big");
    const u3 = e.subarray(r2, r2 + a2);
    if (u3.length !== a2) throw new n3("tlv.decode: length bytes not complete");
    if (u3[0] === 0) throw new n3("tlv.decode(long): zero leftmost byte");
    for (const l4 of u3) s = s << 8 | l4;
    if (r2 += a2, s < 128) throw new n3("tlv.decode(long): not minimal encoding");
  }
  const c3 = e.subarray(r2, r2 + s);
  if (c3.length !== s) throw new n3("tlv.decode: wrong value length");
  return { v: c3, l: e.subarray(r2 + s) };
} }, _int: { encode(t) {
  const { Err: e } = lt;
  if (t < dt) throw new e("integer: negative integers are not allowed");
  let n3 = kt(t);
  if (Number.parseInt(n3[0], 16) & 8 && (n3 = "00" + n3), n3.length & 1) throw new e("unexpected DER parsing assertion: unpadded hex");
  return n3;
}, decode(t) {
  const { Err: e } = lt;
  if (t[0] & 128) throw new e("invalid signature integer: negative");
  if (t[0] === 0 && !(t[1] & 128)) throw new e("invalid signature integer: unnecessary leading zero");
  return xc(t);
} }, toSig(t) {
  const { Err: e, _int: n3, _tlv: r2 } = lt, o2 = typeof t == "string" ? Sc(t) : t;
  te(o2);
  const { v: i3, l: s } = r2.decode(48, o2);
  if (s.length) throw new e("invalid signature: left bytes after parsing");
  const { v: c3, l: a2 } = r2.decode(2, i3), { v: u3, l: l4 } = r2.decode(2, a2);
  if (l4.length) throw new e("invalid signature: left bytes after parsing");
  return { r: n3.decode(c3), s: n3.decode(u3) };
}, hexFromSig(t) {
  const { _tlv: e, _int: n3 } = lt, r2 = e.encode(2, n3.encode(t.r)), o2 = e.encode(2, n3.encode(t.s)), i3 = r2 + o2;
  return e.encode(48, i3);
} };
var dt = BigInt(0);
var K2 = BigInt(1);
BigInt(2);
var Qr = BigInt(3);
BigInt(4);
function Ac(t) {
  const e = vc(t), { Fp: n3 } = e, r2 = Kr2(e.n, e.nBitLength), o2 = e.toBytes || ((p4, d3, v5) => {
    const m2 = d3.toAffine();
    return ne(Uint8Array.from([4]), n3.toBytes(m2.x), n3.toBytes(m2.y));
  }), i3 = e.fromBytes || ((p4) => {
    const d3 = p4.subarray(1), v5 = n3.fromBytes(d3.subarray(0, n3.BYTES)), m2 = n3.fromBytes(d3.subarray(n3.BYTES, 2 * n3.BYTES));
    return { x: v5, y: m2 };
  });
  function s(p4) {
    const { a: d3, b: v5 } = e, m2 = n3.sqr(p4), O4 = n3.mul(m2, p4);
    return n3.add(n3.add(O4, n3.mul(p4, d3)), v5);
  }
  if (!n3.eql(n3.sqr(e.Gy), s(e.Gx))) throw new Error("bad generator point: equation left != right");
  function c3(p4) {
    return Ee(p4, K2, e.n);
  }
  function a2(p4) {
    const { allowedPrivateKeyLengths: d3, nByteLength: v5, wrapPrivateKey: m2, n: O4 } = e;
    if (d3 && typeof p4 != "bigint") {
      if (St(p4) && (p4 = Pt(p4)), typeof p4 != "string" || !d3.includes(p4.length)) throw new Error("invalid private key");
      p4 = p4.padStart(v5 * 2, "0");
    }
    let N3;
    try {
      N3 = typeof p4 == "bigint" ? p4 : Ot(et("private key", p4, v5));
    } catch {
      throw new Error("invalid private key, expected hex or " + v5 + " bytes, got " + typeof p4);
    }
    return m2 && (N3 = X(N3, O4)), ft("private key", N3, K2, O4), N3;
  }
  function u3(p4) {
    if (!(p4 instanceof h4)) throw new Error("ProjectivePoint expected");
  }
  const l4 = tn((p4, d3) => {
    const { px: v5, py: m2, pz: O4 } = p4;
    if (n3.eql(O4, n3.ONE)) return { x: v5, y: m2 };
    const N3 = p4.is0();
    d3 == null && (d3 = N3 ? n3.ONE : n3.inv(O4));
    const $5 = n3.mul(v5, d3), B4 = n3.mul(m2, d3), A5 = n3.mul(O4, d3);
    if (N3) return { x: n3.ZERO, y: n3.ZERO };
    if (!n3.eql(A5, n3.ONE)) throw new Error("invZ was invalid");
    return { x: $5, y: B4 };
  }), f7 = tn((p4) => {
    if (p4.is0()) {
      if (e.allowInfinityPoint && !n3.is0(p4.py)) return;
      throw new Error("bad point: ZERO");
    }
    const { x: d3, y: v5 } = p4.toAffine();
    if (!n3.isValid(d3) || !n3.isValid(v5)) throw new Error("bad point: x or y not FE");
    const m2 = n3.sqr(v5), O4 = s(d3);
    if (!n3.eql(m2, O4)) throw new Error("bad point: equation left != right");
    if (!p4.isTorsionFree()) throw new Error("bad point: not in prime-order subgroup");
    return true;
  });
  class h4 {
    constructor(d3, v5, m2) {
      if (this.px = d3, this.py = v5, this.pz = m2, d3 == null || !n3.isValid(d3)) throw new Error("x required");
      if (v5 == null || !n3.isValid(v5)) throw new Error("y required");
      if (m2 == null || !n3.isValid(m2)) throw new Error("z required");
      Object.freeze(this);
    }
    static fromAffine(d3) {
      const { x: v5, y: m2 } = d3 || {};
      if (!d3 || !n3.isValid(v5) || !n3.isValid(m2)) throw new Error("invalid affine point");
      if (d3 instanceof h4) throw new Error("projective point not allowed");
      const O4 = (N3) => n3.eql(N3, n3.ZERO);
      return O4(v5) && O4(m2) ? h4.ZERO : new h4(v5, m2, n3.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    static normalizeZ(d3) {
      const v5 = n3.invertBatch(d3.map((m2) => m2.pz));
      return d3.map((m2, O4) => m2.toAffine(v5[O4])).map(h4.fromAffine);
    }
    static fromHex(d3) {
      const v5 = h4.fromAffine(i3(et("pointHex", d3)));
      return v5.assertValidity(), v5;
    }
    static fromPrivateKey(d3) {
      return h4.BASE.multiply(a2(d3));
    }
    static msm(d3, v5) {
      return hc(h4, r2, d3, v5);
    }
    _setWindowSize(d3) {
      E6.setWindowSize(this, d3);
    }
    assertValidity() {
      f7(this);
    }
    hasEvenY() {
      const { y: d3 } = this.toAffine();
      if (n3.isOdd) return !n3.isOdd(d3);
      throw new Error("Field doesn't support isOdd");
    }
    equals(d3) {
      u3(d3);
      const { px: v5, py: m2, pz: O4 } = this, { px: N3, py: $5, pz: B4 } = d3, A5 = n3.eql(n3.mul(v5, B4), n3.mul(N3, O4)), T3 = n3.eql(n3.mul(m2, B4), n3.mul($5, O4));
      return A5 && T3;
    }
    negate() {
      return new h4(this.px, n3.neg(this.py), this.pz);
    }
    double() {
      const { a: d3, b: v5 } = e, m2 = n3.mul(v5, Qr), { px: O4, py: N3, pz: $5 } = this;
      let B4 = n3.ZERO, A5 = n3.ZERO, T3 = n3.ZERO, S5 = n3.mul(O4, O4), L4 = n3.mul(N3, N3), U5 = n3.mul($5, $5), _2 = n3.mul(O4, N3);
      return _2 = n3.add(_2, _2), T3 = n3.mul(O4, $5), T3 = n3.add(T3, T3), B4 = n3.mul(d3, T3), A5 = n3.mul(m2, U5), A5 = n3.add(B4, A5), B4 = n3.sub(L4, A5), A5 = n3.add(L4, A5), A5 = n3.mul(B4, A5), B4 = n3.mul(_2, B4), T3 = n3.mul(m2, T3), U5 = n3.mul(d3, U5), _2 = n3.sub(S5, U5), _2 = n3.mul(d3, _2), _2 = n3.add(_2, T3), T3 = n3.add(S5, S5), S5 = n3.add(T3, S5), S5 = n3.add(S5, U5), S5 = n3.mul(S5, _2), A5 = n3.add(A5, S5), U5 = n3.mul(N3, $5), U5 = n3.add(U5, U5), S5 = n3.mul(U5, _2), B4 = n3.sub(B4, S5), T3 = n3.mul(U5, L4), T3 = n3.add(T3, T3), T3 = n3.add(T3, T3), new h4(B4, A5, T3);
    }
    add(d3) {
      u3(d3);
      const { px: v5, py: m2, pz: O4 } = this, { px: N3, py: $5, pz: B4 } = d3;
      let A5 = n3.ZERO, T3 = n3.ZERO, S5 = n3.ZERO;
      const L4 = e.a, U5 = n3.mul(e.b, Qr);
      let _2 = n3.mul(v5, N3), j3 = n3.mul(m2, $5), g = n3.mul(O4, B4), w3 = n3.add(v5, m2), b5 = n3.add(N3, $5);
      w3 = n3.mul(w3, b5), b5 = n3.add(_2, j3), w3 = n3.sub(w3, b5), b5 = n3.add(v5, O4);
      let I4 = n3.add(N3, B4);
      return b5 = n3.mul(b5, I4), I4 = n3.add(_2, g), b5 = n3.sub(b5, I4), I4 = n3.add(m2, O4), A5 = n3.add($5, B4), I4 = n3.mul(I4, A5), A5 = n3.add(j3, g), I4 = n3.sub(I4, A5), S5 = n3.mul(L4, b5), A5 = n3.mul(U5, g), S5 = n3.add(A5, S5), A5 = n3.sub(j3, S5), S5 = n3.add(j3, S5), T3 = n3.mul(A5, S5), j3 = n3.add(_2, _2), j3 = n3.add(j3, _2), g = n3.mul(L4, g), b5 = n3.mul(U5, b5), j3 = n3.add(j3, g), g = n3.sub(_2, g), g = n3.mul(L4, g), b5 = n3.add(b5, g), _2 = n3.mul(j3, b5), T3 = n3.add(T3, _2), _2 = n3.mul(I4, b5), A5 = n3.mul(w3, A5), A5 = n3.sub(A5, _2), _2 = n3.mul(w3, j3), S5 = n3.mul(I4, S5), S5 = n3.add(S5, _2), new h4(A5, T3, S5);
    }
    subtract(d3) {
      return this.add(d3.negate());
    }
    is0() {
      return this.equals(h4.ZERO);
    }
    wNAF(d3) {
      return E6.wNAFCached(this, d3, h4.normalizeZ);
    }
    multiplyUnsafe(d3) {
      const { endo: v5, n: m2 } = e;
      ft("scalar", d3, dt, m2);
      const O4 = h4.ZERO;
      if (d3 === dt) return O4;
      if (this.is0() || d3 === K2) return this;
      if (!v5 || E6.hasPrecomputes(this)) return E6.wNAFCachedUnsafe(this, d3, h4.normalizeZ);
      let { k1neg: N3, k1: $5, k2neg: B4, k2: A5 } = v5.splitScalar(d3), T3 = O4, S5 = O4, L4 = this;
      for (; $5 > dt || A5 > dt; ) $5 & K2 && (T3 = T3.add(L4)), A5 & K2 && (S5 = S5.add(L4)), L4 = L4.double(), $5 >>= K2, A5 >>= K2;
      return N3 && (T3 = T3.negate()), B4 && (S5 = S5.negate()), S5 = new h4(n3.mul(S5.px, v5.beta), S5.py, S5.pz), T3.add(S5);
    }
    multiply(d3) {
      const { endo: v5, n: m2 } = e;
      ft("scalar", d3, K2, m2);
      let O4, N3;
      if (v5) {
        const { k1neg: $5, k1: B4, k2neg: A5, k2: T3 } = v5.splitScalar(d3);
        let { p: S5, f: L4 } = this.wNAF(B4), { p: U5, f: _2 } = this.wNAF(T3);
        S5 = E6.constTimeNegate($5, S5), U5 = E6.constTimeNegate(A5, U5), U5 = new h4(n3.mul(U5.px, v5.beta), U5.py, U5.pz), O4 = S5.add(U5), N3 = L4.add(_2);
      } else {
        const { p: $5, f: B4 } = this.wNAF(d3);
        O4 = $5, N3 = B4;
      }
      return h4.normalizeZ([O4, N3])[0];
    }
    multiplyAndAddUnsafe(d3, v5, m2) {
      const O4 = h4.BASE, N3 = (B4, A5) => A5 === dt || A5 === K2 || !B4.equals(O4) ? B4.multiplyUnsafe(A5) : B4.multiply(A5), $5 = N3(this, v5).add(N3(d3, m2));
      return $5.is0() ? void 0 : $5;
    }
    toAffine(d3) {
      return l4(this, d3);
    }
    isTorsionFree() {
      const { h: d3, isTorsionFree: v5 } = e;
      if (d3 === K2) return true;
      if (v5) return v5(h4, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: d3, clearCofactor: v5 } = e;
      return d3 === K2 ? this : v5 ? v5(h4, this) : this.multiplyUnsafe(e.h);
    }
    toRawBytes(d3 = true) {
      return Ct("isCompressed", d3), this.assertValidity(), o2(h4, this, d3);
    }
    toHex(d3 = true) {
      return Ct("isCompressed", d3), Pt(this.toRawBytes(d3));
    }
  }
  h4.BASE = new h4(e.Gx, e.Gy, n3.ONE), h4.ZERO = new h4(n3.ZERO, n3.ONE, n3.ZERO);
  const y5 = e.nBitLength, E6 = dc(h4, e.endo ? Math.ceil(y5 / 2) : y5);
  return { CURVE: e, ProjectivePoint: h4, normPrivateKeyToScalar: a2, weierstrassEquation: s, isWithinCurveOrder: c3 };
}
function Bc(t) {
  const e = Wr(t);
  return Dt(e, { hash: "hash", hmac: "function", randomBytes: "function" }, { bits2int: "function", bits2int_modN: "function", lowS: "boolean" }), Object.freeze({ lowS: true, ...e });
}
function Ic(t) {
  const e = Bc(t), { Fp: n3, n: r2 } = e, o2 = n3.BYTES + 1, i3 = 2 * n3.BYTES + 1;
  function s(g) {
    return X(g, r2);
  }
  function c3(g) {
    return nn(g, r2);
  }
  const { ProjectivePoint: a2, normPrivateKeyToScalar: u3, weierstrassEquation: l4, isWithinCurveOrder: f7 } = Ac({ ...e, toBytes(g, w3, b5) {
    const I4 = w3.toAffine(), R5 = n3.toBytes(I4.x), x2 = ne;
    return Ct("isCompressed", b5), b5 ? x2(Uint8Array.from([w3.hasEvenY() ? 2 : 3]), R5) : x2(Uint8Array.from([4]), R5, n3.toBytes(I4.y));
  }, fromBytes(g) {
    const w3 = g.length, b5 = g[0], I4 = g.subarray(1);
    if (w3 === o2 && (b5 === 2 || b5 === 3)) {
      const R5 = Ot(I4);
      if (!Ee(R5, K2, n3.ORDER)) throw new Error("Point is not on curve");
      const x2 = l4(R5);
      let C6;
      try {
        C6 = n3.sqrt(x2);
      } catch (M5) {
        const D3 = M5 instanceof Error ? ": " + M5.message : "";
        throw new Error("Point is not on curve" + D3);
      }
      const P4 = (C6 & K2) === K2;
      return (b5 & 1) === 1 !== P4 && (C6 = n3.neg(C6)), { x: R5, y: C6 };
    } else if (w3 === i3 && b5 === 4) {
      const R5 = n3.fromBytes(I4.subarray(0, n3.BYTES)), x2 = n3.fromBytes(I4.subarray(n3.BYTES, 2 * n3.BYTES));
      return { x: R5, y: x2 };
    } else {
      const R5 = o2, x2 = i3;
      throw new Error("invalid Point, expected length of " + R5 + ", or uncompressed " + x2 + ", got " + w3);
    }
  } }), h4 = (g) => Pt(Mt(g, e.nByteLength));
  function y5(g) {
    const w3 = r2 >> K2;
    return g > w3;
  }
  function E6(g) {
    return y5(g) ? s(-g) : g;
  }
  const p4 = (g, w3, b5) => Ot(g.slice(w3, b5));
  class d3 {
    constructor(w3, b5, I4) {
      this.r = w3, this.s = b5, this.recovery = I4, this.assertValidity();
    }
    static fromCompact(w3) {
      const b5 = e.nByteLength;
      return w3 = et("compactSignature", w3, b5 * 2), new d3(p4(w3, 0, b5), p4(w3, b5, 2 * b5));
    }
    static fromDER(w3) {
      const { r: b5, s: I4 } = lt.toSig(et("DER", w3));
      return new d3(b5, I4);
    }
    assertValidity() {
      ft("r", this.r, K2, r2), ft("s", this.s, K2, r2);
    }
    addRecoveryBit(w3) {
      return new d3(this.r, this.s, w3);
    }
    recoverPublicKey(w3) {
      const { r: b5, s: I4, recovery: R5 } = this, x2 = B4(et("msgHash", w3));
      if (R5 == null || ![0, 1, 2, 3].includes(R5)) throw new Error("recovery id invalid");
      const C6 = R5 === 2 || R5 === 3 ? b5 + e.n : b5;
      if (C6 >= n3.ORDER) throw new Error("recovery id 2 or 3 invalid");
      const P4 = (R5 & 1) === 0 ? "02" : "03", k6 = a2.fromHex(P4 + h4(C6)), M5 = c3(C6), D3 = s(-x2 * M5), z3 = s(I4 * M5), Z3 = a2.BASE.multiplyAndAddUnsafe(k6, D3, z3);
      if (!Z3) throw new Error("point at infinify");
      return Z3.assertValidity(), Z3;
    }
    hasHighS() {
      return y5(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new d3(this.r, s(-this.s), this.recovery) : this;
    }
    toDERRawBytes() {
      return Vt(this.toDERHex());
    }
    toDERHex() {
      return lt.hexFromSig({ r: this.r, s: this.s });
    }
    toCompactRawBytes() {
      return Vt(this.toCompactHex());
    }
    toCompactHex() {
      return h4(this.r) + h4(this.s);
    }
  }
  const v5 = { isValidPrivateKey(g) {
    try {
      return u3(g), true;
    } catch {
      return false;
    }
  }, normPrivateKeyToScalar: u3, randomPrivateKey: () => {
    const g = zr(e.n);
    return uc(e.randomBytes(g), e.n);
  }, precompute(g = 8, w3 = a2.BASE) {
    return w3._setWindowSize(g), w3.multiply(BigInt(3)), w3;
  } };
  function m2(g, w3 = true) {
    return a2.fromPrivateKey(g).toRawBytes(w3);
  }
  function O4(g) {
    const w3 = St(g), b5 = typeof g == "string", I4 = (w3 || b5) && g.length;
    return w3 ? I4 === o2 || I4 === i3 : b5 ? I4 === 2 * o2 || I4 === 2 * i3 : g instanceof a2;
  }
  function N3(g, w3, b5 = true) {
    if (O4(g)) throw new Error("first arg must be private key");
    if (!O4(w3)) throw new Error("second arg must be public key");
    return a2.fromHex(w3).multiply(u3(g)).toRawBytes(b5);
  }
  const $5 = e.bits2int || function(g) {
    if (g.length > 8192) throw new Error("input is too large");
    const w3 = Ot(g), b5 = g.length * 8 - e.nBitLength;
    return b5 > 0 ? w3 >> BigInt(b5) : w3;
  }, B4 = e.bits2int_modN || function(g) {
    return s($5(g));
  }, A5 = Je(e.nBitLength);
  function T3(g) {
    return ft("num < 2^" + e.nBitLength, g, dt, A5), Mt(g, e.nByteLength);
  }
  function S5(g, w3, b5 = L4) {
    if (["recovered", "canonical"].some((W4) => W4 in b5)) throw new Error("sign() legacy options not supported");
    const { hash: I4, randomBytes: R5 } = e;
    let { lowS: x2, prehash: C6, extraEntropy: P4 } = b5;
    x2 == null && (x2 = true), g = et("msgHash", g), Jr(b5), C6 && (g = et("prehashed msgHash", I4(g)));
    const k6 = B4(g), M5 = u3(w3), D3 = [T3(M5), T3(k6)];
    if (P4 != null && P4 !== false) {
      const W4 = P4 === true ? R5(n3.BYTES) : P4;
      D3.push(et("extraEntropy", W4));
    }
    const z3 = ne(...D3), Z3 = k6;
    function st3(W4) {
      const J4 = $5(W4);
      if (!f7(J4)) return;
      const Be4 = c3(J4), zt3 = a2.BASE.multiply(J4).toAffine(), vt2 = s(zt3.x);
      if (vt2 === dt) return;
      const Zt3 = s(Be4 * s(Z3 + vt2 * M5));
      if (Zt3 === dt) return;
      let Ut3 = (zt3.x === vt2 ? 0 : 2) | Number(zt3.y & K2), vn2 = Zt3;
      return x2 && y5(Zt3) && (vn2 = E6(Zt3), Ut3 ^= 1), new d3(vt2, vn2, Ut3);
    }
    return { seed: z3, k2sig: st3 };
  }
  const L4 = { lowS: e.lowS, prehash: false }, U5 = { lowS: e.lowS, prehash: false };
  function _2(g, w3, b5 = L4) {
    const { seed: I4, k2sig: R5 } = S5(g, w3, b5), x2 = e;
    return Vr(x2.hash.outputLen, x2.nByteLength, x2.hmac)(I4, R5);
  }
  a2.BASE._setWindowSize(8);
  function j3(g, w3, b5, I4 = U5) {
    var _a;
    const R5 = g;
    w3 = et("msgHash", w3), b5 = et("publicKey", b5);
    const { lowS: x2, prehash: C6, format: P4 } = I4;
    if (Jr(I4), "strict" in I4) throw new Error("options.strict was renamed to lowS");
    if (P4 !== void 0 && P4 !== "compact" && P4 !== "der") throw new Error("format must be compact or der");
    const k6 = typeof R5 == "string" || St(R5), M5 = !k6 && !P4 && typeof R5 == "object" && R5 !== null && typeof R5.r == "bigint" && typeof R5.s == "bigint";
    if (!k6 && !M5) throw new Error("invalid signature, expected Uint8Array, hex string or Signature instance");
    let D3, z3;
    try {
      if (M5 && (D3 = new d3(R5.r, R5.s)), k6) {
        try {
          P4 !== "compact" && (D3 = d3.fromDER(R5));
        } catch (Ut3) {
          if (!(Ut3 instanceof lt.Err)) throw Ut3;
        }
        !D3 && P4 !== "der" && (D3 = d3.fromCompact(R5));
      }
      z3 = a2.fromHex(b5);
    } catch {
      return false;
    }
    if (!D3 || x2 && D3.hasHighS()) return false;
    C6 && (w3 = e.hash(w3));
    const { r: Z3, s: st3 } = D3, W4 = B4(w3), J4 = c3(st3), Be4 = s(W4 * J4), zt3 = s(Z3 * J4), vt2 = (_a = a2.BASE.multiplyAndAddUnsafe(z3, Be4, zt3)) == null ? void 0 : _a.toAffine();
    return vt2 ? s(vt2.x) === Z3 : false;
  }
  return { CURVE: e, getPublicKey: m2, getSharedSecret: N3, sign: _2, verify: j3, ProjectivePoint: a2, Signature: d3, utils: v5 };
}
function Nc(t) {
  return { hash: t, hmac: (e, ...n3) => ye(t, e, Vi(...n3)), randomBytes: Lt };
}
function Uc(t, e) {
  const n3 = (r2) => Ic({ ...t, ...Nc(r2) });
  return { ...n3(e), create: n3 };
}
var to = Kr2(BigInt("0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff"));
var Tc = to.create(BigInt("-3"));
var Rc = BigInt("0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b");
var _c = Uc({ a: Tc, b: Rc, Fp: to, n: BigInt("0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551"), Gx: BigInt("0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296"), Gy: BigInt("0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"), h: BigInt(1), lowS: false }, Qt);
var ln = "base10";
var G = "base16";
var qt = "base64pad";
var xe = "base64url";
var Kt = "utf8";
var dn = 0;
var Ft = 1;
var re = 2;
var $c = 0;
var eo = 1;
var oe = 12;
var hn = 32;
function Lc() {
  const t = fn.utils.randomPrivateKey(), e = fn.getPublicKey(t);
  return { privateKey: toString(t, G), publicKey: toString(e, G) };
}
function jc() {
  const t = Lt(hn);
  return toString(t, G);
}
function Cc(t, e) {
  const n3 = fn.getSharedSecret(fromString(t, G), fromString(e, G)), r2 = Vs(Qt, n3, void 0, void 0, hn);
  return toString(r2, G);
}
function Pc(t) {
  const e = Qt(fromString(t, G));
  return toString(e, G);
}
function kc(t) {
  const e = Qt(fromString(t, Kt));
  return toString(e, G);
}
function pn(t) {
  return fromString(`${t}`, ln);
}
function Bt(t) {
  return Number(toString(t, ln));
}
function no(t) {
  return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
}
function ro(t) {
  const e = t.replace(/-/g, "+").replace(/_/g, "/"), n3 = (4 - e.length % 4) % 4;
  return e + "=".repeat(n3);
}
function Vc(t) {
  const e = pn(typeof t.type < "u" ? t.type : dn);
  if (Bt(e) === Ft && typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
  const n3 = typeof t.senderPublicKey < "u" ? fromString(t.senderPublicKey, G) : void 0, r2 = typeof t.iv < "u" ? fromString(t.iv, G) : Lt(oe), o2 = fromString(t.symKey, G), i3 = $r(o2, r2).encrypt(fromString(t.message, Kt)), s = gn({ type: e, sealed: i3, iv: r2, senderPublicKey: n3 });
  return t.encoding === xe ? no(s) : s;
}
function Mc(t) {
  const e = fromString(t.symKey, G), { sealed: n3, iv: r2 } = Se({ encoded: t.encoded, encoding: t.encoding }), o2 = $r(e, r2).decrypt(n3);
  if (o2 === null) throw new Error("Failed to decrypt");
  return toString(o2, Kt);
}
function Dc(t, e) {
  const n3 = pn(re), r2 = Lt(oe), o2 = fromString(t, Kt), i3 = gn({ type: n3, sealed: o2, iv: r2 });
  return e === xe ? no(i3) : i3;
}
function Hc(t, e) {
  const { sealed: n3 } = Se({ encoded: t, encoding: e });
  return toString(n3, Kt);
}
function gn(t) {
  if (Bt(t.type) === re) return toString(concat([t.type, t.sealed]), qt);
  if (Bt(t.type) === Ft) {
    if (typeof t.senderPublicKey > "u") throw new Error("Missing sender public key for type 1 envelope");
    return toString(concat([t.type, t.senderPublicKey, t.iv, t.sealed]), qt);
  }
  return toString(concat([t.type, t.iv, t.sealed]), qt);
}
function Se(t) {
  const e = (t.encoding || qt) === xe ? ro(t.encoded) : t.encoded, n3 = fromString(e, qt), r2 = n3.slice($c, eo), o2 = eo;
  if (Bt(r2) === Ft) {
    const a2 = o2 + hn, u3 = a2 + oe, l4 = n3.slice(o2, a2), f7 = n3.slice(a2, u3), h4 = n3.slice(u3);
    return { type: r2, sealed: h4, iv: f7, senderPublicKey: l4 };
  }
  if (Bt(r2) === re) {
    const a2 = n3.slice(o2), u3 = Lt(oe);
    return { type: r2, sealed: a2, iv: u3 };
  }
  const i3 = o2 + oe, s = n3.slice(o2, i3), c3 = n3.slice(i3);
  return { type: r2, sealed: c3, iv: s };
}
function qc(t, e) {
  const n3 = Se({ encoded: t, encoding: e == null ? void 0 : e.encoding });
  return oo({ type: Bt(n3.type), senderPublicKey: typeof n3.senderPublicKey < "u" ? toString(n3.senderPublicKey, G) : void 0, receiverPublicKey: e == null ? void 0 : e.receiverPublicKey });
}
function oo(t) {
  const e = (t == null ? void 0 : t.type) || dn;
  if (e === Ft) {
    if (typeof (t == null ? void 0 : t.senderPublicKey) > "u") throw new Error("missing sender public key");
    if (typeof (t == null ? void 0 : t.receiverPublicKey) > "u") throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: t == null ? void 0 : t.senderPublicKey, receiverPublicKey: t == null ? void 0 : t.receiverPublicKey };
}
function Kc(t) {
  return t.type === Ft && typeof t.senderPublicKey == "string" && typeof t.receiverPublicKey == "string";
}
function Fc(t) {
  return t.type === re;
}
function io(t) {
  const e = Buffer.from(t.x, "base64"), n3 = Buffer.from(t.y, "base64");
  return concat([new Uint8Array([4]), e, n3]);
}
function zc(t, e) {
  const [n3, r2, o2] = t.split("."), i3 = Buffer.from(ro(o2), "base64");
  if (i3.length !== 64) throw new Error("Invalid signature length");
  const s = i3.slice(0, 32), c3 = i3.slice(32, 64), a2 = `${n3}.${r2}`, u3 = Qt(a2), l4 = io(e);
  if (!_c.verify(concat([s, c3]), u3, l4)) throw new Error("Invalid signature");
  return sn(t).payload;
}
var so = "irn";
function Zc(t) {
  return (t == null ? void 0 : t.relay) || { protocol: so };
}
function Yc(t) {
  const e = C[t];
  if (typeof e > "u") throw new Error(`Relay Protocol not supported: ${t}`);
  return e;
}
function co(t, e = "-") {
  const n3 = {}, r2 = "relay" + e;
  return Object.keys(t).forEach((o2) => {
    if (o2.startsWith(r2)) {
      const i3 = o2.replace(r2, ""), s = t[o2];
      n3[i3] = s;
    }
  }), n3;
}
function Gc(t) {
  if (!t.includes("wc:")) {
    const u3 = je(t);
    u3 != null && u3.includes("wc:") && (t = u3);
  }
  t = t.includes("wc://") ? t.replace("wc://", "") : t, t = t.includes("wc:") ? t.replace("wc:", "") : t;
  const e = t.indexOf(":"), n3 = t.indexOf("?") !== -1 ? t.indexOf("?") : void 0, r2 = t.substring(0, e), o2 = t.substring(e + 1, n3).split("@"), i3 = typeof n3 < "u" ? t.substring(n3) : "", s = new URLSearchParams(i3), c3 = {};
  s.forEach((u3, l4) => {
    c3[l4] = u3;
  });
  const a2 = typeof c3.methods == "string" ? c3.methods.split(",") : void 0;
  return { protocol: r2, topic: ao(o2[0]), version: parseInt(o2[1], 10), symKey: c3.symKey, relay: co(c3), methods: a2, expiryTimestamp: c3.expiryTimestamp ? parseInt(c3.expiryTimestamp, 10) : void 0 };
}
function ao(t) {
  return t.startsWith("//") ? t.substring(2) : t;
}
function uo(t, e = "-") {
  const n3 = "relay", r2 = {};
  return Object.keys(t).forEach((o2) => {
    const i3 = o2, s = n3 + e + i3;
    t[i3] && (r2[s] = t[i3]);
  }), r2;
}
function Wc(t) {
  const e = new URLSearchParams(), n3 = uo(t.relay);
  Object.keys(n3).sort().forEach((o2) => {
    e.set(o2, n3[o2]);
  }), e.set("symKey", t.symKey), t.expiryTimestamp && e.set("expiryTimestamp", t.expiryTimestamp.toString()), t.methods && e.set("methods", t.methods.join(","));
  const r2 = e.toString();
  return `${t.protocol}:${t.topic}@${t.version}?${r2}`;
}
function Xc(t, e, n3) {
  return `${t}?wc_ev=${n3}&topic=${e}`;
}
var Jc = Object.defineProperty;
var Qc = Object.defineProperties;
var ta = Object.getOwnPropertyDescriptors;
var fo = Object.getOwnPropertySymbols;
var ea = Object.prototype.hasOwnProperty;
var na = Object.prototype.propertyIsEnumerable;
var lo = (t, e, n3) => e in t ? Jc(t, e, { enumerable: true, configurable: true, writable: true, value: n3 }) : t[e] = n3;
var ra = (t, e) => {
  for (var n3 in e || (e = {})) ea.call(e, n3) && lo(t, n3, e[n3]);
  if (fo) for (var n3 of fo(e)) na.call(e, n3) && lo(t, n3, e[n3]);
  return t;
};
var oa = (t, e) => Qc(t, ta(e));
function It(t) {
  const e = [];
  return t.forEach((n3) => {
    const [r2, o2] = n3.split(":");
    e.push(`${r2}:${o2}`);
  }), e;
}
function ho(t) {
  const e = [];
  return Object.values(t).forEach((n3) => {
    e.push(...It(n3.accounts));
  }), e;
}
function po(t, e) {
  const n3 = [];
  return Object.values(t).forEach((r2) => {
    It(r2.accounts).includes(e) && n3.push(...r2.methods);
  }), n3;
}
function go(t, e) {
  const n3 = [];
  return Object.values(t).forEach((r2) => {
    It(r2.accounts).includes(e) && n3.push(...r2.events);
  }), n3;
}
function yn(t) {
  return t.includes(":");
}
function yo(t) {
  return yn(t) ? t.split(":")[0] : t;
}
function ie(t) {
  var e, n3, r2;
  const o2 = {};
  if (!Oe(t)) return o2;
  for (const [i3, s] of Object.entries(t)) {
    const c3 = yn(i3) ? [i3] : s.chains, a2 = s.methods || [], u3 = s.events || [], l4 = yo(i3);
    o2[l4] = oa(ra({}, o2[l4]), { chains: ot(c3, (e = o2[l4]) == null ? void 0 : e.chains), methods: ot(a2, (n3 = o2[l4]) == null ? void 0 : n3.methods), events: ot(u3, (r2 = o2[l4]) == null ? void 0 : r2.events) });
  }
  return o2;
}
function mo(t) {
  const e = {};
  return t == null ? void 0 : t.forEach((n3) => {
    var r2;
    const [o2, i3] = n3.split(":");
    e[o2] || (e[o2] = { accounts: [], chains: [], events: [], methods: [] }), e[o2].accounts.push(n3), (r2 = e[o2].chains) == null || r2.push(`${o2}:${i3}`);
  }), e;
}
function ca(t, e) {
  e = e.map((r2) => r2.replace("did:pkh:", ""));
  const n3 = mo(e);
  for (const [r2, o2] of Object.entries(n3)) o2.methods ? o2.methods = ot(o2.methods, t) : o2.methods = t, o2.events = ["chainChanged", "accountsChanged"];
  return n3;
}
function aa(t, e) {
  var n3, r2, o2, i3, s, c3;
  const a2 = ie(t), u3 = ie(e), l4 = {}, f7 = Object.keys(a2).concat(Object.keys(u3));
  for (const h4 of f7) l4[h4] = { chains: ot((n3 = a2[h4]) == null ? void 0 : n3.chains, (r2 = u3[h4]) == null ? void 0 : r2.chains), methods: ot((o2 = a2[h4]) == null ? void 0 : o2.methods, (i3 = u3[h4]) == null ? void 0 : i3.methods), events: ot((s = a2[h4]) == null ? void 0 : s.events, (c3 = u3[h4]) == null ? void 0 : c3.events) };
  return l4;
}
var wo = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } };
var bo = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function ht(t, e) {
  const { message: n3, code: r2 } = bo[t];
  return { message: e ? `${n3} ${e}` : n3, code: r2 };
}
function Nt(t, e) {
  const { message: n3, code: r2 } = wo[t];
  return { message: e ? `${n3} ${e}` : n3, code: r2 };
}
function se(t, e) {
  return Array.isArray(t) ? typeof e < "u" && t.length ? t.every(e) : true : false;
}
function Oe(t) {
  return Object.getPrototypeOf(t) === Object.prototype && Object.keys(t).length;
}
function Et(t) {
  return typeof t > "u";
}
function nt(t, e) {
  return e && Et(t) ? true : typeof t == "string" && !!t.trim().length;
}
function Ae(t, e) {
  return e && Et(t) ? true : typeof t == "number" && !isNaN(t);
}
function ua(t, e) {
  const { requiredNamespaces: n3 } = e, r2 = Object.keys(t.namespaces), o2 = Object.keys(n3);
  let i3 = true;
  return gt(o2, r2) ? (r2.forEach((s) => {
    const { accounts: c3, methods: a2, events: u3 } = t.namespaces[s], l4 = It(c3), f7 = n3[s];
    (!gt(ue(s, f7), l4) || !gt(f7.methods, a2) || !gt(f7.events, u3)) && (i3 = false);
  }), i3) : false;
}
function ce(t) {
  return nt(t, false) && t.includes(":") ? t.split(":").length === 2 : false;
}
function Eo(t) {
  if (nt(t, false) && t.includes(":")) {
    const e = t.split(":");
    if (e.length === 3) {
      const n3 = e[0] + ":" + e[1];
      return !!e[2] && ce(n3);
    }
  }
  return false;
}
function fa(t) {
  function e(n3) {
    try {
      return typeof new URL(n3) < "u";
    } catch {
      return false;
    }
  }
  try {
    if (nt(t, false)) {
      if (e(t)) return true;
      const n3 = je(t);
      return e(n3);
    }
  } catch {
  }
  return false;
}
function la(t) {
  var e;
  return (e = t == null ? void 0 : t.proposer) == null ? void 0 : e.publicKey;
}
function da(t) {
  return t == null ? void 0 : t.topic;
}
function ha(t, e) {
  let n3 = null;
  return nt(t == null ? void 0 : t.publicKey, false) || (n3 = ht("MISSING_OR_INVALID", `${e} controller public key should be a string`)), n3;
}
function mn(t) {
  let e = true;
  return se(t) ? t.length && (e = t.every((n3) => nt(n3, false))) : e = false, e;
}
function vo(t, e, n3) {
  let r2 = null;
  return se(e) && e.length ? e.forEach((o2) => {
    r2 || ce(o2) || (r2 = Nt("UNSUPPORTED_CHAINS", `${n3}, chain ${o2} should be a string and conform to "namespace:chainId" format`));
  }) : ce(t) || (r2 = Nt("UNSUPPORTED_CHAINS", `${n3}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), r2;
}
function xo(t, e, n3) {
  let r2 = null;
  return Object.entries(t).forEach(([o2, i3]) => {
    if (r2) return;
    const s = vo(o2, ue(o2, i3), `${e} ${n3}`);
    s && (r2 = s);
  }), r2;
}
function So(t, e) {
  let n3 = null;
  return se(t) ? t.forEach((r2) => {
    n3 || Eo(r2) || (n3 = Nt("UNSUPPORTED_ACCOUNTS", `${e}, account ${r2} should be a string and conform to "namespace:chainId:address" format`));
  }) : n3 = Nt("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), n3;
}
function Oo(t, e) {
  let n3 = null;
  return Object.values(t).forEach((r2) => {
    if (n3) return;
    const o2 = So(r2 == null ? void 0 : r2.accounts, `${e} namespace`);
    o2 && (n3 = o2);
  }), n3;
}
function Ao(t, e) {
  let n3 = null;
  return mn(t == null ? void 0 : t.methods) ? mn(t == null ? void 0 : t.events) || (n3 = Nt("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : n3 = Nt("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), n3;
}
function wn(t, e) {
  let n3 = null;
  return Object.values(t).forEach((r2) => {
    if (n3) return;
    const o2 = Ao(r2, `${e}, namespace`);
    o2 && (n3 = o2);
  }), n3;
}
function pa(t, e, n3) {
  let r2 = null;
  if (t && Oe(t)) {
    const o2 = wn(t, e);
    o2 && (r2 = o2);
    const i3 = xo(t, e, n3);
    i3 && (r2 = i3);
  } else r2 = ht("MISSING_OR_INVALID", `${e}, ${n3} should be an object with data`);
  return r2;
}
function Bo(t, e) {
  let n3 = null;
  if (t && Oe(t)) {
    const r2 = wn(t, e);
    r2 && (n3 = r2);
    const o2 = Oo(t, e);
    o2 && (n3 = o2);
  } else n3 = ht("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return n3;
}
function Io(t) {
  return nt(t.protocol, true);
}
function ga(t, e) {
  let n3 = false;
  return e && !t ? n3 = true : t && se(t) && t.length && t.forEach((r2) => {
    n3 = Io(r2);
  }), n3;
}
function ya(t) {
  return typeof t == "number";
}
function ma(t) {
  return typeof t < "u" && typeof t !== null;
}
function wa(t) {
  return !(!t || typeof t != "object" || !t.code || !Ae(t.code, false) || !t.message || !nt(t.message, false));
}
function ba(t) {
  return !(Et(t) || !nt(t.method, false));
}
function Ea(t) {
  return !(Et(t) || Et(t.result) && Et(t.error) || !Ae(t.id, false) || !nt(t.jsonrpc, false));
}
function va(t) {
  return !(Et(t) || !nt(t.name, false));
}
function xa(t, e) {
  return !(!ce(e) || !ho(t).includes(e));
}
function Sa(t, e, n3) {
  return nt(n3, false) ? po(t, e).includes(n3) : false;
}
function Oa(t, e, n3) {
  return nt(n3, false) ? go(t, e).includes(n3) : false;
}
function No(t, e, n3) {
  let r2 = null;
  const o2 = Aa(t), i3 = Ba(e), s = Object.keys(o2), c3 = Object.keys(i3), a2 = Uo(Object.keys(t)), u3 = Uo(Object.keys(e)), l4 = a2.filter((f7) => !u3.includes(f7));
  return l4.length && (r2 = ht("NON_CONFORMING_NAMESPACES", `${n3} namespaces keys don't satisfy requiredNamespaces.
      Required: ${l4.toString()}
      Received: ${Object.keys(e).toString()}`)), gt(s, c3) || (r2 = ht("NON_CONFORMING_NAMESPACES", `${n3} namespaces chains don't satisfy required namespaces.
      Required: ${s.toString()}
      Approved: ${c3.toString()}`)), Object.keys(e).forEach((f7) => {
    if (!f7.includes(":") || r2) return;
    const h4 = It(e[f7].accounts);
    h4.includes(f7) || (r2 = ht("NON_CONFORMING_NAMESPACES", `${n3} namespaces accounts don't satisfy namespace accounts for ${f7}
        Required: ${f7}
        Approved: ${h4.toString()}`));
  }), s.forEach((f7) => {
    r2 || (gt(o2[f7].methods, i3[f7].methods) ? gt(o2[f7].events, i3[f7].events) || (r2 = ht("NON_CONFORMING_NAMESPACES", `${n3} namespaces events don't satisfy namespace events for ${f7}`)) : r2 = ht("NON_CONFORMING_NAMESPACES", `${n3} namespaces methods don't satisfy namespace methods for ${f7}`));
  }), r2;
}
function Aa(t) {
  const e = {};
  return Object.keys(t).forEach((n3) => {
    var r2;
    n3.includes(":") ? e[n3] = t[n3] : (r2 = t[n3].chains) == null || r2.forEach((o2) => {
      e[o2] = { methods: t[n3].methods, events: t[n3].events };
    });
  }), e;
}
function Uo(t) {
  return [...new Set(t.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function Ba(t) {
  const e = {};
  return Object.keys(t).forEach((n3) => {
    if (n3.includes(":")) e[n3] = t[n3];
    else {
      const r2 = It(t[n3].accounts);
      r2 == null ? void 0 : r2.forEach((o2) => {
        e[o2] = { accounts: t[n3].accounts.filter((i3) => i3.includes(`${o2}:`)), methods: t[n3].methods, events: t[n3].events };
      });
    }
  }), e;
}
function Ia(t, e) {
  return Ae(t, false) && t <= e.max && t >= e.min;
}
function Na() {
  const t = xt();
  return new Promise((e) => {
    switch (t) {
      case Y.browser:
        e(To());
        break;
      case Y.reactNative:
        e(Ro());
        break;
      case Y.node:
        e(_o());
        break;
      default:
        e(true);
    }
  });
}
function To() {
  return Tt() && (navigator == null ? void 0 : navigator.onLine);
}
async function Ro() {
  if (pt() && typeof global < "u" && global != null && global.NetInfo) {
    const t = await (global == null ? void 0 : global.NetInfo.fetch());
    return t == null ? void 0 : t.isConnected;
  }
  return true;
}
function _o() {
  return true;
}
function Ua(t) {
  switch (xt()) {
    case Y.browser:
      $o(t);
      break;
    case Y.reactNative:
      Lo(t);
      break;
    case Y.node:
      break;
  }
}
function $o(t) {
  !pt() && Tt() && (window.addEventListener("online", () => t(true)), window.addEventListener("offline", () => t(false)));
}
function Lo(t) {
  pt() && typeof global < "u" && global != null && global.NetInfo && (global == null ? void 0 : global.NetInfo.addEventListener((e) => t(e == null ? void 0 : e.isConnected)));
}
function Ta() {
  var t;
  return Tt() && (0, import_window_getters.getDocument)() ? ((t = (0, import_window_getters.getDocument)()) == null ? void 0 : t.visibilityState) === "visible" : true;
}
var bn = {};
var Ra = class {
  static get(e) {
    return bn[e];
  }
  static set(e, n3) {
    bn[e] = n3;
  }
  static delete(e) {
    delete bn[e];
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_events3 = __toESM(require_events());

// node_modules/@walletconnect/core/node_modules/@walletconnect/types/dist/index.es.js
var import_events2 = __toESM(require_events());
var a = Object.defineProperty;
var u = (e, s, r2) => s in e ? a(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var c = (e, s, r2) => u(e, typeof s != "symbol" ? s + "" : s, r2);
var h2 = class extends IEvents {
  constructor(s) {
    super(), this.opts = s, c(this, "protocol", "wc"), c(this, "version", 2);
  }
};
var p = Object.defineProperty;
var b = (e, s, r2) => s in e ? p(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var v = (e, s, r2) => b(e, typeof s != "symbol" ? s + "" : s, r2);
var I = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2, v(this, "records", /* @__PURE__ */ new Map());
  }
};
var y2 = class {
  constructor(s, r2) {
    this.logger = s, this.core = r2;
  }
};
var m = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var d = class extends IEvents {
  constructor(s) {
    super();
  }
};
var f4 = class {
  constructor(s, r2, t, q4) {
    this.core = s, this.logger = r2, this.name = t;
  }
};
var P = class extends IEvents {
  constructor(s, r2) {
    super(), this.relayer = s, this.logger = r2;
  }
};
var S = class extends IEvents {
  constructor(s, r2) {
    super(), this.core = s, this.logger = r2;
  }
};
var M = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.store = t;
  }
};
var O = class {
  constructor(s, r2) {
    this.projectId = s, this.logger = r2;
  }
};
var R = class {
  constructor(s, r2, t) {
    this.core = s, this.logger = r2, this.telemetryEnabled = t;
  }
};

// node_modules/@walletconnect/core/dist/index.es.js
var import_time2 = __toESM(require_cjs());
var import_window_getters2 = __toESM(require_cjs2());
var ze2 = "wc";
var Le = 2;
var he2 = "core";
var B = `${ze2}@2:${he2}:`;
var Et2 = { name: he2, logger: "error" };
var It2 = { database: ":memory:" };
var Tt2 = "crypto";
var ke2 = "client_ed25519_seed";
var Ct2 = import_time2.ONE_DAY;
var Pt2 = "keychain";
var St2 = "0.3";
var Ot2 = "messages";
var Rt2 = "0.3";
var je2 = import_time2.SIX_HOURS;
var At2 = "publisher";
var xt2 = "irn";
var Nt2 = "error";
var Ue = "wss://relay.walletconnect.org";
var $t2 = "relayer";
var C2 = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" };
var zt = "_subscription";
var L = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" };
var Lt2 = 0.1;
var _e2 = "2.21.1";
var Q = { link_mode: "link_mode", relay: "relay" };
var le2 = { inbound: "inbound", outbound: "outbound" };
var kt2 = "0.3";
var jt2 = "WALLETCONNECT_CLIENT_ID";
var Fe2 = "WALLETCONNECT_LINK_MODE_APPS";
var $ = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" };
var Ut = "subscription";
var Ft2 = "0.3";
var Ys2 = import_time2.FIVE_SECONDS * 1e3;
var Mt2 = "pairing";
var Kt2 = "0.3";
var se2 = { wc_pairingDelete: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1e3 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 1001 } }, wc_pairingPing: { req: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1002 }, res: { ttl: import_time2.THIRTY_SECONDS, prompt: false, tag: 1003 } }, unregistered_method: { req: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 }, res: { ttl: import_time2.ONE_DAY, prompt: false, tag: 0 } } };
var re2 = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" };
var F2 = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" };
var Bt2 = "history";
var Vt2 = "0.3";
var qt2 = "expirer";
var M2 = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" };
var Gt = "0.3";
var Wt2 = "verify-api";
var Zs2 = "https://verify.walletconnect.com";
var Ht2 = "https://verify.walletconnect.org";
var ue2 = Ht2;
var Yt2 = `${ue2}/v3`;
var Jt2 = [Zs2, Ht2];
var Xt2 = "echo";
var Zt = "https://echo.walletconnect.com";
var G2 = { pairing_started: "pairing_started", pairing_uri_validation_success: "pairing_uri_validation_success", pairing_uri_not_expired: "pairing_uri_not_expired", store_new_pairing: "store_new_pairing", subscribing_pairing_topic: "subscribing_pairing_topic", subscribe_pairing_topic_success: "subscribe_pairing_topic_success", existing_pairing: "existing_pairing", pairing_not_expired: "pairing_not_expired", emit_inactive_pairing: "emit_inactive_pairing", emit_session_proposal: "emit_session_proposal", subscribing_to_pairing_topic: "subscribing_to_pairing_topic" };
var Y2 = { no_wss_connection: "no_wss_connection", no_internet_connection: "no_internet_connection", malformed_pairing_uri: "malformed_pairing_uri", active_pairing_already_exists: "active_pairing_already_exists", subscribe_pairing_topic_failure: "subscribe_pairing_topic_failure", pairing_expired: "pairing_expired", proposal_expired: "proposal_expired", proposal_listener_not_found: "proposal_listener_not_found" };
var er2 = { session_approve_started: "session_approve_started", proposal_not_expired: "proposal_not_expired", session_namespaces_validation_success: "session_namespaces_validation_success", create_session_topic: "create_session_topic", subscribing_session_topic: "subscribing_session_topic", subscribe_session_topic_success: "subscribe_session_topic_success", publishing_session_approve: "publishing_session_approve", session_approve_publish_success: "session_approve_publish_success", store_session: "store_session", publishing_session_settle: "publishing_session_settle", session_settle_publish_success: "session_settle_publish_success" };
var tr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", proposal_expired: "proposal_expired", subscribe_session_topic_failure: "subscribe_session_topic_failure", session_approve_publish_failure: "session_approve_publish_failure", session_settle_publish_failure: "session_settle_publish_failure", session_approve_namespace_validation_failure: "session_approve_namespace_validation_failure", proposal_not_found: "proposal_not_found" };
var ir2 = { authenticated_session_approve_started: "authenticated_session_approve_started", authenticated_session_not_expired: "authenticated_session_not_expired", chains_caip2_compliant: "chains_caip2_compliant", chains_evm_compliant: "chains_evm_compliant", create_authenticated_session_topic: "create_authenticated_session_topic", cacaos_verified: "cacaos_verified", store_authenticated_session: "store_authenticated_session", subscribing_authenticated_session_topic: "subscribing_authenticated_session_topic", subscribe_authenticated_session_topic_success: "subscribe_authenticated_session_topic_success", publishing_authenticated_session_approve: "publishing_authenticated_session_approve", authenticated_session_approve_publish_success: "authenticated_session_approve_publish_success" };
var sr2 = { no_internet_connection: "no_internet_connection", no_wss_connection: "no_wss_connection", missing_session_authenticate_request: "missing_session_authenticate_request", session_authenticate_request_expired: "session_authenticate_request_expired", chains_caip2_compliant_failure: "chains_caip2_compliant_failure", chains_evm_compliant_failure: "chains_evm_compliant_failure", invalid_cacao: "invalid_cacao", subscribe_authenticated_session_topic_failure: "subscribe_authenticated_session_topic_failure", authenticated_session_approve_publish_failure: "authenticated_session_approve_publish_failure", authenticated_session_pending_request_not_found: "authenticated_session_pending_request_not_found" };
var Qt2 = 0.1;
var ei2 = "event-client";
var ti = 86400;
var ii = "https://pulse.walletconnect.org/batch";
function rr2(r2, e) {
  if (r2.length >= 255) throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), i3 = 0; i3 < t.length; i3++) t[i3] = 255;
  for (var s = 0; s < r2.length; s++) {
    var n3 = r2.charAt(s), o2 = n3.charCodeAt(0);
    if (t[o2] !== 255) throw new TypeError(n3 + " is ambiguous");
    t[o2] = s;
  }
  var a2 = r2.length, c3 = r2.charAt(0), h4 = Math.log(a2) / Math.log(256), l4 = Math.log(256) / Math.log(a2);
  function d3(u3) {
    if (u3 instanceof Uint8Array || (ArrayBuffer.isView(u3) ? u3 = new Uint8Array(u3.buffer, u3.byteOffset, u3.byteLength) : Array.isArray(u3) && (u3 = Uint8Array.from(u3))), !(u3 instanceof Uint8Array)) throw new TypeError("Expected Uint8Array");
    if (u3.length === 0) return "";
    for (var b5 = 0, x2 = 0, I4 = 0, D3 = u3.length; I4 !== D3 && u3[I4] === 0; ) I4++, b5++;
    for (var j3 = (D3 - I4) * l4 + 1 >>> 0, T3 = new Uint8Array(j3); I4 !== D3; ) {
      for (var q4 = u3[I4], J4 = 0, K5 = j3 - 1; (q4 !== 0 || J4 < x2) && K5 !== -1; K5--, J4++) q4 += 256 * T3[K5] >>> 0, T3[K5] = q4 % a2 >>> 0, q4 = q4 / a2 >>> 0;
      if (q4 !== 0) throw new Error("Non-zero carry");
      x2 = J4, I4++;
    }
    for (var H4 = j3 - x2; H4 !== j3 && T3[H4] === 0; ) H4++;
    for (var me4 = c3.repeat(b5); H4 < j3; ++H4) me4 += r2.charAt(T3[H4]);
    return me4;
  }
  function g(u3) {
    if (typeof u3 != "string") throw new TypeError("Expected String");
    if (u3.length === 0) return new Uint8Array();
    var b5 = 0;
    if (u3[b5] !== " ") {
      for (var x2 = 0, I4 = 0; u3[b5] === c3; ) x2++, b5++;
      for (var D3 = (u3.length - b5) * h4 + 1 >>> 0, j3 = new Uint8Array(D3); u3[b5]; ) {
        var T3 = t[u3.charCodeAt(b5)];
        if (T3 === 255) return;
        for (var q4 = 0, J4 = D3 - 1; (T3 !== 0 || q4 < I4) && J4 !== -1; J4--, q4++) T3 += a2 * j3[J4] >>> 0, j3[J4] = T3 % 256 >>> 0, T3 = T3 / 256 >>> 0;
        if (T3 !== 0) throw new Error("Non-zero carry");
        I4 = q4, b5++;
      }
      if (u3[b5] !== " ") {
        for (var K5 = D3 - I4; K5 !== D3 && j3[K5] === 0; ) K5++;
        for (var H4 = new Uint8Array(x2 + (D3 - K5)), me4 = x2; K5 !== D3; ) H4[me4++] = j3[K5++];
        return H4;
      }
    }
  }
  function _2(u3) {
    var b5 = g(u3);
    if (b5) return b5;
    throw new Error(`Non-${e} character`);
  }
  return { encode: d3, decodeUnsafe: g, decode: _2 };
}
var nr2 = rr2;
var or2 = nr2;
var si2 = (r2) => {
  if (r2 instanceof Uint8Array && r2.constructor.name === "Uint8Array") return r2;
  if (r2 instanceof ArrayBuffer) return new Uint8Array(r2);
  if (ArrayBuffer.isView(r2)) return new Uint8Array(r2.buffer, r2.byteOffset, r2.byteLength);
  throw new Error("Unknown type, must be binary type");
};
var ar2 = (r2) => new TextEncoder().encode(r2);
var cr2 = (r2) => new TextDecoder().decode(r2);
var hr2 = class {
  constructor(e, t, i3) {
    this.name = e, this.prefix = t, this.baseEncode = i3;
  }
  encode(e) {
    if (e instanceof Uint8Array) return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
};
var lr2 = class {
  constructor(e, t, i3) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0) throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = i3;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint) throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else throw Error("Can only multibase decode strings");
  }
  or(e) {
    return ri2(this, e);
  }
};
var ur2 = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return ri2(this, e);
  }
  decode(e) {
    const t = e[0], i3 = this.decoders[t];
    if (i3) return i3.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
var ri2 = (r2, e) => new ur2({ ...r2.decoders || { [r2.prefix]: r2 }, ...e.decoders || { [e.prefix]: e } });
var dr2 = class {
  constructor(e, t, i3, s) {
    this.name = e, this.prefix = t, this.baseEncode = i3, this.baseDecode = s, this.encoder = new hr2(e, t, i3), this.decoder = new lr2(e, t, s);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
var Ee2 = ({ name: r2, prefix: e, encode: t, decode: i3 }) => new dr2(r2, e, t, i3);
var de2 = ({ prefix: r2, name: e, alphabet: t }) => {
  const { encode: i3, decode: s } = or2(t, e);
  return Ee2({ prefix: r2, name: e, encode: i3, decode: (n3) => si2(s(n3)) });
};
var gr = (r2, e, t, i3) => {
  const s = {};
  for (let l4 = 0; l4 < e.length; ++l4) s[e[l4]] = l4;
  let n3 = r2.length;
  for (; r2[n3 - 1] === "="; ) --n3;
  const o2 = new Uint8Array(n3 * t / 8 | 0);
  let a2 = 0, c3 = 0, h4 = 0;
  for (let l4 = 0; l4 < n3; ++l4) {
    const d3 = s[r2[l4]];
    if (d3 === void 0) throw new SyntaxError(`Non-${i3} character`);
    c3 = c3 << t | d3, a2 += t, a2 >= 8 && (a2 -= 8, o2[h4++] = 255 & c3 >> a2);
  }
  if (a2 >= t || 255 & c3 << 8 - a2) throw new SyntaxError("Unexpected end of data");
  return o2;
};
var pr = (r2, e, t) => {
  const i3 = e[e.length - 1] === "=", s = (1 << t) - 1;
  let n3 = "", o2 = 0, a2 = 0;
  for (let c3 = 0; c3 < r2.length; ++c3) for (a2 = a2 << 8 | r2[c3], o2 += 8; o2 > t; ) o2 -= t, n3 += e[s & a2 >> o2];
  if (o2 && (n3 += e[s & a2 << t - o2]), i3) for (; n3.length * t & 7; ) n3 += "=";
  return n3;
};
var P2 = ({ name: r2, prefix: e, bitsPerChar: t, alphabet: i3 }) => Ee2({ prefix: e, name: r2, encode(s) {
  return pr(s, i3, t);
}, decode(s) {
  return gr(s, i3, t, r2);
} });
var yr = Ee2({ prefix: "\0", name: "identity", encode: (r2) => cr2(r2), decode: (r2) => ar2(r2) });
var br2 = Object.freeze({ __proto__: null, identity: yr });
var mr2 = P2({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var fr2 = Object.freeze({ __proto__: null, base2: mr2 });
var Dr2 = P2({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var vr2 = Object.freeze({ __proto__: null, base8: Dr2 });
var wr2 = de2({ prefix: "9", name: "base10", alphabet: "0123456789" });
var _r2 = Object.freeze({ __proto__: null, base10: wr2 });
var Er = P2({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 });
var Ir2 = P2({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var Tr2 = Object.freeze({ __proto__: null, base16: Er, base16upper: Ir2 });
var Cr2 = P2({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 });
var Pr2 = P2({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 });
var Sr2 = P2({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 });
var Or2 = P2({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 });
var Rr2 = P2({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 });
var Ar2 = P2({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 });
var xr = P2({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 });
var Nr2 = P2({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 });
var $r2 = P2({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var zr2 = Object.freeze({ __proto__: null, base32: Cr2, base32upper: Pr2, base32pad: Sr2, base32padupper: Or2, base32hex: Rr2, base32hexupper: Ar2, base32hexpad: xr, base32hexpadupper: Nr2, base32z: $r2 });
var Lr2 = de2({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" });
var kr2 = de2({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var jr2 = Object.freeze({ __proto__: null, base36: Lr2, base36upper: kr2 });
var Ur2 = de2({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" });
var Fr2 = de2({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Mr2 = Object.freeze({ __proto__: null, base58btc: Ur2, base58flickr: Fr2 });
var Kr3 = P2({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 });
var Br2 = P2({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 });
var Vr2 = P2({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 });
var qr2 = P2({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Gr2 = Object.freeze({ __proto__: null, base64: Kr3, base64pad: Br2, base64url: Vr2, base64urlpad: qr2 });
var ni2 = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂");
var Wr2 = ni2.reduce((r2, e, t) => (r2[t] = e, r2), []);
var Hr2 = ni2.reduce((r2, e, t) => (r2[e.codePointAt(0)] = t, r2), []);
function Yr2(r2) {
  return r2.reduce((e, t) => (e += Wr2[t], e), "");
}
function Jr2(r2) {
  const e = [];
  for (const t of r2) {
    const i3 = Hr2[t.codePointAt(0)];
    if (i3 === void 0) throw new Error(`Non-base256emoji character: ${t}`);
    e.push(i3);
  }
  return new Uint8Array(e);
}
var Xr2 = Ee2({ prefix: "🚀", name: "base256emoji", encode: Yr2, decode: Jr2 });
var Zr2 = Object.freeze({ __proto__: null, base256emoji: Xr2 });
var Qr2 = ai;
var oi2 = 128;
var en2 = 127;
var tn2 = ~en2;
var sn3 = Math.pow(2, 31);
function ai(r2, e, t) {
  e = e || [], t = t || 0;
  for (var i3 = t; r2 >= sn3; ) e[t++] = r2 & 255 | oi2, r2 /= 128;
  for (; r2 & tn2; ) e[t++] = r2 & 255 | oi2, r2 >>>= 7;
  return e[t] = r2 | 0, ai.bytes = t - i3 + 1, e;
}
var rn2 = Me2;
var nn2 = 128;
var ci = 127;
function Me2(r2, i3) {
  var t = 0, i3 = i3 || 0, s = 0, n3 = i3, o2, a2 = r2.length;
  do {
    if (n3 >= a2) throw Me2.bytes = 0, new RangeError("Could not decode varint");
    o2 = r2[n3++], t += s < 28 ? (o2 & ci) << s : (o2 & ci) * Math.pow(2, s), s += 7;
  } while (o2 >= nn2);
  return Me2.bytes = n3 - i3, t;
}
var on2 = Math.pow(2, 7);
var an2 = Math.pow(2, 14);
var cn2 = Math.pow(2, 21);
var hn2 = Math.pow(2, 28);
var ln2 = Math.pow(2, 35);
var un2 = Math.pow(2, 42);
var dn2 = Math.pow(2, 49);
var gn2 = Math.pow(2, 56);
var pn2 = Math.pow(2, 63);
var yn2 = function(r2) {
  return r2 < on2 ? 1 : r2 < an2 ? 2 : r2 < cn2 ? 3 : r2 < hn2 ? 4 : r2 < ln2 ? 5 : r2 < un2 ? 6 : r2 < dn2 ? 7 : r2 < gn2 ? 8 : r2 < pn2 ? 9 : 10;
};
var bn2 = { encode: Qr2, decode: rn2, encodingLength: yn2 };
var hi = bn2;
var li2 = (r2, e, t = 0) => (hi.encode(r2, e, t), e);
var ui = (r2) => hi.encodingLength(r2);
var Ke2 = (r2, e) => {
  const t = e.byteLength, i3 = ui(r2), s = i3 + ui(t), n3 = new Uint8Array(s + t);
  return li2(r2, n3, 0), li2(t, n3, i3), n3.set(e, s), new mn2(r2, t, e, n3);
};
var mn2 = class {
  constructor(e, t, i3, s) {
    this.code = e, this.size = t, this.digest = i3, this.bytes = s;
  }
};
var di = ({ name: r2, code: e, encode: t }) => new fn2(r2, e, t);
var fn2 = class {
  constructor(e, t, i3) {
    this.name = e, this.code = t, this.encode = i3;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? Ke2(this.code, t) : t.then((i3) => Ke2(this.code, i3));
    } else throw Error("Unknown type, must be binary type");
  }
};
var gi2 = (r2) => async (e) => new Uint8Array(await crypto.subtle.digest(r2, e));
var Dn = di({ name: "sha2-256", code: 18, encode: gi2("SHA-256") });
var vn = di({ name: "sha2-512", code: 19, encode: gi2("SHA-512") });
var wn2 = Object.freeze({ __proto__: null, sha256: Dn, sha512: vn });
var pi = 0;
var _n2 = "identity";
var yi2 = si2;
var En2 = (r2) => Ke2(pi, yi2(r2));
var In = { code: pi, name: _n2, encode: yi2, digest: En2 };
var Tn2 = Object.freeze({ __proto__: null, identity: In });
new TextEncoder(), new TextDecoder();
var bi2 = { ...br2, ...fr2, ...vr2, ..._r2, ...Tr2, ...zr2, ...jr2, ...Mr2, ...Gr2, ...Zr2 };
({ ...wn2, ...Tn2 });
function Cn2(r2 = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? globalThis.Buffer.allocUnsafe(r2) : new Uint8Array(r2);
}
function mi2(r2, e, t, i3) {
  return { name: r2, prefix: e, encoder: { name: r2, prefix: e, encode: t }, decoder: { decode: i3 } };
}
var fi2 = mi2("utf8", "u", (r2) => "u" + new TextDecoder("utf8").decode(r2), (r2) => new TextEncoder().encode(r2.substring(1)));
var Be = mi2("ascii", "a", (r2) => {
  let e = "a";
  for (let t = 0; t < r2.length; t++) e += String.fromCharCode(r2[t]);
  return e;
}, (r2) => {
  r2 = r2.substring(1);
  const e = Cn2(r2.length);
  for (let t = 0; t < r2.length; t++) e[t] = r2.charCodeAt(t);
  return e;
});
var Pn2 = { utf8: fi2, "utf-8": fi2, hex: bi2.base16, latin1: Be, ascii: Be, binary: Be, ...bi2 };
function Sn2(r2, e = "utf8") {
  const t = Pn2[e];
  if (!t) throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(r2, "utf8") : t.decoder.decode(`${t.prefix}${r2}`);
}
var On2 = Object.defineProperty;
var Rn2 = (r2, e, t) => e in r2 ? On2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var W = (r2, e, t) => Rn2(r2, typeof e != "symbol" ? e + "" : e, t);
var Di2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, W(this, "keychain", /* @__PURE__ */ new Map()), W(this, "name", Pt2), W(this, "version", St2), W(this, "initialized", false), W(this, "storagePrefix", B), W(this, "init", async () => {
      if (!this.initialized) {
        const i3 = await this.getKeyChain();
        typeof i3 < "u" && (this.keychain = i3), this.initialized = true;
      }
    }), W(this, "has", (i3) => (this.isInitialized(), this.keychain.has(i3))), W(this, "set", async (i3, s) => {
      this.isInitialized(), this.keychain.set(i3, s), await this.persist();
    }), W(this, "get", (i3) => {
      this.isInitialized();
      const s = this.keychain.get(i3);
      if (typeof s > "u") {
        const { message: n3 } = ht("NO_MATCHING_KEY", `${this.name}: ${i3}`);
        throw new Error(n3);
      }
      return s;
    }), W(this, "del", async (i3) => {
      this.isInitialized(), this.keychain.delete(i3), await this.persist();
    }), this.core = e, this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, fi(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? li(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var An = Object.defineProperty;
var xn2 = (r2, e, t) => e in r2 ? An(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var S2 = (r2, e, t) => xn2(r2, typeof e != "symbol" ? e + "" : e, t);
var vi2 = class {
  constructor(e, t, i3) {
    this.core = e, this.logger = t, S2(this, "name", Tt2), S2(this, "keychain"), S2(this, "randomSessionIdentifier", jc()), S2(this, "initialized", false), S2(this, "init", async () => {
      this.initialized || (await this.keychain.init(), this.initialized = true);
    }), S2(this, "hasKeys", (s) => (this.isInitialized(), this.keychain.has(s))), S2(this, "getClientId", async () => {
      this.isInitialized();
      const s = await this.getClientSeed(), n3 = Po(s);
      return Qe(n3.publicKey);
    }), S2(this, "generateKeyPair", () => {
      this.isInitialized();
      const s = Lc();
      return this.setPrivateKey(s.publicKey, s.privateKey);
    }), S2(this, "signJWT", async (s) => {
      this.isInitialized();
      const n3 = await this.getClientSeed(), o2 = Po(n3), a2 = this.randomSessionIdentifier, c3 = Ct2;
      return await Qo(a2, s, c3, o2);
    }), S2(this, "generateSharedKey", (s, n3, o2) => {
      this.isInitialized();
      const a2 = this.getPrivateKey(s), c3 = Cc(a2, n3);
      return this.setSymKey(c3, o2);
    }), S2(this, "setSymKey", async (s, n3) => {
      this.isInitialized();
      const o2 = n3 || Pc(s);
      return await this.keychain.set(o2, s), o2;
    }), S2(this, "deleteKeyPair", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), S2(this, "deleteSymKey", async (s) => {
      this.isInitialized(), await this.keychain.del(s);
    }), S2(this, "encode", async (s, n3, o2) => {
      this.isInitialized();
      const a2 = oo(o2), c3 = safeJsonStringify(n3);
      if (Fc(a2)) return Dc(c3, o2 == null ? void 0 : o2.encoding);
      if (Kc(a2)) {
        const g = a2.senderPublicKey, _2 = a2.receiverPublicKey;
        s = await this.generateSharedKey(g, _2);
      }
      const h4 = this.getSymKey(s), { type: l4, senderPublicKey: d3 } = a2;
      return Vc({ type: l4, symKey: h4, message: c3, senderPublicKey: d3, encoding: o2 == null ? void 0 : o2.encoding });
    }), S2(this, "decode", async (s, n3, o2) => {
      this.isInitialized();
      const a2 = qc(n3, o2);
      if (Fc(a2)) {
        const c3 = Hc(n3, o2 == null ? void 0 : o2.encoding);
        return safeJsonParse(c3);
      }
      if (Kc(a2)) {
        const c3 = a2.receiverPublicKey, h4 = a2.senderPublicKey;
        s = await this.generateSharedKey(c3, h4);
      }
      try {
        const c3 = this.getSymKey(s), h4 = Mc({ symKey: c3, encoded: n3, encoding: o2 == null ? void 0 : o2.encoding });
        return safeJsonParse(h4);
      } catch (c3) {
        this.logger.error(`Failed to decode message from topic: '${s}', clientId: '${await this.getClientId()}'`), this.logger.error(c3);
      }
    }), S2(this, "getPayloadType", (s, n3 = qt) => {
      const o2 = Se({ encoded: s, encoding: n3 });
      return Bt(o2.type);
    }), S2(this, "getPayloadSenderPublicKey", (s, n3 = qt) => {
      const o2 = Se({ encoded: s, encoding: n3 });
      return o2.senderPublicKey ? toString(o2.senderPublicKey, G) : void 0;
    }), this.core = e, this.logger = E(t, this.name), this.keychain = i3 || new Di2(this.core, this.logger);
  }
  get context() {
    return y(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(ke2);
    } catch {
      e = jc(), await this.keychain.set(ke2, e);
    }
    return Sn2(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Nn = Object.defineProperty;
var $n2 = Object.defineProperties;
var zn2 = Object.getOwnPropertyDescriptors;
var wi2 = Object.getOwnPropertySymbols;
var Ln = Object.prototype.hasOwnProperty;
var kn2 = Object.prototype.propertyIsEnumerable;
var Ve2 = (r2, e, t) => e in r2 ? Nn(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var jn2 = (r2, e) => {
  for (var t in e || (e = {})) Ln.call(e, t) && Ve2(r2, t, e[t]);
  if (wi2) for (var t of wi2(e)) kn2.call(e, t) && Ve2(r2, t, e[t]);
  return r2;
};
var Un = (r2, e) => $n2(r2, zn2(e));
var k2 = (r2, e, t) => Ve2(r2, typeof e != "symbol" ? e + "" : e, t);
var _i2 = class extends y2 {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, k2(this, "messages", /* @__PURE__ */ new Map()), k2(this, "messagesWithoutClientAck", /* @__PURE__ */ new Map()), k2(this, "name", Ot2), k2(this, "version", Rt2), k2(this, "initialized", false), k2(this, "storagePrefix", B), k2(this, "init", async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const i3 = await this.getRelayerMessages();
          typeof i3 < "u" && (this.messages = i3);
          const s = await this.getRelayerMessagesWithoutClientAck();
          typeof s < "u" && (this.messagesWithoutClientAck = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (i3) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(i3);
        } finally {
          this.initialized = true;
        }
      }
    }), k2(this, "set", async (i3, s, n3) => {
      this.isInitialized();
      const o2 = kc(s);
      let a2 = this.messages.get(i3);
      if (typeof a2 > "u" && (a2 = {}), typeof a2[o2] < "u") return o2;
      if (a2[o2] = s, this.messages.set(i3, a2), n3 === le2.inbound) {
        const c3 = this.messagesWithoutClientAck.get(i3) || {};
        this.messagesWithoutClientAck.set(i3, Un(jn2({}, c3), { [o2]: s }));
      }
      return await this.persist(), o2;
    }), k2(this, "get", (i3) => {
      this.isInitialized();
      let s = this.messages.get(i3);
      return typeof s > "u" && (s = {}), s;
    }), k2(this, "getWithoutAck", (i3) => {
      this.isInitialized();
      const s = {};
      for (const n3 of i3) {
        const o2 = this.messagesWithoutClientAck.get(n3) || {};
        s[n3] = Object.values(o2);
      }
      return s;
    }), k2(this, "has", (i3, s) => {
      this.isInitialized();
      const n3 = this.get(i3), o2 = kc(s);
      return typeof n3[o2] < "u";
    }), k2(this, "ack", async (i3, s) => {
      this.isInitialized();
      const n3 = this.messagesWithoutClientAck.get(i3);
      if (typeof n3 > "u") return;
      const o2 = kc(s);
      delete n3[o2], Object.keys(n3).length === 0 ? this.messagesWithoutClientAck.delete(i3) : this.messagesWithoutClientAck.set(i3, n3), await this.persist();
    }), k2(this, "del", async (i3) => {
      this.isInitialized(), this.messages.delete(i3), this.messagesWithoutClientAck.delete(i3), await this.persist();
    }), this.logger = E(e, this.name), this.core = t;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get storageKeyWithoutClientAck() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name + "_withoutClientAck";
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, fi(e));
  }
  async setRelayerMessagesWithoutClientAck(e) {
    await this.core.storage.setItem(this.storageKeyWithoutClientAck, fi(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? li(e) : void 0;
  }
  async getRelayerMessagesWithoutClientAck() {
    const e = await this.core.storage.getItem(this.storageKeyWithoutClientAck);
    return typeof e < "u" ? li(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages), await this.setRelayerMessagesWithoutClientAck(this.messagesWithoutClientAck);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Fn2 = Object.defineProperty;
var Mn2 = Object.defineProperties;
var Kn2 = Object.getOwnPropertyDescriptors;
var Ei2 = Object.getOwnPropertySymbols;
var Bn = Object.prototype.hasOwnProperty;
var Vn2 = Object.prototype.propertyIsEnumerable;
var qe2 = (r2, e, t) => e in r2 ? Fn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Ie2 = (r2, e) => {
  for (var t in e || (e = {})) Bn.call(e, t) && qe2(r2, t, e[t]);
  if (Ei2) for (var t of Ei2(e)) Vn2.call(e, t) && qe2(r2, t, e[t]);
  return r2;
};
var Ge2 = (r2, e) => Mn2(r2, Kn2(e));
var V2 = (r2, e, t) => qe2(r2, typeof e != "symbol" ? e + "" : e, t);
var qn = class extends m {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, V2(this, "events", new import_events3.EventEmitter()), V2(this, "name", At2), V2(this, "queue", /* @__PURE__ */ new Map()), V2(this, "publishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), V2(this, "initialPublishTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), V2(this, "needsTransportRestart", false), V2(this, "publish", async (i3, s, n3) => {
      var o2;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: i3, message: s, opts: n3 } });
      const a2 = (n3 == null ? void 0 : n3.ttl) || je2, c3 = Zc(n3), h4 = (n3 == null ? void 0 : n3.prompt) || false, l4 = (n3 == null ? void 0 : n3.tag) || 0, d3 = (n3 == null ? void 0 : n3.id) || getBigIntRpcId().toString(), g = { topic: i3, message: s, opts: { ttl: a2, relay: c3, prompt: h4, tag: l4, id: d3, attestation: n3 == null ? void 0 : n3.attestation, tvf: n3 == null ? void 0 : n3.tvf } }, _2 = `Failed to publish payload, please try again. id:${d3} tag:${l4}`;
      try {
        const u3 = new Promise(async (b5) => {
          const x2 = ({ id: D3 }) => {
            g.opts.id === D3 && (this.removeRequestFromQueue(D3), this.relayer.events.removeListener(C2.publish, x2), b5(g));
          };
          this.relayer.events.on(C2.publish, x2);
          const I4 = yi(new Promise((D3, j3) => {
            this.rpcPublish({ topic: i3, message: s, ttl: a2, prompt: h4, tag: l4, id: d3, attestation: n3 == null ? void 0 : n3.attestation, tvf: n3 == null ? void 0 : n3.tvf }).then(D3).catch((T3) => {
              this.logger.warn(T3, T3 == null ? void 0 : T3.message), j3(T3);
            });
          }), this.initialPublishTimeout, `Failed initial publish, retrying.... id:${d3} tag:${l4}`);
          try {
            await I4, this.events.removeListener(C2.publish, x2);
          } catch (D3) {
            this.queue.set(d3, Ge2(Ie2({}, g), { attempt: 1 })), this.logger.warn(D3, D3 == null ? void 0 : D3.message);
          }
        });
        this.logger.trace({ type: "method", method: "publish", params: { id: d3, topic: i3, message: s, opts: n3 } }), await yi(u3, this.publishTimeout, _2);
      } catch (u3) {
        if (this.logger.debug("Failed to Publish Payload"), this.logger.error(u3), (o2 = n3 == null ? void 0 : n3.internal) != null && o2.throwOnFailedPublish) throw u3;
      } finally {
        this.queue.delete(d3);
      }
    }), V2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), V2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), V2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), V2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.relayer = e, this.logger = E(t, this.name), this.registerEventListeners();
  }
  get context() {
    return y(this.logger);
  }
  async rpcPublish(e) {
    var t, i3, s, n3;
    const { topic: o2, message: a2, ttl: c3 = je2, prompt: h4, tag: l4, id: d3, attestation: g, tvf: _2 } = e, u3 = { method: Yc(Zc().protocol).publish, params: Ie2({ topic: o2, message: a2, ttl: c3, prompt: h4, tag: l4, attestation: g }, _2), id: d3 };
    Et((t = u3.params) == null ? void 0 : t.prompt) && ((i3 = u3.params) == null || delete i3.prompt), Et((s = u3.params) == null ? void 0 : s.tag) && ((n3 = u3.params) == null || delete n3.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: u3 });
    const b5 = await this.relayer.request(u3);
    return this.relayer.events.emit(C2.publish, e), this.logger.debug("Successfully Published Payload"), b5;
  }
  removeRequestFromQueue(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e, t) => {
      const i3 = e.attempt + 1;
      this.queue.set(t, Ge2(Ie2({}, e), { attempt: i3 }));
      const { topic: s, message: n3, opts: o2, attestation: a2 } = e;
      this.logger.warn({}, `Publisher: queue->publishing: ${e.opts.id}, tag: ${e.opts.tag}, attempt: ${i3}`), await this.rpcPublish(Ge2(Ie2({}, e), { topic: s, message: n3, ttl: o2.ttl, prompt: o2.prompt, tag: o2.tag, id: o2.id, attestation: a2, tvf: o2.tvf })), this.logger.warn({}, `Publisher: queue->published: ${e.opts.id}`);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(r.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = false, this.relayer.events.emit(C2.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(C2.message_ack, (e) => {
      this.removeRequestFromQueue(e.id.toString());
    });
  }
};
var Gn2 = Object.defineProperty;
var Wn2 = (r2, e, t) => e in r2 ? Gn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ne2 = (r2, e, t) => Wn2(r2, typeof e != "symbol" ? e + "" : e, t);
var Hn = class {
  constructor() {
    ne2(this, "map", /* @__PURE__ */ new Map()), ne2(this, "set", (e, t) => {
      const i3 = this.get(e);
      this.exists(e, t) || this.map.set(e, [...i3, t]);
    }), ne2(this, "get", (e) => this.map.get(e) || []), ne2(this, "exists", (e, t) => this.get(e).includes(t)), ne2(this, "delete", (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e)) return;
      const i3 = this.get(e);
      if (!this.exists(e, t)) return;
      const s = i3.filter((n3) => n3 !== t);
      if (!s.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, s);
    }), ne2(this, "clear", () => {
      this.map.clear();
    });
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var Yn2 = Object.defineProperty;
var Jn2 = Object.defineProperties;
var Xn2 = Object.getOwnPropertyDescriptors;
var Ii2 = Object.getOwnPropertySymbols;
var Zn2 = Object.prototype.hasOwnProperty;
var Qn2 = Object.prototype.propertyIsEnumerable;
var We2 = (r2, e, t) => e in r2 ? Yn2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var ge2 = (r2, e) => {
  for (var t in e || (e = {})) Zn2.call(e, t) && We2(r2, t, e[t]);
  if (Ii2) for (var t of Ii2(e)) Qn2.call(e, t) && We2(r2, t, e[t]);
  return r2;
};
var He2 = (r2, e) => Jn2(r2, Xn2(e));
var f5 = (r2, e, t) => We2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ti2 = class extends P {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, f5(this, "subscriptions", /* @__PURE__ */ new Map()), f5(this, "topicMap", new Hn()), f5(this, "events", new import_events3.EventEmitter()), f5(this, "name", Ut), f5(this, "version", Ft2), f5(this, "pending", /* @__PURE__ */ new Map()), f5(this, "cached", []), f5(this, "initialized", false), f5(this, "storagePrefix", B), f5(this, "subscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_MINUTE)), f5(this, "initialSubscribeTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), f5(this, "clientId"), f5(this, "batchSubscribeTopicsLimit", 500), f5(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), await this.restore()), this.initialized = true;
    }), f5(this, "subscribe", async (i3, s) => {
      this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } });
      try {
        const n3 = Zc(s), o2 = { topic: i3, relay: n3, transportType: s == null ? void 0 : s.transportType };
        this.pending.set(i3, o2);
        const a2 = await this.rpcSubscribe(i3, n3, s);
        return typeof a2 == "string" && (this.onSubscribe(a2, o2), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: i3, opts: s } })), a2;
      } catch (n3) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n3), n3;
      }
    }), f5(this, "unsubscribe", async (i3, s) => {
      this.isInitialized(), typeof (s == null ? void 0 : s.id) < "u" ? await this.unsubscribeById(i3, s.id, s) : await this.unsubscribeByTopic(i3, s);
    }), f5(this, "isSubscribed", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3));
    })), f5(this, "isKnownTopic", (i3) => new Promise((s) => {
      s(this.topicMap.topics.includes(i3) || this.pending.has(i3) || this.cached.some((n3) => n3.topic === i3));
    })), f5(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), f5(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), f5(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), f5(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), f5(this, "start", async () => {
      await this.onConnect();
    }), f5(this, "stop", async () => {
      await this.onDisconnect();
    }), f5(this, "restart", async () => {
      await this.restore(), await this.onRestart();
    }), f5(this, "checkPending", async () => {
      if (this.pending.size === 0 && (!this.initialized || !this.relayer.connected)) return;
      const i3 = [];
      this.pending.forEach((s) => {
        i3.push(s);
      }), await this.batchSubscribe(i3);
    }), f5(this, "registerEventListeners", () => {
      this.relayer.core.heartbeat.on(r.pulse, async () => {
        await this.checkPending();
      }), this.events.on($.created, async (i3) => {
        const s = $.created;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      }), this.events.on($.deleted, async (i3) => {
        const s = $.deleted;
        this.logger.info(`Emitting ${s}`), this.logger.debug({ type: "event", event: s, data: i3 }), await this.persist();
      });
    }), this.relayer = e, this.logger = E(t, this.name), this.clientId = "";
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.relayer.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  get hasAnyTopics() {
    return this.topicMap.topics.length > 0 || this.pending.size > 0 || this.cached.length > 0 || this.subscriptions.size > 0;
  }
  hasSubscription(e, t) {
    let i3 = false;
    try {
      i3 = this.getSubscription(e).topic === t;
    } catch {
    }
    return i3;
  }
  reset() {
    this.cached = [], this.initialized = true;
  }
  onDisable() {
    this.values.length > 0 && (this.cached = this.values), this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const i3 = this.topicMap.get(e);
    await Promise.all(i3.map(async (s) => await this.unsubscribeById(e, s, t)));
  }
  async unsubscribeById(e, t, i3) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    try {
      const s = Zc(i3);
      await this.restartToComplete({ topic: e, id: t, relay: s }), await this.rpcUnsubscribe(e, t, s);
      const n3 = Nt("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n3), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: i3 } });
    } catch (s) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(s), s;
    }
  }
  async rpcSubscribe(e, t, i3) {
    var s;
    (!i3 || (i3 == null ? void 0 : i3.transportType) === Q.relay) && await this.restartToComplete({ topic: e, id: e, relay: t });
    const n3 = { method: Yc(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: n3 });
    const o2 = (s = i3 == null ? void 0 : i3.internal) == null ? void 0 : s.throwOnFailedPublish;
    try {
      const a2 = await this.getSubscriptionId(e);
      if ((i3 == null ? void 0 : i3.transportType) === Q.link_mode) return setTimeout(() => {
        (this.relayer.connected || this.relayer.connecting) && this.relayer.request(n3).catch((l4) => this.logger.warn(l4));
      }, (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), a2;
      const c3 = new Promise(async (l4) => {
        const d3 = (g) => {
          g.topic === e && (this.events.removeListener($.created, d3), l4(g.id));
        };
        this.events.on($.created, d3);
        try {
          const g = await yi(new Promise((_2, u3) => {
            this.relayer.request(n3).catch((b5) => {
              this.logger.warn(b5, b5 == null ? void 0 : b5.message), u3(b5);
            }).then(_2);
          }), this.initialSubscribeTimeout, `Subscribing to ${e} failed, please try again`);
          this.events.removeListener($.created, d3), l4(g);
        } catch {
        }
      }), h4 = await yi(c3, this.subscribeTimeout, `Subscribing to ${e} failed, please try again`);
      if (!h4 && o2) throw new Error(`Subscribing to ${e} failed, please try again`);
      return h4 ? a2 : null;
    } catch (a2) {
      if (this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(C2.connection_stalled), o2) throw a2;
    }
    return null;
  }
  async rpcBatchSubscribe(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: Yc(t.protocol).batchSubscribe, params: { topics: e.map((s) => s.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    try {
      await await yi(new Promise((s) => {
        this.relayer.request(i3).catch((n3) => this.logger.warn(n3)).then(s);
      }), this.subscribeTimeout, "rpcBatchSubscribe failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
  }
  async rpcBatchFetchMessages(e) {
    if (!e.length) return;
    const t = e[0].relay, i3 = { method: Yc(t.protocol).batchFetchMessages, params: { topics: e.map((n3) => n3.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: i3 });
    let s;
    try {
      s = await await yi(new Promise((n3, o2) => {
        this.relayer.request(i3).catch((a2) => {
          this.logger.warn(a2), o2(a2);
        }).then(n3);
      }), this.subscribeTimeout, "rpcBatchFetchMessages failed, please try again");
    } catch {
      this.relayer.events.emit(C2.connection_stalled);
    }
    return s;
  }
  rpcUnsubscribe(e, t, i3) {
    const s = { method: Yc(i3.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s }), this.relayer.request(s);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, He2(ge2({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, ge2({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, i3) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, i3), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t);
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, ge2({}, t)), this.topicMap.set(t.topic, e), this.events.emit($.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: i3 } = ht("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const i3 = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(i3.topic, e), this.events.emit($.deleted, He2(ge2({}, i3), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit($.sync);
  }
  async onRestart() {
    if (this.cached.length) {
      const e = [...this.cached], t = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let i3 = 0; i3 < t; i3++) {
        const s = e.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit($.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length) return;
      if (this.subscriptions.size) {
        const { message: t } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    e.length && (await this.rpcBatchSubscribe(e), this.onBatchSubscribe(await Promise.all(e.map(async (t) => He2(ge2({}, t), { id: await this.getSubscriptionId(t.topic) })))));
  }
  async batchFetchMessages(e) {
    if (!e.length) return;
    this.logger.trace(`Fetching batch messages for ${e.length} subscriptions`);
    const t = await this.rpcBatchFetchMessages(e);
    t && t.messages && (await Ni((0, import_time2.toMiliseconds)(import_time2.ONE_SECOND)), await this.relayer.handleBatchMessageEvents(t.messages));
  }
  async onConnect() {
    await this.restart(), this.reset();
  }
  onDisconnect() {
    this.onDisable();
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete(e) {
    !this.relayer.connected && !this.relayer.connecting && (this.cached.push(e), await this.relayer.transportOpen());
  }
  async getClientId() {
    return this.clientId || (this.clientId = await this.relayer.core.crypto.getClientId()), this.clientId;
  }
  async getSubscriptionId(e) {
    return kc(e + await this.getClientId());
  }
};
var eo2 = Object.defineProperty;
var Ci2 = Object.getOwnPropertySymbols;
var to2 = Object.prototype.hasOwnProperty;
var io2 = Object.prototype.propertyIsEnumerable;
var Ye2 = (r2, e, t) => e in r2 ? eo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Pi3 = (r2, e) => {
  for (var t in e || (e = {})) to2.call(e, t) && Ye2(r2, t, e[t]);
  if (Ci2) for (var t of Ci2(e)) io2.call(e, t) && Ye2(r2, t, e[t]);
  return r2;
};
var y3 = (r2, e, t) => Ye2(r2, typeof e != "symbol" ? e + "" : e, t);
var Si2 = class extends d {
  constructor(e) {
    super(e), y3(this, "protocol", "wc"), y3(this, "version", 2), y3(this, "core"), y3(this, "logger"), y3(this, "events", new import_events3.EventEmitter()), y3(this, "provider"), y3(this, "messages"), y3(this, "subscriber"), y3(this, "publisher"), y3(this, "name", $t2), y3(this, "transportExplicitlyClosed", false), y3(this, "initialized", false), y3(this, "connectionAttemptInProgress", false), y3(this, "relayUrl"), y3(this, "projectId"), y3(this, "packageName"), y3(this, "bundleId"), y3(this, "hasExperiencedNetworkDisruption", false), y3(this, "pingTimeout"), y3(this, "heartBeatTimeout", (0, import_time2.toMiliseconds)(import_time2.THIRTY_SECONDS + import_time2.FIVE_SECONDS)), y3(this, "reconnectTimeout"), y3(this, "connectPromise"), y3(this, "reconnectInProgress", false), y3(this, "requestsInFlight", []), y3(this, "connectTimeout", (0, import_time2.toMiliseconds)(import_time2.ONE_SECOND * 15)), y3(this, "request", async (t) => {
      var i3, s;
      this.logger.debug("Publishing Request Payload");
      const n3 = t.id || getBigIntRpcId().toString();
      await this.toEstablishConnection();
      try {
        this.logger.trace({ id: n3, method: t.method, topic: (i3 = t.params) == null ? void 0 : i3.topic }, "relayer.request - publishing...");
        const o2 = `${n3}:${((s = t.params) == null ? void 0 : s.tag) || ""}`;
        this.requestsInFlight.push(o2);
        const a2 = await this.provider.request(t);
        return this.requestsInFlight = this.requestsInFlight.filter((c3) => c3 !== o2), a2;
      } catch (o2) {
        throw this.logger.debug(`Failed to Publish Request: ${n3}`), o2;
      }
    }), y3(this, "resetPingTimeout", () => {
      _e() && (clearTimeout(this.pingTimeout), this.pingTimeout = setTimeout(() => {
        var t, i3, s, n3;
        try {
          this.logger.debug({}, "pingTimeout: Connection stalled, terminating..."), (n3 = (s = (i3 = (t = this.provider) == null ? void 0 : t.connection) == null ? void 0 : i3.socket) == null ? void 0 : s.terminate) == null || n3.call(s);
        } catch (o2) {
          this.logger.warn(o2, o2 == null ? void 0 : o2.message);
        }
      }, this.heartBeatTimeout));
    }), y3(this, "onPayloadHandler", (t) => {
      this.onProviderPayload(t), this.resetPingTimeout();
    }), y3(this, "onConnectHandler", () => {
      this.logger.warn({}, "Relayer connected 🛜"), this.startPingTimeout(), this.events.emit(C2.connect);
    }), y3(this, "onDisconnectHandler", () => {
      this.logger.warn({}, "Relayer disconnected 🛑"), this.requestsInFlight = [], this.onProviderDisconnect();
    }), y3(this, "onProviderErrorHandler", (t) => {
      this.logger.fatal(`Fatal socket error: ${t.message}`), this.events.emit(C2.error, t), this.logger.fatal("Fatal socket error received, closing transport"), this.transportClose();
    }), y3(this, "registerProviderListeners", () => {
      this.provider.on(L.payload, this.onPayloadHandler), this.provider.on(L.connect, this.onConnectHandler), this.provider.on(L.disconnect, this.onDisconnectHandler), this.provider.on(L.error, this.onProviderErrorHandler);
    }), this.core = e.core, this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? E(e.logger, this.name) : (0, import_pino.default)(k({ level: e.logger || Nt2 })), this.messages = new _i2(this.logger, e.core), this.subscriber = new Ti2(this, this.logger), this.publisher = new qn(this, this.logger), this.relayUrl = (e == null ? void 0 : e.relayUrl) || Ue, this.projectId = e.projectId, ei() ? this.packageName = ri() : ni() && (this.bundleId = ri()), this.provider = {};
  }
  async init() {
    if (this.logger.trace("Initialized"), this.registerEventListeners(), await Promise.all([this.messages.init(), this.subscriber.init()]), this.initialized = true, this.subscriber.hasAnyTopics) try {
      await this.transportOpen();
    } catch (e) {
      this.logger.warn(e, e == null ? void 0 : e.message);
    }
  }
  get context() {
    return y(this.logger);
  }
  get connected() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 1 || false;
  }
  get connecting() {
    var e, t, i3;
    return ((i3 = (t = (e = this.provider) == null ? void 0 : e.connection) == null ? void 0 : t.socket) == null ? void 0 : i3.readyState) === 0 || this.connectPromise !== void 0 || false;
  }
  async publish(e, t, i3) {
    this.isInitialized(), await this.publisher.publish(e, t, i3), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now(), transportType: Q.relay }, le2.outbound);
  }
  async subscribe(e, t) {
    var i3, s, n3;
    this.isInitialized(), (!(t != null && t.transportType) || (t == null ? void 0 : t.transportType) === "relay") && await this.toEstablishConnection();
    const o2 = typeof ((i3 = t == null ? void 0 : t.internal) == null ? void 0 : i3.throwOnFailedPublish) > "u" ? true : (s = t == null ? void 0 : t.internal) == null ? void 0 : s.throwOnFailedPublish;
    let a2 = ((n3 = this.subscriber.topicMap.get(e)) == null ? void 0 : n3[0]) || "", c3;
    const h4 = (l4) => {
      l4.topic === e && (this.subscriber.off($.created, h4), c3());
    };
    return await Promise.all([new Promise((l4) => {
      c3 = l4, this.subscriber.on($.created, h4);
    }), new Promise(async (l4, d3) => {
      a2 = await this.subscriber.subscribe(e, Pi3({ internal: { throwOnFailedPublish: o2 } }, t)).catch((g) => {
        o2 && d3(g);
      }) || a2, l4();
    })]), a2;
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportDisconnect() {
    this.provider.disconnect && (this.hasExperiencedNetworkDisruption || this.connected) ? await yi(this.provider.disconnect(), 2e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.onProviderDisconnect();
  }
  async transportClose() {
    this.transportExplicitlyClosed = true, await this.transportDisconnect();
  }
  async transportOpen(e) {
    if (!this.subscriber.hasAnyTopics) {
      this.logger.warn("Starting WS connection skipped because the client has no topics to work with.");
      return;
    }
    if (this.connectPromise ? (this.logger.debug({}, "Waiting for existing connection attempt to resolve..."), await this.connectPromise, this.logger.debug({}, "Existing connection attempt resolved")) : (this.connectPromise = new Promise(async (t, i3) => {
      await this.connect(e).then(t).catch(i3).finally(() => {
        this.connectPromise = void 0;
      });
    }), await this.connectPromise), !this.connected) throw new Error(`Couldn't establish socket connection to the relay server: ${this.relayUrl}`);
  }
  async restartTransport(e) {
    this.logger.debug({}, "Restarting transport..."), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.confirmOnlineStateOrThrow(), await this.transportClose(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await Na()) throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  async handleBatchMessageEvents(e) {
    if ((e == null ? void 0 : e.length) === 0) {
      this.logger.trace("Batch message events is empty. Ignoring...");
      return;
    }
    const t = e.sort((i3, s) => i3.publishedAt - s.publishedAt);
    this.logger.debug(`Batch of ${t.length} message events sorted`);
    for (const i3 of t) try {
      await this.onMessageEvent(i3);
    } catch (s) {
      this.logger.warn(s, "Error while processing batch message event: " + (s == null ? void 0 : s.message));
    }
    this.logger.trace(`Batch of ${t.length} message events processed`);
  }
  async onLinkMessageEvent(e, t) {
    const { topic: i3 } = e;
    if (!t.sessionExists) {
      const s = Ei(import_time2.FIVE_MINUTES), n3 = { topic: i3, expiry: s, relay: { protocol: "irn" }, active: false };
      await this.core.pairing.pairings.set(i3, n3);
    }
    this.events.emit(C2.message, e), await this.recordMessageEvent(e, le2.inbound);
  }
  async connect(e) {
    await this.confirmOnlineStateOrThrow(), e && e !== this.relayUrl && (this.relayUrl = e, await this.transportDisconnect()), this.connectionAttemptInProgress = true, this.transportExplicitlyClosed = false;
    let t = 1;
    for (; t < 6; ) {
      try {
        if (this.transportExplicitlyClosed) break;
        this.logger.debug({}, `Connecting to ${this.relayUrl}, attempt: ${t}...`), await this.createProvider(), await new Promise(async (i3, s) => {
          const n3 = () => {
            s(new Error("Connection interrupted while trying to subscribe"));
          };
          this.provider.once(L.disconnect, n3), await yi(new Promise((o2, a2) => {
            this.provider.connect().then(o2).catch(a2);
          }), this.connectTimeout, `Socket stalled when trying to connect to ${this.relayUrl}`).catch((o2) => {
            s(o2);
          }).finally(() => {
            this.provider.off(L.disconnect, n3), clearTimeout(this.reconnectTimeout);
          }), await new Promise(async (o2, a2) => {
            const c3 = () => {
              a2(new Error("Connection interrupted while trying to subscribe"));
            };
            this.provider.once(L.disconnect, c3), await this.subscriber.start().then(o2).catch(a2).finally(() => {
              this.provider.off(L.disconnect, c3);
            });
          }), this.hasExperiencedNetworkDisruption = false, i3();
        });
      } catch (i3) {
        await this.subscriber.stop();
        const s = i3;
        this.logger.warn({}, s.message), this.hasExperiencedNetworkDisruption = true;
      } finally {
        this.connectionAttemptInProgress = false;
      }
      if (this.connected) {
        this.logger.debug({}, `Connected to ${this.relayUrl} successfully on attempt: ${t}`);
        break;
      }
      await new Promise((i3) => setTimeout(i3, (0, import_time2.toMiliseconds)(t * 1))), t++;
    }
  }
  startPingTimeout() {
    var e, t, i3, s, n3;
    if (_e()) try {
      (t = (e = this.provider) == null ? void 0 : e.connection) != null && t.socket && ((n3 = (s = (i3 = this.provider) == null ? void 0 : i3.connection) == null ? void 0 : s.socket) == null || n3.on("ping", () => {
        this.resetPingTimeout();
      })), this.resetPingTimeout();
    } catch (o2) {
      this.logger.warn(o2, o2 == null ? void 0 : o2.message);
    }
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new o(new f(si({ sdkVersion: _e2, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: true, bundleId: this.bundleId, packageName: this.packageName }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e, t) {
    const { topic: i3, message: s } = e;
    await this.messages.set(i3, s, t);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: i3 } = e;
    if (!i3 || i3.length === 0) return this.logger.warn(`Ignoring invalid/empty message: ${i3}`), true;
    if (!await this.subscriber.isKnownTopic(t)) return this.logger.warn(`Ignoring message for unknown topic ${t}`), true;
    const s = this.messages.has(t, i3);
    return s && this.logger.warn(`Ignoring duplicate message: ${i3}`), s;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), isJsonRpcRequest(e)) {
      if (!e.method.endsWith(zt)) return;
      const t = e.params, { topic: i3, message: s, publishedAt: n3, attestation: o2 } = t.data, a2 = { topic: i3, message: s, publishedAt: n3, transportType: Q.relay, attestation: o2 };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(Pi3({ type: "event", event: t.id }, a2)), this.events.emit(t.id, a2), await this.acknowledgePayload(e), await this.onMessageEvent(a2);
    } else isJsonRpcResponse(e) && this.events.emit(C2.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (await this.recordMessageEvent(e, le2.inbound), this.events.emit(C2.message, e));
  }
  async acknowledgePayload(e) {
    const t = formatJsonRpcResult(e.id, true);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(L.payload, this.onPayloadHandler), this.provider.off(L.connect, this.onConnectHandler), this.provider.off(L.disconnect, this.onDisconnectHandler), this.provider.off(L.error, this.onProviderErrorHandler), clearTimeout(this.pingTimeout);
  }
  async registerEventListeners() {
    let e = await Na();
    Ua(async (t) => {
      e !== t && (e = t, t ? await this.transportOpen().catch((i3) => this.logger.error(i3, i3 == null ? void 0 : i3.message)) : (this.hasExperiencedNetworkDisruption = true, await this.transportDisconnect(), this.transportExplicitlyClosed = false));
    }), this.core.heartbeat.on(r.pulse, async () => {
      if (!this.transportExplicitlyClosed && !this.connected && Ta()) try {
        await this.confirmOnlineStateOrThrow(), await this.transportOpen();
      } catch (t) {
        this.logger.warn(t, t == null ? void 0 : t.message);
      }
    });
  }
  async onProviderDisconnect() {
    clearTimeout(this.pingTimeout), this.events.emit(C2.disconnect), this.connectionAttemptInProgress = false, !this.reconnectInProgress && (this.reconnectInProgress = true, await this.subscriber.stop(), this.subscriber.hasAnyTopics && (this.transportExplicitlyClosed || (this.reconnectTimeout = setTimeout(async () => {
      await this.transportOpen().catch((e) => this.logger.error(e, e == null ? void 0 : e.message)), this.reconnectTimeout = void 0, this.reconnectInProgress = false;
    }, (0, import_time2.toMiliseconds)(Lt2)))));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectPromise) {
        await this.connectPromise;
        return;
      }
      await this.connect();
    }
  }
};
function so2() {
}
function Oi2(r2) {
  if (!r2 || typeof r2 != "object") return false;
  const e = Object.getPrototypeOf(r2);
  return e === null || e === Object.prototype || Object.getPrototypeOf(e) === null ? Object.prototype.toString.call(r2) === "[object Object]" : false;
}
function Ri2(r2) {
  return Object.getOwnPropertySymbols(r2).filter((e) => Object.prototype.propertyIsEnumerable.call(r2, e));
}
function Ai2(r2) {
  return r2 == null ? r2 === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(r2);
}
var ro2 = "[object RegExp]";
var no2 = "[object String]";
var oo2 = "[object Number]";
var ao2 = "[object Boolean]";
var xi2 = "[object Arguments]";
var co2 = "[object Symbol]";
var ho2 = "[object Date]";
var lo2 = "[object Map]";
var uo2 = "[object Set]";
var go2 = "[object Array]";
var po2 = "[object Function]";
var yo2 = "[object ArrayBuffer]";
var Je2 = "[object Object]";
var bo2 = "[object Error]";
var mo2 = "[object DataView]";
var fo2 = "[object Uint8Array]";
var Do = "[object Uint8ClampedArray]";
var vo2 = "[object Uint16Array]";
var wo2 = "[object Uint32Array]";
var _o2 = "[object BigUint64Array]";
var Eo2 = "[object Int8Array]";
var Io2 = "[object Int16Array]";
var To2 = "[object Int32Array]";
var Co2 = "[object BigInt64Array]";
var Po3 = "[object Float32Array]";
var So2 = "[object Float64Array]";
function Oo2(r2, e) {
  return r2 === e || Number.isNaN(r2) && Number.isNaN(e);
}
function Ro2(r2, e, t) {
  return pe2(r2, e, void 0, void 0, void 0, void 0, t);
}
function pe2(r2, e, t, i3, s, n3, o2) {
  const a2 = o2(r2, e, t, i3, s, n3);
  if (a2 !== void 0) return a2;
  if (typeof r2 == typeof e) switch (typeof r2) {
    case "bigint":
    case "string":
    case "boolean":
    case "symbol":
    case "undefined":
      return r2 === e;
    case "number":
      return r2 === e || Object.is(r2, e);
    case "function":
      return r2 === e;
    case "object":
      return ye2(r2, e, n3, o2);
  }
  return ye2(r2, e, n3, o2);
}
function ye2(r2, e, t, i3) {
  if (Object.is(r2, e)) return true;
  let s = Ai2(r2), n3 = Ai2(e);
  if (s === xi2 && (s = Je2), n3 === xi2 && (n3 = Je2), s !== n3) return false;
  switch (s) {
    case no2:
      return r2.toString() === e.toString();
    case oo2: {
      const c3 = r2.valueOf(), h4 = e.valueOf();
      return Oo2(c3, h4);
    }
    case ao2:
    case ho2:
    case co2:
      return Object.is(r2.valueOf(), e.valueOf());
    case ro2:
      return r2.source === e.source && r2.flags === e.flags;
    case po2:
      return r2 === e;
  }
  t = t ?? /* @__PURE__ */ new Map();
  const o2 = t.get(r2), a2 = t.get(e);
  if (o2 != null && a2 != null) return o2 === e;
  t.set(r2, e), t.set(e, r2);
  try {
    switch (s) {
      case lo2: {
        if (r2.size !== e.size) return false;
        for (const [c3, h4] of r2.entries()) if (!e.has(c3) || !pe2(h4, e.get(c3), c3, r2, e, t, i3)) return false;
        return true;
      }
      case uo2: {
        if (r2.size !== e.size) return false;
        const c3 = Array.from(r2.values()), h4 = Array.from(e.values());
        for (let l4 = 0; l4 < c3.length; l4++) {
          const d3 = c3[l4], g = h4.findIndex((_2) => pe2(d3, _2, void 0, r2, e, t, i3));
          if (g === -1) return false;
          h4.splice(g, 1);
        }
        return true;
      }
      case go2:
      case fo2:
      case Do:
      case vo2:
      case wo2:
      case _o2:
      case Eo2:
      case Io2:
      case To2:
      case Co2:
      case Po3:
      case So2: {
        if (typeof Buffer < "u" && Buffer.isBuffer(r2) !== Buffer.isBuffer(e) || r2.length !== e.length) return false;
        for (let c3 = 0; c3 < r2.length; c3++) if (!pe2(r2[c3], e[c3], c3, r2, e, t, i3)) return false;
        return true;
      }
      case yo2:
        return r2.byteLength !== e.byteLength ? false : ye2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case mo2:
        return r2.byteLength !== e.byteLength || r2.byteOffset !== e.byteOffset ? false : ye2(new Uint8Array(r2), new Uint8Array(e), t, i3);
      case bo2:
        return r2.name === e.name && r2.message === e.message;
      case Je2: {
        if (!(ye2(r2.constructor, e.constructor, t, i3) || Oi2(r2) && Oi2(e))) return false;
        const h4 = [...Object.keys(r2), ...Ri2(r2)], l4 = [...Object.keys(e), ...Ri2(e)];
        if (h4.length !== l4.length) return false;
        for (let d3 = 0; d3 < h4.length; d3++) {
          const g = h4[d3], _2 = r2[g];
          if (!Object.hasOwn(e, g)) return false;
          const u3 = e[g];
          if (!pe2(_2, u3, g, r2, e, t, i3)) return false;
        }
        return true;
      }
      default:
        return false;
    }
  } finally {
    t.delete(r2), t.delete(e);
  }
}
function Ao2(r2, e) {
  return Ro2(r2, e, so2);
}
var xo2 = Object.defineProperty;
var Ni2 = Object.getOwnPropertySymbols;
var No2 = Object.prototype.hasOwnProperty;
var $o2 = Object.prototype.propertyIsEnumerable;
var Xe2 = (r2, e, t) => e in r2 ? xo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var $i2 = (r2, e) => {
  for (var t in e || (e = {})) No2.call(e, t) && Xe2(r2, t, e[t]);
  if (Ni2) for (var t of Ni2(e)) $o2.call(e, t) && Xe2(r2, t, e[t]);
  return r2;
};
var z = (r2, e, t) => Xe2(r2, typeof e != "symbol" ? e + "" : e, t);
var zi2 = class extends f4 {
  constructor(e, t, i3, s = B, n3 = void 0) {
    super(e, t, i3, s), this.core = e, this.logger = t, this.name = i3, z(this, "map", /* @__PURE__ */ new Map()), z(this, "version", kt2), z(this, "cached", []), z(this, "initialized", false), z(this, "getKey"), z(this, "storagePrefix", B), z(this, "recentlyDeleted", []), z(this, "recentlyDeletedLimit", 200), z(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o2) => {
        this.getKey && o2 !== null && !Et(o2) ? this.map.set(this.getKey(o2), o2) : la(o2) ? this.map.set(o2.id, o2) : da(o2) && this.map.set(o2.topic, o2);
      }), this.cached = [], this.initialized = true);
    }), z(this, "set", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) ? await this.update(o2, a2) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o2, value: a2 }), this.map.set(o2, a2), await this.persist());
    }), z(this, "get", (o2) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o2 }), this.getData(o2))), z(this, "getAll", (o2) => (this.isInitialized(), o2 ? this.values.filter((a2) => Object.keys(o2).every((c3) => Ao2(a2[c3], o2[c3]))) : this.values)), z(this, "update", async (o2, a2) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o2, update: a2 });
      const c3 = $i2($i2({}, this.getData(o2)), a2);
      this.map.set(o2, c3), await this.persist();
    }), z(this, "delete", async (o2, a2) => {
      this.isInitialized(), this.map.has(o2) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o2, reason: a2 }), this.map.delete(o2), this.addToRecentlyDeleted(o2), await this.persist());
    }), this.logger = E(t, this.name), this.storagePrefix = s, this.getKey = n3;
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  addToRecentlyDeleted(e) {
    this.recentlyDeleted.push(e), this.recentlyDeleted.length >= this.recentlyDeletedLimit && this.recentlyDeleted.splice(0, this.recentlyDeletedLimit / 2);
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      if (this.recentlyDeleted.includes(e)) {
        const { message: s } = ht("MISSING_OR_INVALID", `Record was recently deleted - ${this.name}: ${e}`);
        throw this.logger.error(s), new Error(s);
      }
      const { message: i3 } = ht("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(i3), new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length) return;
      if (this.map.size) {
        const { message: t } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var zo = Object.defineProperty;
var Lo2 = (r2, e, t) => e in r2 ? zo(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var p2 = (r2, e, t) => Lo2(r2, typeof e != "symbol" ? e + "" : e, t);
var Li2 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, p2(this, "name", Mt2), p2(this, "version", Kt2), p2(this, "events", new import_events3.default()), p2(this, "pairings"), p2(this, "initialized", false), p2(this, "storagePrefix", B), p2(this, "ignoredPayloadTypes", [Ft]), p2(this, "registeredMethods", []), p2(this, "init", async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = true, this.logger.trace("Initialized"));
    }), p2(this, "register", ({ methods: i3 }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...i3])];
    }), p2(this, "create", async (i3) => {
      this.isInitialized();
      const s = jc(), n3 = await this.core.crypto.setSymKey(s), o2 = Ei(import_time2.FIVE_MINUTES), a2 = { protocol: xt2 }, c3 = { topic: n3, expiry: o2, relay: a2, active: false, methods: i3 == null ? void 0 : i3.methods }, h4 = Wc({ protocol: this.core.protocol, version: this.core.version, topic: n3, symKey: s, relay: a2, expiryTimestamp: o2, methods: i3 == null ? void 0 : i3.methods });
      return this.events.emit(re2.create, c3), this.core.expirer.set(n3, o2), await this.pairings.set(n3, c3), await this.core.relayer.subscribe(n3, { transportType: i3 == null ? void 0 : i3.transportType }), { topic: n3, uri: h4 };
    }), p2(this, "pair", async (i3) => {
      this.isInitialized();
      const s = this.core.eventClient.createEvent({ properties: { topic: i3 == null ? void 0 : i3.uri, trace: [G2.pairing_started] } });
      this.isValidPair(i3, s);
      const { topic: n3, symKey: o2, relay: a2, expiryTimestamp: c3, methods: h4 } = Gc(i3.uri);
      s.props.properties.topic = n3, s.addTrace(G2.pairing_uri_validation_success), s.addTrace(G2.pairing_uri_not_expired);
      let l4;
      if (this.pairings.keys.includes(n3)) {
        if (l4 = this.pairings.get(n3), s.addTrace(G2.existing_pairing), l4.active) throw s.setError(Y2.active_pairing_already_exists), new Error(`Pairing already exists: ${n3}. Please try again with a new connection URI.`);
        s.addTrace(G2.pairing_not_expired);
      }
      const d3 = c3 || Ei(import_time2.FIVE_MINUTES), g = { topic: n3, relay: a2, expiry: d3, active: false, methods: h4 };
      this.core.expirer.set(n3, d3), await this.pairings.set(n3, g), s.addTrace(G2.store_new_pairing), i3.activatePairing && await this.activate({ topic: n3 }), this.events.emit(re2.create, g), s.addTrace(G2.emit_inactive_pairing), this.core.crypto.keychain.has(n3) || await this.core.crypto.setSymKey(o2, n3), s.addTrace(G2.subscribing_pairing_topic);
      try {
        await this.core.relayer.confirmOnlineStateOrThrow();
      } catch {
        s.setError(Y2.no_internet_connection);
      }
      try {
        await this.core.relayer.subscribe(n3, { relay: a2 });
      } catch (_2) {
        throw s.setError(Y2.subscribe_pairing_topic_failure), _2;
      }
      return s.addTrace(G2.subscribe_pairing_topic_success), g;
    }), p2(this, "activate", async ({ topic: i3 }) => {
      this.isInitialized();
      const s = Ei(import_time2.FIVE_MINUTES);
      this.core.expirer.set(i3, s), await this.pairings.update(i3, { active: true, expiry: s });
    }), p2(this, "ping", async (i3) => {
      this.isInitialized(), await this.isValidPing(i3), this.logger.warn("ping() is deprecated and will be removed in the next major release.");
      const { topic: s } = i3;
      if (this.pairings.keys.includes(s)) {
        const n3 = await this.sendRequest(s, "wc_pairingPing", {}), { done: o2, resolve: a2, reject: c3 } = gi();
        this.events.once(xi("pairing_ping", n3), ({ error: h4 }) => {
          h4 ? c3(h4) : a2();
        }), await o2();
      }
    }), p2(this, "updateExpiry", async ({ topic: i3, expiry: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { expiry: s });
    }), p2(this, "updateMetadata", async ({ topic: i3, metadata: s }) => {
      this.isInitialized(), await this.pairings.update(i3, { peerMetadata: s });
    }), p2(this, "getPairings", () => (this.isInitialized(), this.pairings.values)), p2(this, "disconnect", async (i3) => {
      this.isInitialized(), await this.isValidDisconnect(i3);
      const { topic: s } = i3;
      this.pairings.keys.includes(s) && (await this.sendRequest(s, "wc_pairingDelete", Nt("USER_DISCONNECTED")), await this.deletePairing(s));
    }), p2(this, "formatUriFromPairing", (i3) => {
      this.isInitialized();
      const { topic: s, relay: n3, expiry: o2, methods: a2 } = i3, c3 = this.core.crypto.keychain.get(s);
      return Wc({ protocol: this.core.protocol, version: this.core.version, topic: s, symKey: c3, relay: n3, expiryTimestamp: o2, methods: a2 });
    }), p2(this, "sendRequest", async (i3, s, n3) => {
      const o2 = formatJsonRpcRequest(s, n3), a2 = await this.core.crypto.encode(i3, o2), c3 = se2[s].req;
      return this.core.history.set(i3, o2), this.core.relayer.publish(i3, a2, c3), o2.id;
    }), p2(this, "sendResult", async (i3, s, n3) => {
      const o2 = formatJsonRpcResult(i3, n3), a2 = await this.core.crypto.encode(s, o2), c3 = (await this.core.history.get(s, i3)).request.method, h4 = se2[c3].res;
      await this.core.relayer.publish(s, a2, h4), await this.core.history.resolve(o2);
    }), p2(this, "sendError", async (i3, s, n3) => {
      const o2 = formatJsonRpcError(i3, n3), a2 = await this.core.crypto.encode(s, o2), c3 = (await this.core.history.get(s, i3)).request.method, h4 = se2[c3] ? se2[c3].res : se2.unregistered_method.res;
      await this.core.relayer.publish(s, a2, h4), await this.core.history.resolve(o2);
    }), p2(this, "deletePairing", async (i3, s) => {
      await this.core.relayer.unsubscribe(i3), await Promise.all([this.pairings.delete(i3, Nt("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(i3), s ? Promise.resolve() : this.core.expirer.del(i3)]);
    }), p2(this, "cleanup", async () => {
      const i3 = this.pairings.getAll().filter((s) => vi(s.expiry));
      await Promise.all(i3.map((s) => this.deletePairing(s.topic)));
    }), p2(this, "onRelayEventRequest", async (i3) => {
      const { topic: s, payload: n3 } = i3;
      switch (n3.method) {
        case "wc_pairingPing":
          return await this.onPairingPingRequest(s, n3);
        case "wc_pairingDelete":
          return await this.onPairingDeleteRequest(s, n3);
        default:
          return await this.onUnknownRpcMethodRequest(s, n3);
      }
    }), p2(this, "onRelayEventResponse", async (i3) => {
      const { topic: s, payload: n3 } = i3, o2 = (await this.core.history.get(s, n3.id)).request.method;
      switch (o2) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(s, n3);
        default:
          return this.onUnknownRpcMethodResponse(o2);
      }
    }), p2(this, "onPairingPingRequest", async (i3, s) => {
      const { id: n3 } = s;
      try {
        this.isValidPing({ topic: i3 }), await this.sendResult(n3, i3, true), this.events.emit(re2.ping, { id: n3, topic: i3 });
      } catch (o2) {
        await this.sendError(n3, i3, o2), this.logger.error(o2);
      }
    }), p2(this, "onPairingPingResponse", (i3, s) => {
      const { id: n3 } = s;
      setTimeout(() => {
        isJsonRpcResult(s) ? this.events.emit(xi("pairing_ping", n3), {}) : isJsonRpcError(s) && this.events.emit(xi("pairing_ping", n3), { error: s.error });
      }, 500);
    }), p2(this, "onPairingDeleteRequest", async (i3, s) => {
      const { id: n3 } = s;
      try {
        this.isValidDisconnect({ topic: i3 }), await this.deletePairing(i3), this.events.emit(re2.delete, { id: n3, topic: i3 });
      } catch (o2) {
        await this.sendError(n3, i3, o2), this.logger.error(o2);
      }
    }), p2(this, "onUnknownRpcMethodRequest", async (i3, s) => {
      const { id: n3, method: o2 } = s;
      try {
        if (this.registeredMethods.includes(o2)) return;
        const a2 = Nt("WC_METHOD_UNSUPPORTED", o2);
        await this.sendError(n3, i3, a2), this.logger.error(a2);
      } catch (a2) {
        await this.sendError(n3, i3, a2), this.logger.error(a2);
      }
    }), p2(this, "onUnknownRpcMethodResponse", (i3) => {
      this.registeredMethods.includes(i3) || this.logger.error(Nt("WC_METHOD_UNSUPPORTED", i3));
    }), p2(this, "isValidPair", (i3, s) => {
      var n3;
      if (!ma(i3)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `pair() params: ${i3}`);
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!fa(i3.uri)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `pair() uri: ${i3.uri}`);
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      const o2 = Gc(i3 == null ? void 0 : i3.uri);
      if (!((n3 = o2 == null ? void 0 : o2.relay) != null && n3.protocol)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", "pair() uri#relay-protocol");
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (!(o2 != null && o2.symKey)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", "pair() uri#symKey");
        throw s.setError(Y2.malformed_pairing_uri), new Error(a2);
      }
      if (o2 != null && o2.expiryTimestamp && (0, import_time2.toMiliseconds)(o2 == null ? void 0 : o2.expiryTimestamp) < Date.now()) {
        s.setError(Y2.pairing_expired);
        const { message: a2 } = ht("EXPIRED", "pair() URI has expired. Please try again with a new connection URI.");
        throw new Error(a2);
      }
    }), p2(this, "isValidPing", async (i3) => {
      if (!ma(i3)) {
        const { message: n3 } = ht("MISSING_OR_INVALID", `ping() params: ${i3}`);
        throw new Error(n3);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), p2(this, "isValidDisconnect", async (i3) => {
      if (!ma(i3)) {
        const { message: n3 } = ht("MISSING_OR_INVALID", `disconnect() params: ${i3}`);
        throw new Error(n3);
      }
      const { topic: s } = i3;
      await this.isValidPairingTopic(s);
    }), p2(this, "isValidPairingTopic", async (i3) => {
      if (!nt(i3, false)) {
        const { message: s } = ht("MISSING_OR_INVALID", `pairing topic should be a string: ${i3}`);
        throw new Error(s);
      }
      if (!this.pairings.keys.includes(i3)) {
        const { message: s } = ht("NO_MATCHING_KEY", `pairing topic doesn't exist: ${i3}`);
        throw new Error(s);
      }
      if (vi(this.pairings.get(i3).expiry)) {
        await this.deletePairing(i3);
        const { message: s } = ht("EXPIRED", `pairing topic: ${i3}`);
        throw new Error(s);
      }
    }), this.core = e, this.logger = E(t, this.name), this.pairings = new zi2(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return y(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(C2.message, async (e) => {
      const { topic: t, message: i3, transportType: s } = e;
      if (this.pairings.keys.includes(t) && s !== Q.link_mode && !this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(i3))) try {
        const n3 = await this.core.crypto.decode(t, i3);
        isJsonRpcRequest(n3) ? (this.core.history.set(t, n3), await this.onRelayEventRequest({ topic: t, payload: n3 })) : isJsonRpcResponse(n3) && (await this.core.history.resolve(n3), await this.onRelayEventResponse({ topic: t, payload: n3 }), this.core.history.delete(t, n3.id)), await this.core.relayer.messages.ack(t, i3);
      } catch (n3) {
        this.logger.error(n3);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(M2.expired, async (e) => {
      const { topic: t } = bi(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, true), this.events.emit(re2.expire, { topic: t }));
    });
  }
};
var ko = Object.defineProperty;
var jo = (r2, e, t) => e in r2 ? ko(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var O2 = (r2, e, t) => jo(r2, typeof e != "symbol" ? e + "" : e, t);
var ki2 = class extends I {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, O2(this, "records", /* @__PURE__ */ new Map()), O2(this, "events", new import_events3.EventEmitter()), O2(this, "name", Bt2), O2(this, "version", Vt2), O2(this, "cached", []), O2(this, "initialized", false), O2(this, "storagePrefix", B), O2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.records.set(i3.id, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), O2(this, "set", (i3, s, n3) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: i3, request: s, chainId: n3 }), this.records.has(s.id)) return;
      const o2 = { id: s.id, topic: i3, request: { method: s.method, params: s.params || null }, chainId: n3, expiry: Ei(import_time2.THIRTY_DAYS) };
      this.records.set(o2.id, o2), this.persist(), this.events.emit(F2.created, o2);
    }), O2(this, "resolve", async (i3) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: i3 }), !this.records.has(i3.id)) return;
      const s = await this.getRecord(i3.id);
      typeof s.response > "u" && (s.response = isJsonRpcError(i3) ? { error: i3.error } : { result: i3.result }, this.records.set(s.id, s), this.persist(), this.events.emit(F2.updated, s));
    }), O2(this, "get", async (i3, s) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: i3, id: s }), await this.getRecord(s))), O2(this, "delete", (i3, s) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: s }), this.values.forEach((n3) => {
        if (n3.topic === i3) {
          if (typeof s < "u" && n3.id !== s) return;
          this.records.delete(n3.id), this.events.emit(F2.deleted, n3);
        }
      }), this.persist();
    }), O2(this, "exists", async (i3, s) => (this.isInitialized(), this.records.has(s) ? (await this.getRecord(s)).topic === i3 : false)), O2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), O2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), O2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), O2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u") return;
      const i3 = { topic: t.topic, request: formatJsonRpcRequest(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(i3);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: i3 } = ht("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(i3);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(F2.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length) return;
      if (this.records.size) {
        const { message: t } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(F2.created, (e) => {
      const t = F2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(F2.updated, (e) => {
      const t = F2.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.events.on(F2.deleted, (e) => {
      const t = F2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e });
    }), this.core.heartbeat.on(r.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.isInitialized();
      let e = false;
      this.records.forEach((t) => {
        (0, import_time2.toMiliseconds)(t.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${t.id}`), this.records.delete(t.id), this.events.emit(F2.deleted, t, false), e = true);
      }), e && this.persist();
    } catch (e) {
      this.logger.warn(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Uo2 = Object.defineProperty;
var Fo = (r2, e, t) => e in r2 ? Uo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var A2 = (r2, e, t) => Fo(r2, typeof e != "symbol" ? e + "" : e, t);
var ji2 = class extends S {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, A2(this, "expirations", /* @__PURE__ */ new Map()), A2(this, "events", new import_events3.EventEmitter()), A2(this, "name", qt2), A2(this, "version", Gt), A2(this, "cached", []), A2(this, "initialized", false), A2(this, "storagePrefix", B), A2(this, "init", async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((i3) => this.expirations.set(i3.target, i3)), this.cached = [], this.registerEventListeners(), this.initialized = true);
    }), A2(this, "has", (i3) => {
      try {
        const s = this.formatTarget(i3);
        return typeof this.getExpiration(s) < "u";
      } catch {
        return false;
      }
    }), A2(this, "set", (i3, s) => {
      this.isInitialized();
      const n3 = this.formatTarget(i3), o2 = { target: n3, expiry: s };
      this.expirations.set(n3, o2), this.checkExpiry(n3, o2), this.events.emit(M2.created, { target: n3, expiration: o2 });
    }), A2(this, "get", (i3) => {
      this.isInitialized();
      const s = this.formatTarget(i3);
      return this.getExpiration(s);
    }), A2(this, "del", (i3) => {
      if (this.isInitialized(), this.has(i3)) {
        const s = this.formatTarget(i3), n3 = this.getExpiration(s);
        this.expirations.delete(s), this.events.emit(M2.deleted, { target: s, expiration: n3 });
      }
    }), A2(this, "on", (i3, s) => {
      this.events.on(i3, s);
    }), A2(this, "once", (i3, s) => {
      this.events.once(i3, s);
    }), A2(this, "off", (i3, s) => {
      this.events.off(i3, s);
    }), A2(this, "removeListener", (i3, s) => {
      this.events.removeListener(i3, s);
    }), this.logger = E(t, this.name);
  }
  get context() {
    return y(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string") return mi(e);
    if (typeof e == "number") return wi(e);
    const { message: t } = ht("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(M2.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length) return;
      if (this.expirations.size) {
        const { message: t } = ht("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: i3 } = ht("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.warn(i3), new Error(i3);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: i3 } = t;
    (0, import_time2.toMiliseconds)(i3) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit(M2.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(r.pulse, () => this.checkExpirations()), this.events.on(M2.created, (e) => {
      const t = M2.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(M2.expired, (e) => {
      const t = M2.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(M2.deleted, (e) => {
      const t = M2.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = ht("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
};
var Mo = Object.defineProperty;
var Ko2 = (r2, e, t) => e in r2 ? Mo(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var w = (r2, e, t) => Ko2(r2, typeof e != "symbol" ? e + "" : e, t);
var Ui2 = class extends M {
  constructor(e, t, i3) {
    super(e, t, i3), this.core = e, this.logger = t, this.store = i3, w(this, "name", Wt2), w(this, "abortController"), w(this, "isDevEnv"), w(this, "verifyUrlV3", Yt2), w(this, "storagePrefix", B), w(this, "version", Le), w(this, "publicKey"), w(this, "fetchPromise"), w(this, "init", async () => {
      var s;
      this.isDevEnv || (this.publicKey = await this.store.getItem(this.storeKey), this.publicKey && (0, import_time2.toMiliseconds)((s = this.publicKey) == null ? void 0 : s.expiresAt) < Date.now() && (this.logger.debug("verify v2 public key expired"), await this.removePublicKey()));
    }), w(this, "register", async (s) => {
      if (!Tt() || this.isDevEnv) return;
      const n3 = window.location.origin, { id: o2, decryptedId: a2 } = s, c3 = `${this.verifyUrlV3}/attestation?projectId=${this.core.projectId}&origin=${n3}&id=${o2}&decryptedId=${a2}`;
      try {
        const h4 = (0, import_window_getters2.getDocument)(), l4 = this.startAbortTimer(import_time2.ONE_SECOND * 5), d3 = await new Promise((g, _2) => {
          const u3 = () => {
            window.removeEventListener("message", x2), h4.body.removeChild(b5), _2("attestation aborted");
          };
          this.abortController.signal.addEventListener("abort", u3);
          const b5 = h4.createElement("iframe");
          b5.src = c3, b5.style.display = "none", b5.addEventListener("error", u3, { signal: this.abortController.signal });
          const x2 = (I4) => {
            if (I4.data && typeof I4.data == "string") try {
              const D3 = JSON.parse(I4.data);
              if (D3.type === "verify_attestation") {
                if (sn(D3.attestation).payload.id !== o2) return;
                clearInterval(l4), h4.body.removeChild(b5), this.abortController.signal.removeEventListener("abort", u3), window.removeEventListener("message", x2), g(D3.attestation === null ? "" : D3.attestation);
              }
            } catch (D3) {
              this.logger.warn(D3);
            }
          };
          h4.body.appendChild(b5), window.addEventListener("message", x2, { signal: this.abortController.signal });
        });
        return this.logger.debug("jwt attestation", d3), d3;
      } catch (h4) {
        this.logger.warn(h4);
      }
      return "";
    }), w(this, "resolve", async (s) => {
      if (this.isDevEnv) return "";
      const { attestationId: n3, hash: o2, encryptedId: a2 } = s;
      if (n3 === "") {
        this.logger.debug("resolve: attestationId is empty, skipping");
        return;
      }
      if (n3) {
        if (sn(n3).payload.id !== a2) return;
        const h4 = await this.isValidJwtAttestation(n3);
        if (h4) {
          if (!h4.isVerified) {
            this.logger.warn("resolve: jwt attestation: origin url not verified");
            return;
          }
          return h4;
        }
      }
      if (!o2) return;
      const c3 = this.getVerifyUrl(s == null ? void 0 : s.verifyUrl);
      return this.fetchAttestation(o2, c3);
    }), w(this, "fetchAttestation", async (s, n3) => {
      this.logger.debug(`resolving attestation: ${s} from url: ${n3}`);
      const o2 = this.startAbortTimer(import_time2.ONE_SECOND * 5), a2 = await fetch(`${n3}/attestation/${s}?v2Supported=true`, { signal: this.abortController.signal });
      return clearTimeout(o2), a2.status === 200 ? await a2.json() : void 0;
    }), w(this, "getVerifyUrl", (s) => {
      let n3 = s || ue2;
      return Jt2.includes(n3) || (this.logger.info(`verify url: ${n3}, not included in trusted list, assigning default: ${ue2}`), n3 = ue2), n3;
    }), w(this, "fetchPublicKey", async () => {
      try {
        this.logger.debug(`fetching public key from: ${this.verifyUrlV3}`);
        const s = this.startAbortTimer(import_time2.FIVE_SECONDS), n3 = await fetch(`${this.verifyUrlV3}/public-key`, { signal: this.abortController.signal });
        return clearTimeout(s), await n3.json();
      } catch (s) {
        this.logger.warn(s);
      }
    }), w(this, "persistPublicKey", async (s) => {
      this.logger.debug("persisting public key to local storage", s), await this.store.setItem(this.storeKey, s), this.publicKey = s;
    }), w(this, "removePublicKey", async () => {
      this.logger.debug("removing verify v2 public key from storage"), await this.store.removeItem(this.storeKey), this.publicKey = void 0;
    }), w(this, "isValidJwtAttestation", async (s) => {
      const n3 = await this.getPublicKey();
      try {
        if (n3) return this.validateAttestation(s, n3);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
      const o2 = await this.fetchAndPersistPublicKey();
      try {
        if (o2) return this.validateAttestation(s, o2);
      } catch (a2) {
        this.logger.error(a2), this.logger.warn("error validating attestation");
      }
    }), w(this, "getPublicKey", async () => this.publicKey ? this.publicKey : await this.fetchAndPersistPublicKey()), w(this, "fetchAndPersistPublicKey", async () => {
      if (this.fetchPromise) return await this.fetchPromise, this.publicKey;
      this.fetchPromise = new Promise(async (n3) => {
        const o2 = await this.fetchPublicKey();
        o2 && (await this.persistPublicKey(o2), n3(o2));
      });
      const s = await this.fetchPromise;
      return this.fetchPromise = void 0, s;
    }), w(this, "validateAttestation", (s, n3) => {
      const o2 = zc(s, n3.publicKey), a2 = { hasExpired: (0, import_time2.toMiliseconds)(o2.exp) < Date.now(), payload: o2 };
      if (a2.hasExpired) throw this.logger.warn("resolve: jwt attestation expired"), new Error("JWT attestation expired");
      return { origin: a2.payload.origin, isScam: a2.payload.isScam, isVerified: a2.payload.isVerified };
    }), this.logger = E(t, this.name), this.abortController = new AbortController(), this.isDevEnv = Ii(), this.init();
  }
  get storeKey() {
    return this.storagePrefix + this.version + this.core.customStoragePrefix + "//verify:public:key";
  }
  get context() {
    return y(this.logger);
  }
  startAbortTimer(e) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), (0, import_time2.toMiliseconds)(e));
  }
};
var Bo2 = Object.defineProperty;
var Vo = (r2, e, t) => e in r2 ? Bo2(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var Fi2 = (r2, e, t) => Vo(r2, typeof e != "symbol" ? e + "" : e, t);
var Mi2 = class extends O {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, Fi2(this, "context", Xt2), Fi2(this, "registerDeviceToken", async (i3) => {
      const { clientId: s, token: n3, notificationType: o2, enableEncrypted: a2 = false } = i3, c3 = `${Zt}/${this.projectId}/clients`;
      await fetch(c3, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ client_id: s, type: o2, token: n3, always_raw: a2 }) });
    }), this.logger = E(t, this.context);
  }
};
var qo = Object.defineProperty;
var Ki2 = Object.getOwnPropertySymbols;
var Go2 = Object.prototype.hasOwnProperty;
var Wo2 = Object.prototype.propertyIsEnumerable;
var Ze2 = (r2, e, t) => e in r2 ? qo(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var be2 = (r2, e) => {
  for (var t in e || (e = {})) Go2.call(e, t) && Ze2(r2, t, e[t]);
  if (Ki2) for (var t of Ki2(e)) Wo2.call(e, t) && Ze2(r2, t, e[t]);
  return r2;
};
var E2 = (r2, e, t) => Ze2(r2, typeof e != "symbol" ? e + "" : e, t);
var Bi2 = class extends R {
  constructor(e, t, i3 = true) {
    super(e, t, i3), this.core = e, this.logger = t, E2(this, "context", ei2), E2(this, "storagePrefix", B), E2(this, "storageVersion", Qt2), E2(this, "events", /* @__PURE__ */ new Map()), E2(this, "shouldPersist", false), E2(this, "init", async () => {
      if (!Ii()) try {
        const s = { eventId: Bi(), timestamp: Date.now(), domain: this.getAppDomain(), props: { event: "INIT", type: "", properties: { client_id: await this.core.crypto.getClientId(), user_agent: Mn(this.core.relayer.protocol, this.core.relayer.version, _e2) } } };
        await this.sendEvent([s]);
      } catch (s) {
        this.logger.warn(s);
      }
    }), E2(this, "createEvent", (s) => {
      const { event: n3 = "ERROR", type: o2 = "", properties: { topic: a2, trace: c3 } } = s, h4 = Bi(), l4 = this.core.projectId || "", d3 = Date.now(), g = be2({ eventId: h4, timestamp: d3, props: { event: n3, type: o2, properties: { topic: a2, trace: c3 } }, bundleId: l4, domain: this.getAppDomain() }, this.setMethods(h4));
      return this.telemetryEnabled && (this.events.set(h4, g), this.shouldPersist = true), g;
    }), E2(this, "getEvent", (s) => {
      const { eventId: n3, topic: o2 } = s;
      if (n3) return this.events.get(n3);
      const a2 = Array.from(this.events.values()).find((c3) => c3.props.properties.topic === o2);
      if (a2) return be2(be2({}, a2), this.setMethods(a2.eventId));
    }), E2(this, "deleteEvent", (s) => {
      const { eventId: n3 } = s;
      this.events.delete(n3), this.shouldPersist = true;
    }), E2(this, "setEventListeners", () => {
      this.core.heartbeat.on(r.pulse, async () => {
        this.shouldPersist && await this.persist(), this.events.forEach((s) => {
          (0, import_time2.fromMiliseconds)(Date.now()) - (0, import_time2.fromMiliseconds)(s.timestamp) > ti && (this.events.delete(s.eventId), this.shouldPersist = true);
        });
      });
    }), E2(this, "setMethods", (s) => ({ addTrace: (n3) => this.addTrace(s, n3), setError: (n3) => this.setError(s, n3) })), E2(this, "addTrace", (s, n3) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.properties.trace.push(n3), this.events.set(s, o2), this.shouldPersist = true);
    }), E2(this, "setError", (s, n3) => {
      const o2 = this.events.get(s);
      o2 && (o2.props.type = n3, o2.timestamp = Date.now(), this.events.set(s, o2), this.shouldPersist = true);
    }), E2(this, "persist", async () => {
      await this.core.storage.setItem(this.storageKey, Array.from(this.events.values())), this.shouldPersist = false;
    }), E2(this, "restore", async () => {
      try {
        const s = await this.core.storage.getItem(this.storageKey) || [];
        if (!s.length) return;
        s.forEach((n3) => {
          this.events.set(n3.eventId, be2(be2({}, n3), this.setMethods(n3.eventId)));
        });
      } catch (s) {
        this.logger.warn(s);
      }
    }), E2(this, "submit", async () => {
      if (!this.telemetryEnabled || this.events.size === 0) return;
      const s = [];
      for (const [n3, o2] of this.events) o2.props.type && s.push(o2);
      if (s.length !== 0) try {
        if ((await this.sendEvent(s)).ok) for (const n3 of s) this.events.delete(n3.eventId), this.shouldPersist = true;
      } catch (n3) {
        this.logger.warn(n3);
      }
    }), E2(this, "sendEvent", async (s) => {
      const n3 = this.getAppDomain() ? "" : "&sp=desktop";
      return await fetch(`${ii}?projectId=${this.core.projectId}&st=events_sdk&sv=js-${_e2}${n3}`, { method: "POST", body: JSON.stringify(s) });
    }), E2(this, "getAppDomain", () => Pn().url), this.logger = E(t, this.context), this.telemetryEnabled = i3, i3 ? this.restore().then(async () => {
      await this.submit(), this.setEventListeners();
    }) : this.persist();
  }
  get storageKey() {
    return this.storagePrefix + this.storageVersion + this.core.customStoragePrefix + "//" + this.context;
  }
};
var Ho = Object.defineProperty;
var Vi2 = Object.getOwnPropertySymbols;
var Yo2 = Object.prototype.hasOwnProperty;
var Jo2 = Object.prototype.propertyIsEnumerable;
var Qe3 = (r2, e, t) => e in r2 ? Ho(r2, e, { enumerable: true, configurable: true, writable: true, value: t }) : r2[e] = t;
var qi2 = (r2, e) => {
  for (var t in e || (e = {})) Yo2.call(e, t) && Qe3(r2, t, e[t]);
  if (Vi2) for (var t of Vi2(e)) Jo2.call(e, t) && Qe3(r2, t, e[t]);
  return r2;
};
var v2 = (r2, e, t) => Qe3(r2, typeof e != "symbol" ? e + "" : e, t);
var Te = class _Te extends h2 {
  constructor(e) {
    var t;
    super(e), v2(this, "protocol", ze2), v2(this, "version", Le), v2(this, "name", he2), v2(this, "relayUrl"), v2(this, "projectId"), v2(this, "customStoragePrefix"), v2(this, "events", new import_events3.EventEmitter()), v2(this, "logger"), v2(this, "heartbeat"), v2(this, "relayer"), v2(this, "crypto"), v2(this, "storage"), v2(this, "history"), v2(this, "expirer"), v2(this, "pairing"), v2(this, "verify"), v2(this, "echoClient"), v2(this, "linkModeSupportedApps"), v2(this, "eventClient"), v2(this, "initialized", false), v2(this, "logChunkController"), v2(this, "on", (a2, c3) => this.events.on(a2, c3)), v2(this, "once", (a2, c3) => this.events.once(a2, c3)), v2(this, "off", (a2, c3) => this.events.off(a2, c3)), v2(this, "removeListener", (a2, c3) => this.events.removeListener(a2, c3)), v2(this, "dispatchEnvelope", ({ topic: a2, message: c3, sessionExists: h4 }) => {
      if (!a2 || !c3) return;
      const l4 = { topic: a2, message: c3, publishedAt: Date.now(), transportType: Q.link_mode };
      this.relayer.onLinkMessageEvent(l4, { sessionExists: h4 });
    });
    const i3 = this.getGlobalCore(e == null ? void 0 : e.customStoragePrefix);
    if (i3) try {
      return this.customStoragePrefix = i3.customStoragePrefix, this.logger = i3.logger, this.heartbeat = i3.heartbeat, this.crypto = i3.crypto, this.history = i3.history, this.expirer = i3.expirer, this.storage = i3.storage, this.relayer = i3.relayer, this.pairing = i3.pairing, this.verify = i3.verify, this.echoClient = i3.echoClient, this.linkModeSupportedApps = i3.linkModeSupportedApps, this.eventClient = i3.eventClient, this.initialized = i3.initialized, this.logChunkController = i3.logChunkController, i3;
    } catch (a2) {
      console.warn("Failed to copy global core", a2);
    }
    this.projectId = e == null ? void 0 : e.projectId, this.relayUrl = (e == null ? void 0 : e.relayUrl) || Ue, this.customStoragePrefix = e != null && e.customStoragePrefix ? `:${e.customStoragePrefix}` : "";
    const s = k({ level: typeof (e == null ? void 0 : e.logger) == "string" && e.logger ? e.logger : Et2.logger, name: he2 }), { logger: n3, chunkLoggerController: o2 } = A({ opts: s, maxSizeInBytes: e == null ? void 0 : e.maxLogBlobSizeInBytes, loggerOverride: e == null ? void 0 : e.logger });
    this.logChunkController = o2, (t = this.logChunkController) != null && t.downloadLogsBlobInBrowser && (window.downloadLogsBlobInBrowser = async () => {
      var a2, c3;
      (a2 = this.logChunkController) != null && a2.downloadLogsBlobInBrowser && ((c3 = this.logChunkController) == null || c3.downloadLogsBlobInBrowser({ clientId: await this.crypto.getClientId() }));
    }), this.logger = E(n3, this.name), this.heartbeat = new i(), this.crypto = new vi2(this, this.logger, e == null ? void 0 : e.keychain), this.history = new ki2(this, this.logger), this.expirer = new ji2(this, this.logger), this.storage = e != null && e.storage ? e.storage : new h(qi2(qi2({}, It2), e == null ? void 0 : e.storageOptions)), this.relayer = new Si2({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Li2(this, this.logger), this.verify = new Ui2(this, this.logger, this.storage), this.echoClient = new Mi2(this.projectId || "", this.logger), this.linkModeSupportedApps = [], this.eventClient = new Bi2(this, this.logger, e == null ? void 0 : e.telemetryEnabled), this.setGlobalCore(this);
  }
  static async init(e) {
    const t = new _Te(e);
    await t.initialize();
    const i3 = await t.crypto.getClientId();
    return await t.storage.setItem(jt2, i3), t;
  }
  get context() {
    return y(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async getLogsBlob() {
    var e;
    return (e = this.logChunkController) == null ? void 0 : e.logsToBlob({ clientId: await this.crypto.getClientId() });
  }
  async addLinkModeSupportedApp(e) {
    this.linkModeSupportedApps.includes(e) || (this.linkModeSupportedApps.push(e), await this.storage.setItem(Fe2, this.linkModeSupportedApps));
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.linkModeSupportedApps = await this.storage.getItem(Fe2) || [], this.initialized = true, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;
    }
  }
  getGlobalCore(e = "") {
    try {
      if (this.isGlobalCoreDisabled()) return;
      const t = `_walletConnectCore_${e}`, i3 = `${t}_count`;
      return globalThis[i3] = (globalThis[i3] || 0) + 1, globalThis[i3] > 1 && console.warn(`WalletConnect Core is already initialized. This is probably a mistake and can lead to unexpected behavior. Init() was called ${globalThis[i3]} times.`), globalThis[t];
    } catch (t) {
      console.warn("Failed to get global WalletConnect core", t);
      return;
    }
  }
  setGlobalCore(e) {
    var t;
    try {
      if (this.isGlobalCoreDisabled()) return;
      const i3 = `_walletConnectCore_${((t = e.opts) == null ? void 0 : t.customStoragePrefix) || ""}`;
      globalThis[i3] = e;
    } catch (i3) {
      console.warn("Failed to set global WalletConnect core", i3);
    }
  }
  isGlobalCoreDisabled() {
    try {
      return typeof process < "u" && process.env.DISABLE_GLOBAL_CORE === "true";
    } catch {
      return true;
    }
  }
};
var Xo2 = Te;

// node_modules/@walletconnect/sign-client/node_modules/@walletconnect/types/dist/index.es.js
var import_events5 = __toESM(require_events());
var T = Object.defineProperty;
var k3 = (e, s, r2) => s in e ? T(e, s, { enumerable: true, configurable: true, writable: true, value: r2 }) : e[s] = r2;
var i2 = (e, s, r2) => k3(e, typeof s != "symbol" ? s + "" : s, r2);
var J = class {
  constructor(s) {
    this.opts = s, i2(this, "protocol", "wc"), i2(this, "version", 2);
  }
};
var V3 = class {
  constructor(s) {
    this.client = s;
  }
};

// node_modules/@walletconnect/sign-client/dist/index.es.js
var import_time3 = __toESM(require_cjs());
var import_events6 = __toESM(require_events());
var De2 = "wc";
var Le2 = 2;
var ke3 = "client";
var we2 = `${De2}@${Le2}:${ke3}:`;
var me2 = { name: ke3, logger: "error", controller: false, relayUrl: "wss://relay.walletconnect.org" };
var Me3 = "WALLETCONNECT_DEEPLINK_CHOICE";
var pt2 = "proposal";
var $e2 = "Proposal expired";
var ht2 = "session";
var J2 = import_time3.SEVEN_DAYS;
var dt2 = "engine";
var N = { wc_sessionPropose: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1100 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1101 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1120 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1121 } }, wc_sessionSettle: { req: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1102 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1104 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1105 } }, wc_sessionExtend: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1106 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1107 } }, wc_sessionRequest: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1108 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1109 } }, wc_sessionEvent: { req: { ttl: import_time3.FIVE_MINUTES, prompt: true, tag: 1110 }, res: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1111 } }, wc_sessionDelete: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1112 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1113 } }, wc_sessionPing: { req: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1114 }, res: { ttl: import_time3.ONE_DAY, prompt: false, tag: 1115 } }, wc_sessionAuthenticate: { req: { ttl: import_time3.ONE_HOUR, prompt: true, tag: 1116 }, res: { ttl: import_time3.ONE_HOUR, prompt: false, tag: 1117 }, reject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1118 }, autoReject: { ttl: import_time3.FIVE_MINUTES, prompt: false, tag: 1119 } } };
var _e3 = { min: import_time3.FIVE_MINUTES, max: import_time3.SEVEN_DAYS };
var $2 = { idle: "IDLE", active: "ACTIVE" };
var Ke3 = { eth_sendTransaction: { key: "" }, eth_sendRawTransaction: { key: "" }, wallet_sendCalls: { key: "" }, solana_signTransaction: { key: "signature" }, solana_signAllTransactions: { key: "transactions" }, solana_signAndSendTransaction: { key: "signature" } };
var ut2 = "request";
var gt2 = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest", "wc_sessionAuthenticate"];
var yt2 = "wc";
var wt2 = "auth";
var mt2 = "authKeys";
var _t2 = "pairingTopics";
var Et3 = "requests";
var ae2 = `${yt2}@${1.5}:${wt2}:`;
var ce2 = `${ae2}:PUB_KEY`;
var vs2 = Object.defineProperty;
var Is2 = Object.defineProperties;
var Ts2 = Object.getOwnPropertyDescriptors;
var ft2 = Object.getOwnPropertySymbols;
var qs3 = Object.prototype.hasOwnProperty;
var Ps2 = Object.prototype.propertyIsEnumerable;
var Ue2 = (S5, n3, e) => n3 in S5 ? vs2(S5, n3, { enumerable: true, configurable: true, writable: true, value: e }) : S5[n3] = e;
var v3 = (S5, n3) => {
  for (var e in n3 || (n3 = {})) qs3.call(n3, e) && Ue2(S5, e, n3[e]);
  if (ft2) for (var e of ft2(n3)) Ps2.call(n3, e) && Ue2(S5, e, n3[e]);
  return S5;
};
var b2 = (S5, n3) => Is2(S5, Ts2(n3));
var c2 = (S5, n3, e) => Ue2(S5, typeof n3 != "symbol" ? n3 + "" : n3, e);
var Ns2 = class extends V3 {
  constructor(n3) {
    super(n3), c2(this, "name", dt2), c2(this, "events", new import_events6.default()), c2(this, "initialized", false), c2(this, "requestQueue", { state: $2.idle, queue: [] }), c2(this, "sessionRequestQueue", { state: $2.idle, queue: [] }), c2(this, "requestQueueDelay", import_time3.ONE_SECOND), c2(this, "expectedPairingMethodMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedMap", /* @__PURE__ */ new Map()), c2(this, "recentlyDeletedLimit", 200), c2(this, "relayMessageCache", []), c2(this, "pendingSessions", /* @__PURE__ */ new Map()), c2(this, "init", async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), await this.registerLinkModeListeners(), this.client.core.pairing.register({ methods: Object.keys(N) }), this.initialized = true, setTimeout(async () => {
        await this.processPendingMessageEvents(), this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay)));
    }), c2(this, "connect", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      const t = b2(v3({}, e), { requiredNamespaces: e.requiredNamespaces || {}, optionalNamespaces: e.optionalNamespaces || {} });
      await this.isValidConnect(t), t.optionalNamespaces = aa(t.requiredNamespaces, t.optionalNamespaces), t.requiredNamespaces = {};
      const { pairingTopic: s, requiredNamespaces: i3, optionalNamespaces: r2, sessionProperties: o2, scopedProperties: a2, relays: l4 } = t;
      let p4 = s, h4, u3 = false;
      try {
        if (p4) {
          const T3 = this.client.core.pairing.pairings.get(p4);
          this.client.logger.warn("connect() with existing pairing topic is deprecated and will be removed in the next major release."), u3 = T3.active;
        }
      } catch (T3) {
        throw this.client.logger.error(`connect() -> pairing.get(${p4}) failed`), T3;
      }
      if (!p4 || !u3) {
        const { topic: T3, uri: K5 } = await this.client.core.pairing.create();
        p4 = T3, h4 = K5;
      }
      if (!p4) {
        const { message: T3 } = ht("NO_MATCHING_KEY", `connect() pairing topic: ${p4}`);
        throw new Error(T3);
      }
      const d3 = await this.client.core.crypto.generateKeyPair(), w3 = N.wc_sessionPropose.req.ttl || import_time3.FIVE_MINUTES, m2 = Ei(w3), f7 = b2(v3(v3({ requiredNamespaces: i3, optionalNamespaces: r2, relays: l4 ?? [{ protocol: xt2 }], proposer: { publicKey: d3, metadata: this.client.metadata }, expiryTimestamp: m2, pairingTopic: p4 }, o2 && { sessionProperties: o2 }), a2 && { scopedProperties: a2 }), { id: payloadId() }), _2 = xi("session_connect", f7.id), { reject: g, resolve: A5, done: D3 } = gi(w3, $e2), I4 = ({ id: T3 }) => {
        T3 === f7.id && (this.client.events.off("proposal_expire", I4), this.pendingSessions.delete(f7.id), this.events.emit(_2, { error: { message: $e2, code: 0 } }));
      };
      return this.client.events.on("proposal_expire", I4), this.events.once(_2, ({ error: T3, session: K5 }) => {
        this.client.events.off("proposal_expire", I4), T3 ? g(T3) : K5 && A5(K5);
      }), await this.sendRequest({ topic: p4, method: "wc_sessionPropose", params: f7, throwOnFailedPublish: true, clientRpcId: f7.id }), await this.setProposal(f7.id, f7), { uri: h4, approval: D3 };
    }), c2(this, "pair", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        return await this.client.core.pairing.pair(e);
      } catch (t) {
        throw this.client.logger.error("pair() failed"), t;
      }
    }), c2(this, "approve", async (e) => {
      var t, s, i3;
      const r2 = this.client.core.eventClient.createEvent({ properties: { topic: (t = e == null ? void 0 : e.id) == null ? void 0 : t.toString(), trace: [er2.session_approve_started] } });
      try {
        this.isInitialized(), await this.confirmOnlineStateOrThrow();
      } catch (q4) {
        throw r2.setError(tr2.no_internet_connection), q4;
      }
      try {
        await this.isValidProposalId(e == null ? void 0 : e.id);
      } catch (q4) {
        throw this.client.logger.error(`approve() -> proposal.get(${e == null ? void 0 : e.id}) failed`), r2.setError(tr2.proposal_not_found), q4;
      }
      try {
        await this.isValidApprove(e);
      } catch (q4) {
        throw this.client.logger.error("approve() -> isValidApprove() failed"), r2.setError(tr2.session_approve_namespace_validation_failure), q4;
      }
      const { id: o2, relayProtocol: a2, namespaces: l4, sessionProperties: p4, scopedProperties: h4, sessionConfig: u3 } = e, d3 = this.client.proposal.get(o2);
      this.client.core.eventClient.deleteEvent({ eventId: r2.eventId });
      const { pairingTopic: w3, proposer: m2, requiredNamespaces: f7, optionalNamespaces: _2 } = d3;
      let g = (s = this.client.core.eventClient) == null ? void 0 : s.getEvent({ topic: w3 });
      g || (g = (i3 = this.client.core.eventClient) == null ? void 0 : i3.createEvent({ type: er2.session_approve_started, properties: { topic: w3, trace: [er2.session_approve_started, er2.session_namespaces_validation_success] } }));
      const A5 = await this.client.core.crypto.generateKeyPair(), D3 = m2.publicKey, I4 = await this.client.core.crypto.generateSharedKey(A5, D3), T3 = v3(v3(v3({ relay: { protocol: a2 ?? "irn" }, namespaces: l4, controller: { publicKey: A5, metadata: this.client.metadata }, expiry: Ei(J2) }, p4 && { sessionProperties: p4 }), h4 && { scopedProperties: h4 }), u3 && { sessionConfig: u3 }), K5 = Q.relay;
      g.addTrace(er2.subscribing_session_topic);
      try {
        await this.client.core.relayer.subscribe(I4, { transportType: K5 });
      } catch (q4) {
        throw g.setError(tr2.subscribe_session_topic_failure), q4;
      }
      g.addTrace(er2.subscribe_session_topic_success);
      const fe3 = b2(v3({}, T3), { topic: I4, requiredNamespaces: f7, optionalNamespaces: _2, pairingTopic: w3, acknowledged: false, self: T3.controller, peer: { publicKey: m2.publicKey, metadata: m2.metadata }, controller: A5, transportType: Q.relay });
      await this.client.session.set(I4, fe3), g.addTrace(er2.store_session);
      try {
        g.addTrace(er2.publishing_session_settle), await this.sendRequest({ topic: I4, method: "wc_sessionSettle", params: T3, throwOnFailedPublish: true }).catch((q4) => {
          throw g == null ? void 0 : g.setError(tr2.session_settle_publish_failure), q4;
        }), g.addTrace(er2.session_settle_publish_success), g.addTrace(er2.publishing_session_approve), await this.sendResult({ id: o2, topic: w3, result: { relay: { protocol: a2 ?? "irn" }, responderPublicKey: A5 }, throwOnFailedPublish: true }).catch((q4) => {
          throw g == null ? void 0 : g.setError(tr2.session_approve_publish_failure), q4;
        }), g.addTrace(er2.session_approve_publish_success);
      } catch (q4) {
        throw this.client.logger.error(q4), this.client.session.delete(I4, Nt("USER_DISCONNECTED")), await this.client.core.relayer.unsubscribe(I4), q4;
      }
      return this.client.core.eventClient.deleteEvent({ eventId: g.eventId }), await this.client.core.pairing.updateMetadata({ topic: w3, metadata: m2.metadata }), await this.client.proposal.delete(o2, Nt("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: w3 }), await this.setExpiry(I4, Ei(J2)), { topic: I4, acknowledged: () => Promise.resolve(this.client.session.get(I4)) };
    }), c2(this, "reject", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidReject(e);
      } catch (r2) {
        throw this.client.logger.error("reject() -> isValidReject() failed"), r2;
      }
      const { id: t, reason: s } = e;
      let i3;
      try {
        i3 = this.client.proposal.get(t).pairingTopic;
      } catch (r2) {
        throw this.client.logger.error(`reject() -> proposal.get(${t}) failed`), r2;
      }
      i3 && (await this.sendError({ id: t, topic: i3, error: s, rpcOpts: N.wc_sessionPropose.reject }), await this.client.proposal.delete(t, Nt("USER_DISCONNECTED")));
    }), c2(this, "update", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidUpdate(e);
      } catch (h4) {
        throw this.client.logger.error("update() -> isValidUpdate() failed"), h4;
      }
      const { topic: t, namespaces: s } = e, { done: i3, resolve: r2, reject: o2 } = gi(), a2 = payloadId(), l4 = getBigIntRpcId().toString(), p4 = this.client.session.get(t).namespaces;
      return this.events.once(xi("session_update", a2), ({ error: h4 }) => {
        h4 ? o2(h4) : r2();
      }), await this.client.session.update(t, { namespaces: s }), await this.sendRequest({ topic: t, method: "wc_sessionUpdate", params: { namespaces: s }, throwOnFailedPublish: true, clientRpcId: a2, relayRpcId: l4 }).catch((h4) => {
        this.client.logger.error(h4), this.client.session.update(t, { namespaces: p4 }), o2(h4);
      }), { acknowledged: i3 };
    }), c2(this, "extend", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidExtend(e);
      } catch (a2) {
        throw this.client.logger.error("extend() -> isValidExtend() failed"), a2;
      }
      const { topic: t } = e, s = payloadId(), { done: i3, resolve: r2, reject: o2 } = gi();
      return this.events.once(xi("session_extend", s), ({ error: a2 }) => {
        a2 ? o2(a2) : r2();
      }), await this.setExpiry(t, Ei(J2)), this.sendRequest({ topic: t, method: "wc_sessionExtend", params: {}, clientRpcId: s, throwOnFailedPublish: true }).catch((a2) => {
        o2(a2);
      }), { acknowledged: i3 };
    }), c2(this, "request", async (e) => {
      this.isInitialized();
      try {
        await this.isValidRequest(e);
      } catch (_2) {
        throw this.client.logger.error("request() -> isValidRequest() failed"), _2;
      }
      const { chainId: t, request: s, topic: i3, expiry: r2 = N.wc_sessionRequest.req.ttl } = e, o2 = this.client.session.get(i3);
      (o2 == null ? void 0 : o2.transportType) === Q.relay && await this.confirmOnlineStateOrThrow();
      const a2 = payloadId(), l4 = getBigIntRpcId().toString(), { done: p4, resolve: h4, reject: u3 } = gi(r2, "Request expired. Please try again.");
      this.events.once(xi("session_request", a2), ({ error: _2, result: g }) => {
        _2 ? u3(_2) : h4(g);
      });
      const d3 = "wc_sessionRequest", w3 = this.getAppLinkIfEnabled(o2.peer.metadata, o2.transportType);
      if (w3) return await this.sendRequest({ clientRpcId: a2, relayRpcId: l4, topic: i3, method: d3, params: { request: b2(v3({}, s), { expiryTimestamp: Ei(r2) }), chainId: t }, expiry: r2, throwOnFailedPublish: true, appLink: w3 }).catch((_2) => u3(_2)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: t, id: a2 }), await p4();
      const m2 = { request: b2(v3({}, s), { expiryTimestamp: Ei(r2) }), chainId: t }, f7 = this.shouldSetTVF(d3, m2);
      return await Promise.all([new Promise(async (_2) => {
        await this.sendRequest(v3({ clientRpcId: a2, relayRpcId: l4, topic: i3, method: d3, params: m2, expiry: r2, throwOnFailedPublish: true }, f7 && { tvf: this.getTVFParams(a2, m2) })).catch((g) => u3(g)), this.client.events.emit("session_request_sent", { topic: i3, request: s, chainId: t, id: a2 }), _2();
      }), new Promise(async (_2) => {
        var g;
        if (!((g = o2.sessionConfig) != null && g.disableDeepLink)) {
          const A5 = await Oi(this.client.core.storage, Me3);
          await Si({ id: a2, topic: i3, wcDeepLink: A5 });
        }
        _2();
      }), p4()]).then((_2) => _2[2]);
    }), c2(this, "respond", async (e) => {
      this.isInitialized(), await this.isValidRespond(e);
      const { topic: t, response: s } = e, { id: i3 } = s, r2 = this.client.session.get(t);
      r2.transportType === Q.relay && await this.confirmOnlineStateOrThrow();
      const o2 = this.getAppLinkIfEnabled(r2.peer.metadata, r2.transportType);
      isJsonRpcResult(s) ? await this.sendResult({ id: i3, topic: t, result: s.result, throwOnFailedPublish: true, appLink: o2 }) : isJsonRpcError(s) && await this.sendError({ id: i3, topic: t, error: s.error, appLink: o2 }), this.cleanupAfterResponse(e);
    }), c2(this, "ping", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow();
      try {
        await this.isValidPing(e);
      } catch (s) {
        throw this.client.logger.error("ping() -> isValidPing() failed"), s;
      }
      const { topic: t } = e;
      if (this.client.session.keys.includes(t)) {
        const s = payloadId(), i3 = getBigIntRpcId().toString(), { done: r2, resolve: o2, reject: a2 } = gi();
        this.events.once(xi("session_ping", s), ({ error: l4 }) => {
          l4 ? a2(l4) : o2();
        }), await Promise.all([this.sendRequest({ topic: t, method: "wc_sessionPing", params: {}, throwOnFailedPublish: true, clientRpcId: s, relayRpcId: i3 }), r2()]);
      } else this.client.core.pairing.pairings.keys.includes(t) && (this.client.logger.warn("ping() on pairing topic is deprecated and will be removed in the next major release."), await this.client.core.pairing.ping({ topic: t }));
    }), c2(this, "emit", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidEmit(e);
      const { topic: t, event: s, chainId: i3 } = e, r2 = getBigIntRpcId().toString(), o2 = payloadId();
      await this.sendRequest({ topic: t, method: "wc_sessionEvent", params: { event: s, chainId: i3 }, throwOnFailedPublish: true, relayRpcId: r2, clientRpcId: o2 });
    }), c2(this, "disconnect", async (e) => {
      this.isInitialized(), await this.confirmOnlineStateOrThrow(), await this.isValidDisconnect(e);
      const { topic: t } = e;
      if (this.client.session.keys.includes(t)) await this.sendRequest({ topic: t, method: "wc_sessionDelete", params: Nt("USER_DISCONNECTED"), throwOnFailedPublish: true }), await this.deleteSession({ topic: t, emitEvent: false });
      else if (this.client.core.pairing.pairings.keys.includes(t)) await this.client.core.pairing.disconnect({ topic: t });
      else {
        const { message: s } = ht("MISMATCHED_TOPIC", `Session or pairing topic not found: ${t}`);
        throw new Error(s);
      }
    }), c2(this, "find", (e) => (this.isInitialized(), this.client.session.getAll().filter((t) => ua(t, e)))), c2(this, "getPendingSessionRequests", () => this.client.pendingRequest.getAll()), c2(this, "authenticate", async (e, t) => {
      var s;
      this.isInitialized(), this.isValidAuthenticate(e);
      const i3 = t && this.client.core.linkModeSupportedApps.includes(t) && ((s = this.client.metadata.redirect) == null ? void 0 : s.linkMode), r2 = i3 ? Q.link_mode : Q.relay;
      r2 === Q.relay && await this.confirmOnlineStateOrThrow();
      const { chains: o2, statement: a2 = "", uri: l4, domain: p4, nonce: h4, type: u3, exp: d3, nbf: w3, methods: m2 = [], expiry: f7 } = e, _2 = [...e.resources || []], { topic: g, uri: A5 } = await this.client.core.pairing.create({ methods: ["wc_sessionAuthenticate"], transportType: r2 });
      this.client.logger.info({ message: "Generated new pairing", pairing: { topic: g, uri: A5 } });
      const D3 = await this.client.core.crypto.generateKeyPair(), I4 = Pc(D3);
      if (await Promise.all([this.client.auth.authKeys.set(ce2, { responseTopic: I4, publicKey: D3 }), this.client.auth.pairingTopics.set(I4, { topic: I4, pairingTopic: g })]), await this.client.core.relayer.subscribe(I4, { transportType: r2 }), this.client.logger.info(`sending request to new pairing topic: ${g}`), m2.length > 0) {
        const { namespace: x2 } = Ne(o2[0]);
        let L4 = fs(x2, "request", m2);
        pe(_2) && (L4 = ls(L4, _2.pop())), _2.push(L4);
      }
      const T3 = f7 && f7 > N.wc_sessionAuthenticate.req.ttl ? f7 : N.wc_sessionAuthenticate.req.ttl, K5 = { authPayload: { type: u3 ?? "caip122", chains: o2, statement: a2, aud: l4, domain: p4, version: "1", nonce: h4, iat: (/* @__PURE__ */ new Date()).toISOString(), exp: d3, nbf: w3, resources: _2 }, requester: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: Ei(T3) }, fe3 = { eip155: { chains: o2, methods: [.../* @__PURE__ */ new Set(["personal_sign", ...m2])], events: ["chainChanged", "accountsChanged"] } }, q4 = { requiredNamespaces: {}, optionalNamespaces: fe3, relays: [{ protocol: "irn" }], pairingTopic: g, proposer: { publicKey: D3, metadata: this.client.metadata }, expiryTimestamp: Ei(N.wc_sessionPropose.req.ttl), id: payloadId() }, { done: Rt4, resolve: je4, reject: Se4 } = gi(T3, "Request expired"), te3 = payloadId(), le4 = xi("session_connect", q4.id), Re2 = xi("session_request", te3), pe4 = async ({ error: x2, session: L4 }) => {
        this.events.off(Re2, ve3), x2 ? Se4(x2) : L4 && je4({ session: L4 });
      }, ve3 = async (x2) => {
        var L4, Fe4, Qe5;
        if (await this.deletePendingAuthRequest(te3, { message: "fulfilled", code: 0 }), x2.error) {
          const ie4 = Nt("WC_METHOD_UNSUPPORTED", "wc_sessionAuthenticate");
          return x2.error.code === ie4.code ? void 0 : (this.events.off(le4, pe4), Se4(x2.error.message));
        }
        await this.deleteProposal(q4.id), this.events.off(le4, pe4);
        const { cacaos: He4, responder: Q4 } = x2.result, Te3 = [], ze4 = [];
        for (const ie4 of He4) {
          await is({ cacao: ie4, projectId: this.client.core.projectId }) || (this.client.logger.error(ie4, "Signature verification failed"), Se4(Nt("SESSION_SETTLEMENT_FAILED", "Signature verification failed")));
          const { p: qe4 } = ie4, Pe4 = pe(qe4.resources), Ye4 = [dr(qe4.iss)], vt2 = De(qe4.iss);
          if (Pe4) {
            const Ne3 = ds(Pe4), It4 = hs(Pe4);
            Te3.push(...Ne3), Ye4.push(...It4);
          }
          for (const Ne3 of Ye4) ze4.push(`${Ne3}:${vt2}`);
        }
        const se4 = await this.client.core.crypto.generateSharedKey(D3, Q4.publicKey);
        let he4;
        Te3.length > 0 && (he4 = { topic: se4, acknowledged: true, self: { publicKey: D3, metadata: this.client.metadata }, peer: Q4, controller: Q4.publicKey, expiry: Ei(J2), requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: g, namespaces: ca([...new Set(Te3)], [...new Set(ze4)]), transportType: r2 }, await this.client.core.relayer.subscribe(se4, { transportType: r2 }), await this.client.session.set(se4, he4), g && await this.client.core.pairing.updateMetadata({ topic: g, metadata: Q4.metadata }), he4 = this.client.session.get(se4)), (L4 = this.client.metadata.redirect) != null && L4.linkMode && (Fe4 = Q4.metadata.redirect) != null && Fe4.linkMode && (Qe5 = Q4.metadata.redirect) != null && Qe5.universal && t && (this.client.core.addLinkModeSupportedApp(Q4.metadata.redirect.universal), this.client.session.update(se4, { transportType: Q.link_mode })), je4({ auths: He4, session: he4 });
      };
      this.events.once(le4, pe4), this.events.once(Re2, ve3);
      let Ie4;
      try {
        if (i3) {
          const x2 = formatJsonRpcRequest("wc_sessionAuthenticate", K5, te3);
          this.client.core.history.set(g, x2);
          const L4 = await this.client.core.crypto.encode("", x2, { type: re, encoding: xe });
          Ie4 = Xc(t, g, L4);
        } else await Promise.all([this.sendRequest({ topic: g, method: "wc_sessionAuthenticate", params: K5, expiry: e.expiry, throwOnFailedPublish: true, clientRpcId: te3 }), this.sendRequest({ topic: g, method: "wc_sessionPropose", params: q4, expiry: N.wc_sessionPropose.req.ttl, throwOnFailedPublish: true, clientRpcId: q4.id })]);
      } catch (x2) {
        throw this.events.off(le4, pe4), this.events.off(Re2, ve3), x2;
      }
      return await this.setProposal(q4.id, q4), await this.setAuthRequest(te3, { request: b2(v3({}, K5), { verifyContext: {} }), pairingTopic: g, transportType: r2 }), { uri: Ie4 ?? A5, response: Rt4 };
    }), c2(this, "approveSessionAuthenticate", async (e) => {
      const { id: t, auths: s } = e, i3 = this.client.core.eventClient.createEvent({ properties: { topic: t.toString(), trace: [ir2.authenticated_session_approve_started] } });
      try {
        this.isInitialized();
      } catch (f7) {
        throw i3.setError(sr2.no_internet_connection), f7;
      }
      const r2 = this.getPendingAuthRequest(t);
      if (!r2) throw i3.setError(sr2.authenticated_session_pending_request_not_found), new Error(`Could not find pending auth request with id ${t}`);
      const o2 = r2.transportType || Q.relay;
      o2 === Q.relay && await this.confirmOnlineStateOrThrow();
      const a2 = r2.requester.publicKey, l4 = await this.client.core.crypto.generateKeyPair(), p4 = Pc(a2), h4 = { type: Ft, receiverPublicKey: a2, senderPublicKey: l4 }, u3 = [], d3 = [];
      for (const f7 of s) {
        if (!await is({ cacao: f7, projectId: this.client.core.projectId })) {
          i3.setError(sr2.invalid_cacao);
          const I4 = Nt("SESSION_SETTLEMENT_FAILED", "Signature verification failed");
          throw await this.sendError({ id: t, topic: p4, error: I4, encodeOpts: h4 }), new Error(I4.message);
        }
        i3.addTrace(ir2.cacaos_verified);
        const { p: _2 } = f7, g = pe(_2.resources), A5 = [dr(_2.iss)], D3 = De(_2.iss);
        if (g) {
          const I4 = ds(g), T3 = hs(g);
          u3.push(...I4), A5.push(...T3);
        }
        for (const I4 of A5) d3.push(`${I4}:${D3}`);
      }
      const w3 = await this.client.core.crypto.generateSharedKey(l4, a2);
      i3.addTrace(ir2.create_authenticated_session_topic);
      let m2;
      if ((u3 == null ? void 0 : u3.length) > 0) {
        m2 = { topic: w3, acknowledged: true, self: { publicKey: l4, metadata: this.client.metadata }, peer: { publicKey: a2, metadata: r2.requester.metadata }, controller: a2, expiry: Ei(J2), authentication: s, requiredNamespaces: {}, optionalNamespaces: {}, relay: { protocol: "irn" }, pairingTopic: r2.pairingTopic, namespaces: ca([...new Set(u3)], [...new Set(d3)]), transportType: o2 }, i3.addTrace(ir2.subscribing_authenticated_session_topic);
        try {
          await this.client.core.relayer.subscribe(w3, { transportType: o2 });
        } catch (f7) {
          throw i3.setError(sr2.subscribe_authenticated_session_topic_failure), f7;
        }
        i3.addTrace(ir2.subscribe_authenticated_session_topic_success), await this.client.session.set(w3, m2), i3.addTrace(ir2.store_authenticated_session), await this.client.core.pairing.updateMetadata({ topic: r2.pairingTopic, metadata: r2.requester.metadata });
      }
      i3.addTrace(ir2.publishing_authenticated_session_approve);
      try {
        await this.sendResult({ topic: p4, id: t, result: { cacaos: s, responder: { publicKey: l4, metadata: this.client.metadata } }, encodeOpts: h4, throwOnFailedPublish: true, appLink: this.getAppLinkIfEnabled(r2.requester.metadata, o2) });
      } catch (f7) {
        throw i3.setError(sr2.authenticated_session_approve_publish_failure), f7;
      }
      return await this.client.auth.requests.delete(t, { message: "fulfilled", code: 0 }), await this.client.core.pairing.activate({ topic: r2.pairingTopic }), this.client.core.eventClient.deleteEvent({ eventId: i3.eventId }), { session: m2 };
    }), c2(this, "rejectSessionAuthenticate", async (e) => {
      this.isInitialized();
      const { id: t, reason: s } = e, i3 = this.getPendingAuthRequest(t);
      if (!i3) throw new Error(`Could not find pending auth request with id ${t}`);
      i3.transportType === Q.relay && await this.confirmOnlineStateOrThrow();
      const r2 = i3.requester.publicKey, o2 = await this.client.core.crypto.generateKeyPair(), a2 = Pc(r2), l4 = { type: Ft, receiverPublicKey: r2, senderPublicKey: o2 };
      await this.sendError({ id: t, topic: a2, error: s, encodeOpts: l4, rpcOpts: N.wc_sessionAuthenticate.reject, appLink: this.getAppLinkIfEnabled(i3.requester.metadata, i3.transportType) }), await this.client.auth.requests.delete(t, { message: "rejected", code: 0 }), await this.client.proposal.delete(t, Nt("USER_DISCONNECTED"));
    }), c2(this, "formatAuthMessage", (e) => {
      this.isInitialized();
      const { request: t, iss: s } = e;
      return hr(t, s);
    }), c2(this, "processRelayMessageCache", () => {
      setTimeout(async () => {
        if (this.relayMessageCache.length !== 0) for (; this.relayMessageCache.length > 0; ) try {
          const e = this.relayMessageCache.shift();
          e && await this.onRelayMessage(e);
        } catch (e) {
          this.client.logger.error(e);
        }
      }, 50);
    }), c2(this, "cleanupDuplicatePairings", async (e) => {
      if (e.pairingTopic) try {
        const t = this.client.core.pairing.pairings.get(e.pairingTopic), s = this.client.core.pairing.pairings.getAll().filter((i3) => {
          var r2, o2;
          return ((r2 = i3.peerMetadata) == null ? void 0 : r2.url) && ((o2 = i3.peerMetadata) == null ? void 0 : o2.url) === e.peer.metadata.url && i3.topic && i3.topic !== t.topic;
        });
        if (s.length === 0) return;
        this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`), await Promise.all(s.map((i3) => this.client.core.pairing.disconnect({ topic: i3.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (t) {
        this.client.logger.error(t);
      }
    }), c2(this, "deleteSession", async (e) => {
      var t;
      const { topic: s, expirerHasDeleted: i3 = false, emitEvent: r2 = true, id: o2 = 0 } = e, { self: a2 } = this.client.session.get(s);
      await this.client.core.relayer.unsubscribe(s), await this.client.session.delete(s, Nt("USER_DISCONNECTED")), this.addToRecentlyDeleted(s, "session"), this.client.core.crypto.keychain.has(a2.publicKey) && await this.client.core.crypto.deleteKeyPair(a2.publicKey), this.client.core.crypto.keychain.has(s) && await this.client.core.crypto.deleteSymKey(s), i3 || this.client.core.expirer.del(s), this.client.core.storage.removeItem(Me3).catch((l4) => this.client.logger.warn(l4)), this.getPendingSessionRequests().forEach((l4) => {
        l4.topic === s && this.deletePendingSessionRequest(l4.id, Nt("USER_DISCONNECTED"));
      }), s === ((t = this.sessionRequestQueue.queue[0]) == null ? void 0 : t.topic) && (this.sessionRequestQueue.state = $2.idle), r2 && this.client.events.emit("session_delete", { id: o2, topic: s });
    }), c2(this, "deleteProposal", async (e, t) => {
      if (t) try {
        const s = this.client.proposal.get(e), i3 = this.client.core.eventClient.getEvent({ topic: s.pairingTopic });
        i3 == null ? void 0 : i3.setError(tr2.proposal_expired);
      } catch {
      }
      await Promise.all([this.client.proposal.delete(e, Nt("USER_DISCONNECTED")), t ? Promise.resolve() : this.client.core.expirer.del(e)]), this.addToRecentlyDeleted(e, "proposal");
    }), c2(this, "deletePendingSessionRequest", async (e, t, s = false) => {
      await Promise.all([this.client.pendingRequest.delete(e, t), s ? Promise.resolve() : this.client.core.expirer.del(e)]), this.addToRecentlyDeleted(e, "request"), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((i3) => i3.id !== e), s && (this.sessionRequestQueue.state = $2.idle, this.client.events.emit("session_request_expire", { id: e }));
    }), c2(this, "deletePendingAuthRequest", async (e, t, s = false) => {
      await Promise.all([this.client.auth.requests.delete(e, t), s ? Promise.resolve() : this.client.core.expirer.del(e)]);
    }), c2(this, "setExpiry", async (e, t) => {
      this.client.session.keys.includes(e) && (this.client.core.expirer.set(e, t), await this.client.session.update(e, { expiry: t }));
    }), c2(this, "setProposal", async (e, t) => {
      this.client.core.expirer.set(e, Ei(N.wc_sessionPropose.req.ttl)), await this.client.proposal.set(e, t);
    }), c2(this, "setAuthRequest", async (e, t) => {
      const { request: s, pairingTopic: i3, transportType: r2 = Q.relay } = t;
      this.client.core.expirer.set(e, s.expiryTimestamp), await this.client.auth.requests.set(e, { authPayload: s.authPayload, requester: s.requester, expiryTimestamp: s.expiryTimestamp, id: e, pairingTopic: i3, verifyContext: s.verifyContext, transportType: r2 });
    }), c2(this, "setPendingSessionRequest", async (e) => {
      const { id: t, topic: s, params: i3, verifyContext: r2 } = e, o2 = i3.request.expiryTimestamp || Ei(N.wc_sessionRequest.req.ttl);
      this.client.core.expirer.set(t, o2), await this.client.pendingRequest.set(t, { id: t, topic: s, params: i3, verifyContext: r2 });
    }), c2(this, "sendRequest", async (e) => {
      const { topic: t, method: s, params: i3, expiry: r2, relayRpcId: o2, clientRpcId: a2, throwOnFailedPublish: l4, appLink: p4, tvf: h4 } = e, u3 = formatJsonRpcRequest(s, i3, a2);
      let d3;
      const w3 = !!p4;
      try {
        const _2 = w3 ? xe : qt;
        d3 = await this.client.core.crypto.encode(t, u3, { encoding: _2 });
      } catch (_2) {
        throw await this.cleanup(), this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${t} failed`), _2;
      }
      let m2;
      if (gt2.includes(s)) {
        const _2 = kc(JSON.stringify(u3)), g = kc(d3);
        m2 = await this.client.core.verify.register({ id: g, decryptedId: _2 });
      }
      const f7 = N[s].req;
      if (f7.attestation = m2, r2 && (f7.ttl = r2), o2 && (f7.id = o2), this.client.core.history.set(t, u3), w3) {
        const _2 = Xc(p4, t, d3);
        await global.Linking.openURL(_2, this.client.name);
      } else {
        const _2 = N[s].req;
        r2 && (_2.ttl = r2), o2 && (_2.id = o2), _2.tvf = b2(v3({}, h4), { correlationId: u3.id }), l4 ? (_2.internal = b2(v3({}, _2.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(t, d3, _2)) : this.client.core.relayer.publish(t, d3, _2).catch((g) => this.client.logger.error(g));
      }
      return u3.id;
    }), c2(this, "sendResult", async (e) => {
      const { id: t, topic: s, result: i3, throwOnFailedPublish: r2, encodeOpts: o2, appLink: a2 } = e, l4 = formatJsonRpcResult(t, i3);
      let p4;
      const h4 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const w3 = h4 ? xe : qt;
        p4 = await this.client.core.crypto.encode(s, l4, b2(v3({}, o2 || {}), { encoding: w3 }));
      } catch (w3) {
        throw await this.cleanup(), this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`), w3;
      }
      let u3, d3;
      try {
        u3 = await this.client.core.history.get(s, t);
        const w3 = u3.request;
        try {
          this.shouldSetTVF(w3.method, w3.params) && (d3 = this.getTVFParams(t, w3.params, i3));
        } catch (m2) {
          this.client.logger.warn("sendResult() -> getTVFParams() failed", m2);
        }
      } catch (w3) {
        throw this.client.logger.error(`sendResult() -> history.get(${s}, ${t}) failed`), w3;
      }
      if (h4) {
        const w3 = Xc(a2, s, p4);
        await global.Linking.openURL(w3, this.client.name);
      } else {
        const w3 = u3.request.method, m2 = N[w3].res;
        m2.tvf = b2(v3({}, d3), { correlationId: t }), r2 ? (m2.internal = b2(v3({}, m2.internal), { throwOnFailedPublish: true }), await this.client.core.relayer.publish(s, p4, m2)) : this.client.core.relayer.publish(s, p4, m2).catch((f7) => this.client.logger.error(f7));
      }
      await this.client.core.history.resolve(l4);
    }), c2(this, "sendError", async (e) => {
      const { id: t, topic: s, error: i3, encodeOpts: r2, rpcOpts: o2, appLink: a2 } = e, l4 = formatJsonRpcError(t, i3);
      let p4;
      const h4 = a2 && typeof (global == null ? void 0 : global.Linking) < "u";
      try {
        const d3 = h4 ? xe : qt;
        p4 = await this.client.core.crypto.encode(s, l4, b2(v3({}, r2 || {}), { encoding: d3 }));
      } catch (d3) {
        throw await this.cleanup(), this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`), d3;
      }
      let u3;
      try {
        u3 = await this.client.core.history.get(s, t);
      } catch (d3) {
        throw this.client.logger.error(`sendError() -> history.get(${s}, ${t}) failed`), d3;
      }
      if (h4) {
        const d3 = Xc(a2, s, p4);
        await global.Linking.openURL(d3, this.client.name);
      } else {
        const d3 = u3.request.method, w3 = o2 || N[d3].res;
        this.client.core.relayer.publish(s, p4, w3);
      }
      await this.client.core.history.resolve(l4);
    }), c2(this, "cleanup", async () => {
      const e = [], t = [];
      this.client.session.getAll().forEach((s) => {
        let i3 = false;
        vi(s.expiry) && (i3 = true), this.client.core.crypto.keychain.has(s.topic) || (i3 = true), i3 && e.push(s.topic);
      }), this.client.proposal.getAll().forEach((s) => {
        vi(s.expiryTimestamp) && t.push(s.id);
      }), await Promise.all([...e.map((s) => this.deleteSession({ topic: s })), ...t.map((s) => this.deleteProposal(s))]);
    }), c2(this, "onProviderMessageEvent", async (e) => {
      !this.initialized || this.relayMessageCache.length > 0 ? this.relayMessageCache.push(e) : await this.onRelayMessage(e);
    }), c2(this, "onRelayEventRequest", async (e) => {
      this.requestQueue.queue.push(e), await this.processRequestsQueue();
    }), c2(this, "processRequestsQueue", async () => {
      if (this.requestQueue.state === $2.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = $2.active;
        const e = this.requestQueue.queue.shift();
        if (e) try {
          await this.processRequest(e);
        } catch (t) {
          this.client.logger.warn(t);
        }
      }
      this.requestQueue.state = $2.idle;
    }), c2(this, "processRequest", async (e) => {
      const { topic: t, payload: s, attestation: i3, transportType: r2, encryptedId: o2 } = e, a2 = s.method;
      if (!this.shouldIgnorePairingRequest({ topic: t, requestMethod: a2 })) switch (a2) {
        case "wc_sessionPropose":
          return await this.onSessionProposeRequest({ topic: t, payload: s, attestation: i3, encryptedId: o2 });
        case "wc_sessionSettle":
          return await this.onSessionSettleRequest(t, s);
        case "wc_sessionUpdate":
          return await this.onSessionUpdateRequest(t, s);
        case "wc_sessionExtend":
          return await this.onSessionExtendRequest(t, s);
        case "wc_sessionPing":
          return await this.onSessionPingRequest(t, s);
        case "wc_sessionDelete":
          return await this.onSessionDeleteRequest(t, s);
        case "wc_sessionRequest":
          return await this.onSessionRequest({ topic: t, payload: s, attestation: i3, encryptedId: o2, transportType: r2 });
        case "wc_sessionEvent":
          return await this.onSessionEventRequest(t, s);
        case "wc_sessionAuthenticate":
          return await this.onSessionAuthenticateRequest({ topic: t, payload: s, attestation: i3, encryptedId: o2, transportType: r2 });
        default:
          return this.client.logger.info(`Unsupported request method ${a2}`);
      }
    }), c2(this, "onRelayEventResponse", async (e) => {
      const { topic: t, payload: s, transportType: i3 } = e, r2 = (await this.client.core.history.get(t, s.id)).request.method;
      switch (r2) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(t, s, i3);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(t, s);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(t, s);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(t, s);
        case "wc_sessionPing":
          return this.onSessionPingResponse(t, s);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(t, s);
        case "wc_sessionAuthenticate":
          return this.onSessionAuthenticateResponse(t, s);
        default:
          return this.client.logger.info(`Unsupported response method ${r2}`);
      }
    }), c2(this, "onRelayEventUnknownPayload", (e) => {
      const { topic: t } = e, { message: s } = ht("MISSING_OR_INVALID", `Decoded payload on topic ${t} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(s);
    }), c2(this, "shouldIgnorePairingRequest", (e) => {
      const { topic: t, requestMethod: s } = e, i3 = this.expectedPairingMethodMap.get(t);
      return !i3 || i3.includes(s) ? false : !!(i3.includes("wc_sessionAuthenticate") && this.client.events.listenerCount("session_authenticate") > 0);
    }), c2(this, "onSessionProposeRequest", async (e) => {
      const { topic: t, payload: s, attestation: i3, encryptedId: r2 } = e, { params: o2, id: a2 } = s;
      try {
        const l4 = this.client.core.eventClient.getEvent({ topic: t });
        this.client.events.listenerCount("session_proposal") === 0 && (console.warn("No listener for session_proposal event"), l4 == null ? void 0 : l4.setError(Y2.proposal_listener_not_found)), this.isValidConnect(v3({}, s.params));
        const p4 = o2.expiryTimestamp || Ei(N.wc_sessionPropose.req.ttl), h4 = v3({ id: a2, pairingTopic: t, expiryTimestamp: p4 }, o2);
        await this.setProposal(a2, h4);
        const u3 = await this.getVerifyContext({ attestationId: i3, hash: kc(JSON.stringify(s)), encryptedId: r2, metadata: h4.proposer.metadata });
        l4 == null ? void 0 : l4.addTrace(G2.emit_session_proposal), this.client.events.emit("session_proposal", { id: a2, params: h4, verifyContext: u3 });
      } catch (l4) {
        await this.sendError({ id: a2, topic: t, error: l4, rpcOpts: N.wc_sessionPropose.autoReject }), this.client.logger.error(l4);
      }
    }), c2(this, "onSessionProposeResponse", async (e, t, s) => {
      const { id: i3 } = t;
      if (isJsonRpcResult(t)) {
        const { result: r2 } = t;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: r2 });
        const o2 = this.client.proposal.get(i3);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o2 });
        const a2 = o2.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: a2 });
        const l4 = r2.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: l4 });
        const p4 = await this.client.core.crypto.generateSharedKey(a2, l4);
        this.pendingSessions.set(i3, { sessionTopic: p4, pairingTopic: e, proposalId: i3, publicKey: a2 });
        const h4 = await this.client.core.relayer.subscribe(p4, { transportType: s });
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: h4 }), await this.client.core.pairing.activate({ topic: e });
      } else if (isJsonRpcError(t)) {
        await this.client.proposal.delete(i3, Nt("USER_DISCONNECTED"));
        const r2 = xi("session_connect", i3);
        if (this.events.listenerCount(r2) === 0) throw new Error(`emitting ${r2} without any listeners, 954`);
        this.events.emit(r2, { error: t.error });
      }
    }), c2(this, "onSessionSettleRequest", async (e, t) => {
      const { id: s, params: i3 } = t;
      try {
        this.isValidSessionSettleRequest(i3);
        const { relay: r2, controller: o2, expiry: a2, namespaces: l4, sessionProperties: p4, scopedProperties: h4, sessionConfig: u3 } = t.params, d3 = [...this.pendingSessions.values()].find((f7) => f7.sessionTopic === e);
        if (!d3) return this.client.logger.error(`Pending session not found for topic ${e}`);
        const w3 = this.client.proposal.get(d3.proposalId), m2 = b2(v3(v3(v3({ topic: e, relay: r2, expiry: a2, namespaces: l4, acknowledged: true, pairingTopic: d3.pairingTopic, requiredNamespaces: w3.requiredNamespaces, optionalNamespaces: w3.optionalNamespaces, controller: o2.publicKey, self: { publicKey: d3.publicKey, metadata: this.client.metadata }, peer: { publicKey: o2.publicKey, metadata: o2.metadata } }, p4 && { sessionProperties: p4 }), h4 && { scopedProperties: h4 }), u3 && { sessionConfig: u3 }), { transportType: Q.relay });
        await this.client.session.set(m2.topic, m2), await this.setExpiry(m2.topic, m2.expiry), await this.client.core.pairing.updateMetadata({ topic: d3.pairingTopic, metadata: m2.peer.metadata }), this.client.events.emit("session_connect", { session: m2 }), this.events.emit(xi("session_connect", d3.proposalId), { session: m2 }), this.pendingSessions.delete(d3.proposalId), this.deleteProposal(d3.proposalId, false), this.cleanupDuplicatePairings(m2), await this.sendResult({ id: t.id, topic: e, result: true, throwOnFailedPublish: true });
      } catch (r2) {
        await this.sendError({ id: s, topic: e, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionSettleResponse", async (e, t) => {
      const { id: s } = t;
      isJsonRpcResult(t) ? (await this.client.session.update(e, { acknowledged: true }), this.events.emit(xi("session_approve", s), {})) : isJsonRpcError(t) && (await this.client.session.delete(e, Nt("USER_DISCONNECTED")), this.events.emit(xi("session_approve", s), { error: t.error }));
    }), c2(this, "onSessionUpdateRequest", async (e, t) => {
      const { params: s, id: i3 } = t;
      try {
        const r2 = `${e}_session_update`, o2 = Ra.get(r2);
        if (o2 && this.isRequestOutOfSync(o2, i3)) {
          this.client.logger.warn(`Discarding out of sync request - ${i3}`), this.sendError({ id: i3, topic: e, error: Nt("INVALID_UPDATE_REQUEST") });
          return;
        }
        this.isValidUpdate(v3({ topic: e }, s));
        try {
          Ra.set(r2, i3), await this.client.session.update(e, { namespaces: s.namespaces }), await this.sendResult({ id: i3, topic: e, result: true, throwOnFailedPublish: true });
        } catch (a2) {
          throw Ra.delete(r2), a2;
        }
        this.client.events.emit("session_update", { id: i3, topic: e, params: s });
      } catch (r2) {
        await this.sendError({ id: i3, topic: e, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "isRequestOutOfSync", (e, t) => t.toString().slice(0, -3) < e.toString().slice(0, -3)), c2(this, "onSessionUpdateResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_update", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(xi("session_update", s), {}) : isJsonRpcError(t) && this.events.emit(xi("session_update", s), { error: t.error });
    }), c2(this, "onSessionExtendRequest", async (e, t) => {
      const { id: s } = t;
      try {
        this.isValidExtend({ topic: e }), await this.setExpiry(e, Ei(J2)), await this.sendResult({ id: s, topic: e, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_extend", { id: s, topic: e });
      } catch (i3) {
        await this.sendError({ id: s, topic: e, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionExtendResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_extend", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(xi("session_extend", s), {}) : isJsonRpcError(t) && this.events.emit(xi("session_extend", s), { error: t.error });
    }), c2(this, "onSessionPingRequest", async (e, t) => {
      const { id: s } = t;
      try {
        this.isValidPing({ topic: e }), await this.sendResult({ id: s, topic: e, result: true, throwOnFailedPublish: true }), this.client.events.emit("session_ping", { id: s, topic: e });
      } catch (i3) {
        await this.sendError({ id: s, topic: e, error: i3 }), this.client.logger.error(i3);
      }
    }), c2(this, "onSessionPingResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_ping", s);
      setTimeout(() => {
        if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners 2176`);
        isJsonRpcResult(t) ? this.events.emit(xi("session_ping", s), {}) : isJsonRpcError(t) && this.events.emit(xi("session_ping", s), { error: t.error });
      }, 500);
    }), c2(this, "onSessionDeleteRequest", async (e, t) => {
      const { id: s } = t;
      try {
        this.isValidDisconnect({ topic: e, reason: t.params }), Promise.all([new Promise((i3) => {
          this.client.core.relayer.once(C2.publish, async () => {
            i3(await this.deleteSession({ topic: e, id: s }));
          });
        }), this.sendResult({ id: s, topic: e, result: true, throwOnFailedPublish: true }), this.cleanupPendingSentRequestsForTopic({ topic: e, error: Nt("USER_DISCONNECTED") })]).catch((i3) => this.client.logger.error(i3));
      } catch (i3) {
        this.client.logger.error(i3);
      }
    }), c2(this, "onSessionRequest", async (e) => {
      var t, s, i3;
      const { topic: r2, payload: o2, attestation: a2, encryptedId: l4, transportType: p4 } = e, { id: h4, params: u3 } = o2;
      try {
        await this.isValidRequest(v3({ topic: r2 }, u3));
        const d3 = this.client.session.get(r2), w3 = await this.getVerifyContext({ attestationId: a2, hash: kc(JSON.stringify(formatJsonRpcRequest("wc_sessionRequest", u3, h4))), encryptedId: l4, metadata: d3.peer.metadata, transportType: p4 }), m2 = { id: h4, topic: r2, params: u3, verifyContext: w3 };
        await this.setPendingSessionRequest(m2), p4 === Q.link_mode && (t = d3.peer.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp((s = d3.peer.metadata.redirect) == null ? void 0 : s.universal), (i3 = this.client.signConfig) != null && i3.disableRequestQueue ? this.emitSessionRequest(m2) : (this.addSessionRequestToSessionRequestQueue(m2), this.processSessionRequestQueue());
      } catch (d3) {
        await this.sendError({ id: h4, topic: r2, error: d3 }), this.client.logger.error(d3);
      }
    }), c2(this, "onSessionRequestResponse", (e, t) => {
      const { id: s } = t, i3 = xi("session_request", s);
      if (this.events.listenerCount(i3) === 0) throw new Error(`emitting ${i3} without any listeners`);
      isJsonRpcResult(t) ? this.events.emit(xi("session_request", s), { result: t.result }) : isJsonRpcError(t) && this.events.emit(xi("session_request", s), { error: t.error });
    }), c2(this, "onSessionEventRequest", async (e, t) => {
      const { id: s, params: i3 } = t;
      try {
        const r2 = `${e}_session_event_${i3.event.name}`, o2 = Ra.get(r2);
        if (o2 && this.isRequestOutOfSync(o2, s)) {
          this.client.logger.info(`Discarding out of sync request - ${s}`);
          return;
        }
        this.isValidEmit(v3({ topic: e }, i3)), this.client.events.emit("session_event", { id: s, topic: e, params: i3 }), Ra.set(r2, s);
      } catch (r2) {
        await this.sendError({ id: s, topic: e, error: r2 }), this.client.logger.error(r2);
      }
    }), c2(this, "onSessionAuthenticateResponse", (e, t) => {
      const { id: s } = t;
      this.client.logger.trace({ type: "method", method: "onSessionAuthenticateResponse", topic: e, payload: t }), isJsonRpcResult(t) ? this.events.emit(xi("session_request", s), { result: t.result }) : isJsonRpcError(t) && this.events.emit(xi("session_request", s), { error: t.error });
    }), c2(this, "onSessionAuthenticateRequest", async (e) => {
      var t;
      const { topic: s, payload: i3, attestation: r2, encryptedId: o2, transportType: a2 } = e;
      try {
        const { requester: l4, authPayload: p4, expiryTimestamp: h4 } = i3.params, u3 = await this.getVerifyContext({ attestationId: r2, hash: kc(JSON.stringify(i3)), encryptedId: o2, metadata: l4.metadata, transportType: a2 }), d3 = { requester: l4, pairingTopic: s, id: i3.id, authPayload: p4, verifyContext: u3, expiryTimestamp: h4 };
        await this.setAuthRequest(i3.id, { request: d3, pairingTopic: s, transportType: a2 }), a2 === Q.link_mode && (t = l4.metadata.redirect) != null && t.universal && this.client.core.addLinkModeSupportedApp(l4.metadata.redirect.universal), this.client.events.emit("session_authenticate", { topic: s, params: i3.params, id: i3.id, verifyContext: u3 });
      } catch (l4) {
        this.client.logger.error(l4);
        const p4 = i3.params.requester.publicKey, h4 = await this.client.core.crypto.generateKeyPair(), u3 = this.getAppLinkIfEnabled(i3.params.requester.metadata, a2), d3 = { type: Ft, receiverPublicKey: p4, senderPublicKey: h4 };
        await this.sendError({ id: i3.id, topic: s, error: l4, encodeOpts: d3, rpcOpts: N.wc_sessionAuthenticate.autoReject, appLink: u3 });
      }
    }), c2(this, "addSessionRequestToSessionRequestQueue", (e) => {
      this.sessionRequestQueue.queue.push(e);
    }), c2(this, "cleanupAfterResponse", (e) => {
      this.deletePendingSessionRequest(e.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = $2.idle, this.processSessionRequestQueue();
      }, (0, import_time3.toMiliseconds)(this.requestQueueDelay));
    }), c2(this, "cleanupPendingSentRequestsForTopic", ({ topic: e, error: t }) => {
      const s = this.client.core.history.pending;
      s.length > 0 && s.filter((i3) => i3.topic === e && i3.request.method === "wc_sessionRequest").forEach((i3) => {
        const r2 = i3.request.id, o2 = xi("session_request", r2);
        if (this.events.listenerCount(o2) === 0) throw new Error(`emitting ${o2} without any listeners`);
        this.events.emit(xi("session_request", i3.request.id), { error: t });
      });
    }), c2(this, "processSessionRequestQueue", () => {
      if (this.sessionRequestQueue.state === $2.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const e = this.sessionRequestQueue.queue[0];
      if (!e) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = $2.active, this.emitSessionRequest(e);
      } catch (t) {
        this.client.logger.error(t);
      }
    }), c2(this, "emitSessionRequest", (e) => {
      this.client.events.emit("session_request", e);
    }), c2(this, "onPairingCreated", (e) => {
      if (e.methods && this.expectedPairingMethodMap.set(e.topic, e.methods), e.active) return;
      const t = this.client.proposal.getAll().find((s) => s.pairingTopic === e.topic);
      t && this.onSessionProposeRequest({ topic: e.topic, payload: formatJsonRpcRequest("wc_sessionPropose", b2(v3({}, t), { requiredNamespaces: t.requiredNamespaces, optionalNamespaces: t.optionalNamespaces, relays: t.relays, proposer: t.proposer, sessionProperties: t.sessionProperties, scopedProperties: t.scopedProperties }), t.id) });
    }), c2(this, "isValidConnect", async (e) => {
      if (!ma(e)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(e)}`);
        throw new Error(l4);
      }
      const { pairingTopic: t, requiredNamespaces: s, optionalNamespaces: i3, sessionProperties: r2, scopedProperties: o2, relays: a2 } = e;
      if (Et(t) || await this.isValidPairingTopic(t), !ga(a2, true)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", `connect() relays: ${a2}`);
        throw new Error(l4);
      }
      if (!Et(s) && Oe(s) !== 0) {
        const l4 = "requiredNamespaces are deprecated and are automatically assigned to optionalNamespaces";
        ["fatal", "error", "silent"].includes(this.client.logger.level) ? console.warn(l4) : this.client.logger.warn(l4), this.validateNamespaces(s, "requiredNamespaces");
      }
      if (!Et(i3) && Oe(i3) !== 0 && this.validateNamespaces(i3, "optionalNamespaces"), Et(r2) || this.validateSessionProps(r2, "sessionProperties"), !Et(o2)) {
        this.validateSessionProps(o2, "scopedProperties");
        const l4 = Object.keys(s || {}).concat(Object.keys(i3 || {}));
        if (!Object.keys(o2).every((p4) => l4.includes(p4))) throw new Error(`Scoped properties must be a subset of required/optional namespaces, received: ${JSON.stringify(o2)}, required/optional namespaces: ${JSON.stringify(l4)}`);
      }
    }), c2(this, "validateNamespaces", (e, t) => {
      const s = pa(e, "connect()", t);
      if (s) throw new Error(s.message);
    }), c2(this, "isValidApprove", async (e) => {
      if (!ma(e)) throw new Error(ht("MISSING_OR_INVALID", `approve() params: ${e}`).message);
      const { id: t, namespaces: s, relayProtocol: i3, sessionProperties: r2, scopedProperties: o2 } = e;
      this.checkRecentlyDeleted(t), await this.isValidProposalId(t);
      const a2 = this.client.proposal.get(t), l4 = Bo(s, "approve()");
      if (l4) throw new Error(l4.message);
      const p4 = No(a2.requiredNamespaces, s, "approve()");
      if (p4) throw new Error(p4.message);
      if (!nt(i3, true)) {
        const { message: h4 } = ht("MISSING_OR_INVALID", `approve() relayProtocol: ${i3}`);
        throw new Error(h4);
      }
      if (Et(r2) || this.validateSessionProps(r2, "sessionProperties"), !Et(o2)) {
        this.validateSessionProps(o2, "scopedProperties");
        const h4 = new Set(Object.keys(s));
        if (!Object.keys(o2).every((u3) => h4.has(u3))) throw new Error(`Scoped properties must be a subset of approved namespaces, received: ${JSON.stringify(o2)}, approved namespaces: ${Array.from(h4).join(", ")}`);
      }
    }), c2(this, "isValidReject", async (e) => {
      if (!ma(e)) {
        const { message: i3 } = ht("MISSING_OR_INVALID", `reject() params: ${e}`);
        throw new Error(i3);
      }
      const { id: t, reason: s } = e;
      if (this.checkRecentlyDeleted(t), await this.isValidProposalId(t), !wa(s)) {
        const { message: i3 } = ht("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(s)}`);
        throw new Error(i3);
      }
    }), c2(this, "isValidSessionSettleRequest", (e) => {
      if (!ma(e)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${e}`);
        throw new Error(l4);
      }
      const { relay: t, controller: s, namespaces: i3, expiry: r2 } = e;
      if (!Io(t)) {
        const { message: l4 } = ht("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(l4);
      }
      const o2 = ha(s, "onSessionSettleRequest()");
      if (o2) throw new Error(o2.message);
      const a2 = Bo(i3, "onSessionSettleRequest()");
      if (a2) throw new Error(a2.message);
      if (vi(r2)) {
        const { message: l4 } = ht("EXPIRED", "onSessionSettleRequest()");
        throw new Error(l4);
      }
    }), c2(this, "isValidUpdate", async (e) => {
      if (!ma(e)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `update() params: ${e}`);
        throw new Error(a2);
      }
      const { topic: t, namespaces: s } = e;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
      const i3 = this.client.session.get(t), r2 = Bo(s, "update()");
      if (r2) throw new Error(r2.message);
      const o2 = No(i3.requiredNamespaces, s, "update()");
      if (o2) throw new Error(o2.message);
    }), c2(this, "isValidExtend", async (e) => {
      if (!ma(e)) {
        const { message: s } = ht("MISSING_OR_INVALID", `extend() params: ${e}`);
        throw new Error(s);
      }
      const { topic: t } = e;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
    }), c2(this, "isValidRequest", async (e) => {
      if (!ma(e)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() params: ${e}`);
        throw new Error(a2);
      }
      const { topic: t, request: s, chainId: i3, expiry: r2 } = e;
      this.checkRecentlyDeleted(t), await this.isValidSessionTopic(t);
      const { namespaces: o2 } = this.client.session.get(t);
      if (!xa(o2, i3)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() chainId: ${i3}`);
        throw new Error(a2);
      }
      if (!ba(s)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() ${JSON.stringify(s)}`);
        throw new Error(a2);
      }
      if (!Sa(o2, i3, s.method)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() method: ${s.method}`);
        throw new Error(a2);
      }
      if (r2 && !Ia(r2, _e3)) {
        const { message: a2 } = ht("MISSING_OR_INVALID", `request() expiry: ${r2}. Expiry must be a number (in seconds) between ${_e3.min} and ${_e3.max}`);
        throw new Error(a2);
      }
    }), c2(this, "isValidRespond", async (e) => {
      var t;
      if (!ma(e)) {
        const { message: r2 } = ht("MISSING_OR_INVALID", `respond() params: ${e}`);
        throw new Error(r2);
      }
      const { topic: s, response: i3 } = e;
      try {
        await this.isValidSessionTopic(s);
      } catch (r2) {
        throw (t = e == null ? void 0 : e.response) != null && t.id && this.cleanupAfterResponse(e), r2;
      }
      if (!Ea(i3)) {
        const { message: r2 } = ht("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(i3)}`);
        throw new Error(r2);
      }
    }), c2(this, "isValidPing", async (e) => {
      if (!ma(e)) {
        const { message: s } = ht("MISSING_OR_INVALID", `ping() params: ${e}`);
        throw new Error(s);
      }
      const { topic: t } = e;
      await this.isValidSessionOrPairingTopic(t);
    }), c2(this, "isValidEmit", async (e) => {
      if (!ma(e)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() params: ${e}`);
        throw new Error(o2);
      }
      const { topic: t, event: s, chainId: i3 } = e;
      await this.isValidSessionTopic(t);
      const { namespaces: r2 } = this.client.session.get(t);
      if (!xa(r2, i3)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() chainId: ${i3}`);
        throw new Error(o2);
      }
      if (!va(s)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(o2);
      }
      if (!Oa(r2, i3, s.name)) {
        const { message: o2 } = ht("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(s)}`);
        throw new Error(o2);
      }
    }), c2(this, "isValidDisconnect", async (e) => {
      if (!ma(e)) {
        const { message: s } = ht("MISSING_OR_INVALID", `disconnect() params: ${e}`);
        throw new Error(s);
      }
      const { topic: t } = e;
      await this.isValidSessionOrPairingTopic(t);
    }), c2(this, "isValidAuthenticate", (e) => {
      const { chains: t, uri: s, domain: i3, nonce: r2 } = e;
      if (!Array.isArray(t) || t.length === 0) throw new Error("chains is required and must be a non-empty array");
      if (!nt(s, false)) throw new Error("uri is required parameter");
      if (!nt(i3, false)) throw new Error("domain is required parameter");
      if (!nt(r2, false)) throw new Error("nonce is required parameter");
      if ([...new Set(t.map((a2) => Ne(a2).namespace))].length > 1) throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");
      const { namespace: o2 } = Ne(t[0]);
      if (o2 !== "eip155") throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.");
    }), c2(this, "getVerifyContext", async (e) => {
      const { attestationId: t, hash: s, encryptedId: i3, metadata: r2, transportType: o2 } = e, a2 = { verified: { verifyUrl: r2.verifyUrl || ue2, validation: "UNKNOWN", origin: r2.url || "" } };
      try {
        if (o2 === Q.link_mode) {
          const p4 = this.getAppLinkIfEnabled(r2, o2);
          return a2.verified.validation = p4 && new URL(p4).origin === new URL(r2.url).origin ? "VALID" : "INVALID", a2;
        }
        const l4 = await this.client.core.verify.resolve({ attestationId: t, hash: s, encryptedId: i3, verifyUrl: r2.verifyUrl });
        l4 && (a2.verified.origin = l4.origin, a2.verified.isScam = l4.isScam, a2.verified.validation = l4.origin === new URL(r2.url).origin ? "VALID" : "INVALID");
      } catch (l4) {
        this.client.logger.warn(l4);
      }
      return this.client.logger.debug(`Verify context: ${JSON.stringify(a2)}`), a2;
    }), c2(this, "validateSessionProps", (e, t) => {
      Object.values(e).forEach((s, i3) => {
        if (s == null) {
          const { message: r2 } = ht("MISSING_OR_INVALID", `${t} must contain an existing value for each key. Received: ${s} for key ${Object.keys(e)[i3]}`);
          throw new Error(r2);
        }
      });
    }), c2(this, "getPendingAuthRequest", (e) => {
      const t = this.client.auth.requests.get(e);
      return typeof t == "object" ? t : void 0;
    }), c2(this, "addToRecentlyDeleted", (e, t) => {
      if (this.recentlyDeletedMap.set(e, t), this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {
        let s = 0;
        const i3 = this.recentlyDeletedLimit / 2;
        for (const r2 of this.recentlyDeletedMap.keys()) {
          if (s++ >= i3) break;
          this.recentlyDeletedMap.delete(r2);
        }
      }
    }), c2(this, "checkRecentlyDeleted", (e) => {
      const t = this.recentlyDeletedMap.get(e);
      if (t) {
        const { message: s } = ht("MISSING_OR_INVALID", `Record was recently deleted - ${t}: ${e}`);
        throw new Error(s);
      }
    }), c2(this, "isLinkModeEnabled", (e, t) => {
      var s, i3, r2, o2, a2, l4, p4, h4, u3;
      return !e || t !== Q.link_mode ? false : ((i3 = (s = this.client.metadata) == null ? void 0 : s.redirect) == null ? void 0 : i3.linkMode) === true && ((o2 = (r2 = this.client.metadata) == null ? void 0 : r2.redirect) == null ? void 0 : o2.universal) !== void 0 && ((l4 = (a2 = this.client.metadata) == null ? void 0 : a2.redirect) == null ? void 0 : l4.universal) !== "" && ((p4 = e == null ? void 0 : e.redirect) == null ? void 0 : p4.universal) !== void 0 && ((h4 = e == null ? void 0 : e.redirect) == null ? void 0 : h4.universal) !== "" && ((u3 = e == null ? void 0 : e.redirect) == null ? void 0 : u3.linkMode) === true && this.client.core.linkModeSupportedApps.includes(e.redirect.universal) && typeof (global == null ? void 0 : global.Linking) < "u";
    }), c2(this, "getAppLinkIfEnabled", (e, t) => {
      var s;
      return this.isLinkModeEnabled(e, t) ? (s = e == null ? void 0 : e.redirect) == null ? void 0 : s.universal : void 0;
    }), c2(this, "handleLinkModeMessage", ({ url: e }) => {
      if (!e || !e.includes("wc_ev") || !e.includes("topic")) return;
      const t = Ai(e, "topic") || "", s = decodeURIComponent(Ai(e, "wc_ev") || ""), i3 = this.client.session.keys.includes(t);
      i3 && this.client.session.update(t, { transportType: Q.link_mode }), this.client.core.dispatchEnvelope({ topic: t, message: s, sessionExists: i3 });
    }), c2(this, "registerLinkModeListeners", async () => {
      var e;
      if (Ii() || pt() && (e = this.client.metadata.redirect) != null && e.linkMode) {
        const t = global == null ? void 0 : global.Linking;
        if (typeof t < "u") {
          t.addEventListener("url", this.handleLinkModeMessage, this.client.name);
          const s = await t.getInitialURL();
          s && setTimeout(() => {
            this.handleLinkModeMessage({ url: s });
          }, 50);
        }
      }
    }), c2(this, "shouldSetTVF", (e, t) => {
      if (!t || e !== "wc_sessionRequest") return false;
      const { request: s } = t;
      return Object.keys(Ke3).includes(s.method);
    }), c2(this, "getTVFParams", (e, t, s) => {
      var i3, r2;
      try {
        const o2 = t.request.method, a2 = this.extractTxHashesFromResult(o2, s);
        return b2(v3({ correlationId: e, rpcMethods: [o2], chainId: t.chainId }, this.isValidContractData(t.request.params) && { contractAddresses: [(r2 = (i3 = t.request.params) == null ? void 0 : i3[0]) == null ? void 0 : r2.to] }), { txHashes: a2 });
      } catch (o2) {
        this.client.logger.warn("Error getting TVF params", o2);
      }
      return {};
    }), c2(this, "isValidContractData", (e) => {
      var t;
      if (!e) return false;
      try {
        const s = (e == null ? void 0 : e.data) || ((t = e == null ? void 0 : e[0]) == null ? void 0 : t.data);
        if (!s.startsWith("0x")) return false;
        const i3 = s.slice(2);
        return /^[0-9a-fA-F]*$/.test(i3) ? i3.length % 2 === 0 : false;
      } catch {
      }
      return false;
    }), c2(this, "extractTxHashesFromResult", (e, t) => {
      try {
        const s = Ke3[e];
        if (typeof t == "string") return [t];
        const i3 = t[s.key];
        if (se(i3)) return e === "solana_signAllTransactions" ? i3.map((r2) => Ji(r2)) : i3;
        if (typeof i3 == "string") return [i3];
      } catch (s) {
        this.client.logger.warn("Error extracting tx hashes from result", s);
      }
      return [];
    });
  }
  async processPendingMessageEvents() {
    try {
      const n3 = this.client.session.keys, e = this.client.core.relayer.messages.getWithoutAck(n3);
      for (const [t, s] of Object.entries(e)) for (const i3 of s) try {
        await this.onProviderMessageEvent({ topic: t, message: i3, publishedAt: Date.now() });
      } catch {
        this.client.logger.warn(`Error processing pending message event for topic: ${t}, message: ${i3}`);
      }
    } catch (n3) {
      this.client.logger.warn("processPendingMessageEvents failed", n3);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: n3 } = ht("NOT_INITIALIZED", this.name);
      throw new Error(n3);
    }
  }
  async confirmOnlineStateOrThrow() {
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(C2.message, (n3) => {
      this.onProviderMessageEvent(n3);
    });
  }
  async onRelayMessage(n3) {
    const { topic: e, message: t, attestation: s, transportType: i3 } = n3, { publicKey: r2 } = this.client.auth.authKeys.keys.includes(ce2) ? this.client.auth.authKeys.get(ce2) : { responseTopic: void 0, publicKey: void 0 };
    try {
      const o2 = await this.client.core.crypto.decode(e, t, { receiverPublicKey: r2, encoding: i3 === Q.link_mode ? xe : qt });
      isJsonRpcRequest(o2) ? (this.client.core.history.set(e, o2), await this.onRelayEventRequest({ topic: e, payload: o2, attestation: s, transportType: i3, encryptedId: kc(t) })) : isJsonRpcResponse(o2) ? (await this.client.core.history.resolve(o2), await this.onRelayEventResponse({ topic: e, payload: o2, transportType: i3 }), this.client.core.history.delete(e, o2.id)) : await this.onRelayEventUnknownPayload({ topic: e, payload: o2, transportType: i3 }), await this.client.core.relayer.messages.ack(e, t);
    } catch (o2) {
      this.client.logger.error(o2);
    }
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(M2.expired, async (n3) => {
      const { topic: e, id: t } = bi(n3.target);
      if (t && this.client.pendingRequest.keys.includes(t)) return await this.deletePendingSessionRequest(t, ht("EXPIRED"), true);
      if (t && this.client.auth.requests.keys.includes(t)) return await this.deletePendingAuthRequest(t, ht("EXPIRED"), true);
      e ? this.client.session.keys.includes(e) && (await this.deleteSession({ topic: e, expirerHasDeleted: true }), this.client.events.emit("session_expire", { topic: e })) : t && (await this.deleteProposal(t, true), this.client.events.emit("proposal_expire", { id: t }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(re2.create, (n3) => this.onPairingCreated(n3)), this.client.core.pairing.events.on(re2.delete, (n3) => {
      this.addToRecentlyDeleted(n3.topic, "pairing");
    });
  }
  isValidPairingTopic(n3) {
    if (!nt(n3, false)) {
      const { message: e } = ht("MISSING_OR_INVALID", `pairing topic should be a string: ${n3}`);
      throw new Error(e);
    }
    if (!this.client.core.pairing.pairings.keys.includes(n3)) {
      const { message: e } = ht("NO_MATCHING_KEY", `pairing topic doesn't exist: ${n3}`);
      throw new Error(e);
    }
    if (vi(this.client.core.pairing.pairings.get(n3).expiry)) {
      const { message: e } = ht("EXPIRED", `pairing topic: ${n3}`);
      throw new Error(e);
    }
  }
  async isValidSessionTopic(n3) {
    if (!nt(n3, false)) {
      const { message: e } = ht("MISSING_OR_INVALID", `session topic should be a string: ${n3}`);
      throw new Error(e);
    }
    if (this.checkRecentlyDeleted(n3), !this.client.session.keys.includes(n3)) {
      const { message: e } = ht("NO_MATCHING_KEY", `session topic doesn't exist: ${n3}`);
      throw new Error(e);
    }
    if (vi(this.client.session.get(n3).expiry)) {
      await this.deleteSession({ topic: n3 });
      const { message: e } = ht("EXPIRED", `session topic: ${n3}`);
      throw new Error(e);
    }
    if (!this.client.core.crypto.keychain.has(n3)) {
      const { message: e } = ht("MISSING_OR_INVALID", `session topic does not exist in keychain: ${n3}`);
      throw await this.deleteSession({ topic: n3 }), new Error(e);
    }
  }
  async isValidSessionOrPairingTopic(n3) {
    if (this.checkRecentlyDeleted(n3), this.client.session.keys.includes(n3)) await this.isValidSessionTopic(n3);
    else if (this.client.core.pairing.pairings.keys.includes(n3)) this.isValidPairingTopic(n3);
    else if (nt(n3, false)) {
      const { message: e } = ht("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${n3}`);
      throw new Error(e);
    } else {
      const { message: e } = ht("MISSING_OR_INVALID", `session or pairing topic should be a string: ${n3}`);
      throw new Error(e);
    }
  }
  async isValidProposalId(n3) {
    if (!ya(n3)) {
      const { message: e } = ht("MISSING_OR_INVALID", `proposal id should be a number: ${n3}`);
      throw new Error(e);
    }
    if (!this.client.proposal.keys.includes(n3)) {
      const { message: e } = ht("NO_MATCHING_KEY", `proposal id doesn't exist: ${n3}`);
      throw new Error(e);
    }
    if (vi(this.client.proposal.get(n3).expiryTimestamp)) {
      await this.deleteProposal(n3);
      const { message: e } = ht("EXPIRED", `proposal id: ${n3}`);
      throw new Error(e);
    }
  }
};
var Os2 = class extends zi2 {
  constructor(n3, e) {
    super(n3, e, pt2, we2), this.core = n3, this.logger = e;
  }
};
var St3 = class extends zi2 {
  constructor(n3, e) {
    super(n3, e, ht2, we2), this.core = n3, this.logger = e;
  }
};
var bs2 = class extends zi2 {
  constructor(n3, e) {
    super(n3, e, ut2, we2, (t) => t.id), this.core = n3, this.logger = e;
  }
};
var As2 = class extends zi2 {
  constructor(n3, e) {
    super(n3, e, mt2, ae2, () => ce2), this.core = n3, this.logger = e;
  }
};
var xs2 = class extends zi2 {
  constructor(n3, e) {
    super(n3, e, _t2, ae2), this.core = n3, this.logger = e;
  }
};
var Cs2 = class extends zi2 {
  constructor(n3, e) {
    super(n3, e, Et3, ae2, (t) => t.id), this.core = n3, this.logger = e;
  }
};
var Vs2 = Object.defineProperty;
var Ds2 = (S5, n3, e) => n3 in S5 ? Vs2(S5, n3, { enumerable: true, configurable: true, writable: true, value: e }) : S5[n3] = e;
var Ge3 = (S5, n3, e) => Ds2(S5, typeof n3 != "symbol" ? n3 + "" : n3, e);
var Ls2 = class {
  constructor(n3, e) {
    this.core = n3, this.logger = e, Ge3(this, "authKeys"), Ge3(this, "pairingTopics"), Ge3(this, "requests"), this.authKeys = new As2(this.core, this.logger), this.pairingTopics = new xs2(this.core, this.logger), this.requests = new Cs2(this.core, this.logger);
  }
  async init() {
    await this.authKeys.init(), await this.pairingTopics.init(), await this.requests.init();
  }
};
var ks2 = Object.defineProperty;
var Ms2 = (S5, n3, e) => n3 in S5 ? ks2(S5, n3, { enumerable: true, configurable: true, writable: true, value: e }) : S5[n3] = e;
var E3 = (S5, n3, e) => Ms2(S5, typeof n3 != "symbol" ? n3 + "" : n3, e);
var Ee3 = class _Ee extends J {
  constructor(n3) {
    super(n3), E3(this, "protocol", De2), E3(this, "version", Le2), E3(this, "name", me2.name), E3(this, "metadata"), E3(this, "core"), E3(this, "logger"), E3(this, "events", new import_events6.EventEmitter()), E3(this, "engine"), E3(this, "session"), E3(this, "proposal"), E3(this, "pendingRequest"), E3(this, "auth"), E3(this, "signConfig"), E3(this, "on", (t, s) => this.events.on(t, s)), E3(this, "once", (t, s) => this.events.once(t, s)), E3(this, "off", (t, s) => this.events.off(t, s)), E3(this, "removeListener", (t, s) => this.events.removeListener(t, s)), E3(this, "removeAllListeners", (t) => this.events.removeAllListeners(t)), E3(this, "connect", async (t) => {
      try {
        return await this.engine.connect(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "pair", async (t) => {
      try {
        return await this.engine.pair(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "approve", async (t) => {
      try {
        return await this.engine.approve(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "reject", async (t) => {
      try {
        return await this.engine.reject(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "update", async (t) => {
      try {
        return await this.engine.update(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "extend", async (t) => {
      try {
        return await this.engine.extend(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "request", async (t) => {
      try {
        return await this.engine.request(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "respond", async (t) => {
      try {
        return await this.engine.respond(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "ping", async (t) => {
      try {
        return await this.engine.ping(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "emit", async (t) => {
      try {
        return await this.engine.emit(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "disconnect", async (t) => {
      try {
        return await this.engine.disconnect(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "find", (t) => {
      try {
        return this.engine.find(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "getPendingSessionRequests", () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (t) {
        throw this.logger.error(t.message), t;
      }
    }), E3(this, "authenticate", async (t, s) => {
      try {
        return await this.engine.authenticate(t, s);
      } catch (i3) {
        throw this.logger.error(i3.message), i3;
      }
    }), E3(this, "formatAuthMessage", (t) => {
      try {
        return this.engine.formatAuthMessage(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "approveSessionAuthenticate", async (t) => {
      try {
        return await this.engine.approveSessionAuthenticate(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), E3(this, "rejectSessionAuthenticate", async (t) => {
      try {
        return await this.engine.rejectSessionAuthenticate(t);
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }), this.name = (n3 == null ? void 0 : n3.name) || me2.name, this.metadata = oi(n3 == null ? void 0 : n3.metadata), this.signConfig = n3 == null ? void 0 : n3.signConfig;
    const e = typeof (n3 == null ? void 0 : n3.logger) < "u" && typeof (n3 == null ? void 0 : n3.logger) != "string" ? n3.logger : (0, import_pino.default)(k({ level: (n3 == null ? void 0 : n3.logger) || me2.logger }));
    this.core = (n3 == null ? void 0 : n3.core) || new Xo2(n3), this.logger = E(e, this.name), this.session = new St3(this.core, this.logger), this.proposal = new Os2(this.core, this.logger), this.pendingRequest = new bs2(this.core, this.logger), this.engine = new Ns2(this), this.auth = new Ls2(this.core, this.logger);
  }
  static async init(n3) {
    const e = new _Ee(n3);
    return await e.initialize(), e;
  }
  get context() {
    return y(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.auth.init(), await this.engine.init(), this.logger.info("SignClient Initialization Success"), setTimeout(() => {
        this.engine.processRelayMessageCache();
      }, (0, import_time3.toMiliseconds)(import_time3.ONE_SECOND));
    } catch (n3) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(n3.message), n3;
    }
  }
};

// node_modules/@walletconnect/ethereum-provider/node_modules/@walletconnect/universal-provider/dist/index.es.js
var import_events7 = __toESM(require_events());
var et2 = "error";
var St4 = "wss://relay.walletconnect.org";
var Dt2 = "wc";
var qt3 = "universal_provider";
var U3 = `${Dt2}@2:${qt3}:`;
var st = "https://rpc.walletconnect.org/v1/";
var I2 = "generic";
var jt3 = `${st}bundler`;
var u2 = { DEFAULT_CHAIN_CHANGED: "default_chain_changed" };
function Rt3() {
}
function k4(s) {
  return s == null || typeof s != "object" && typeof s != "function";
}
function W2(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
function _t3(s) {
  if (k4(s)) return s;
  if (Array.isArray(s) || W2(s) || s instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s instanceof SharedArrayBuffer) return s.slice(0);
  const t = Object.getPrototypeOf(s), e = t.constructor;
  if (s instanceof Date || s instanceof Map || s instanceof Set) return new e(s);
  if (s instanceof RegExp) {
    const i3 = new e(s);
    return i3.lastIndex = s.lastIndex, i3;
  }
  if (s instanceof DataView) return new e(s.buffer.slice(0));
  if (s instanceof Error) {
    const i3 = new e(s.message);
    return i3.stack = s.stack, i3.name = s.name, i3.cause = s.cause, i3;
  }
  if (typeof File < "u" && s instanceof File) return new e([s], s.name, { type: s.type, lastModified: s.lastModified });
  if (typeof s == "object") {
    const i3 = Object.create(t);
    return Object.assign(i3, s);
  }
  return s;
}
function it3(s) {
  return typeof s == "object" && s !== null;
}
function rt(s) {
  return Object.getOwnPropertySymbols(s).filter((t) => Object.prototype.propertyIsEnumerable.call(s, t));
}
function nt2(s) {
  return s == null ? s === void 0 ? "[object Undefined]" : "[object Null]" : Object.prototype.toString.call(s);
}
var Ut2 = "[object RegExp]";
var at2 = "[object String]";
var ct2 = "[object Number]";
var ot2 = "[object Boolean]";
var ht3 = "[object Arguments]";
var Ft3 = "[object Symbol]";
var Lt3 = "[object Date]";
var Mt3 = "[object Map]";
var xt3 = "[object Set]";
var Bt3 = "[object Array]";
var Gt2 = "[object ArrayBuffer]";
var Jt3 = "[object Object]";
var zt2 = "[object DataView]";
var kt4 = "[object Uint8Array]";
var Wt3 = "[object Uint8ClampedArray]";
var Kt3 = "[object Uint16Array]";
var Vt3 = "[object Uint32Array]";
var Xt3 = "[object Int8Array]";
var Yt3 = "[object Int16Array]";
var Qt3 = "[object Int32Array]";
var Zt2 = "[object Float32Array]";
var Tt3 = "[object Float64Array]";
function te2(s, t) {
  return $3(s, void 0, s, /* @__PURE__ */ new Map(), t);
}
function $3(s, t, e, i3 = /* @__PURE__ */ new Map(), n3 = void 0) {
  const a2 = n3 == null ? void 0 : n3(s, t, e, i3);
  if (a2 != null) return a2;
  if (k4(s)) return s;
  if (i3.has(s)) return i3.get(s);
  if (Array.isArray(s)) {
    const r2 = new Array(s.length);
    i3.set(s, r2);
    for (let c3 = 0; c3 < s.length; c3++) r2[c3] = $3(s[c3], c3, e, i3, n3);
    return Object.hasOwn(s, "index") && (r2.index = s.index), Object.hasOwn(s, "input") && (r2.input = s.input), r2;
  }
  if (s instanceof Date) return new Date(s.getTime());
  if (s instanceof RegExp) {
    const r2 = new RegExp(s.source, s.flags);
    return r2.lastIndex = s.lastIndex, r2;
  }
  if (s instanceof Map) {
    const r2 = /* @__PURE__ */ new Map();
    i3.set(s, r2);
    for (const [c3, o2] of s) r2.set(c3, $3(o2, c3, e, i3, n3));
    return r2;
  }
  if (s instanceof Set) {
    const r2 = /* @__PURE__ */ new Set();
    i3.set(s, r2);
    for (const c3 of s) r2.add($3(c3, void 0, e, i3, n3));
    return r2;
  }
  if (typeof Buffer < "u" && Buffer.isBuffer(s)) return s.subarray();
  if (W2(s)) {
    const r2 = new (Object.getPrototypeOf(s)).constructor(s.length);
    i3.set(s, r2);
    for (let c3 = 0; c3 < s.length; c3++) r2[c3] = $3(s[c3], c3, e, i3, n3);
    return r2;
  }
  if (s instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && s instanceof SharedArrayBuffer) return s.slice(0);
  if (s instanceof DataView) {
    const r2 = new DataView(s.buffer.slice(0), s.byteOffset, s.byteLength);
    return i3.set(s, r2), y4(r2, s, e, i3, n3), r2;
  }
  if (typeof File < "u" && s instanceof File) {
    const r2 = new File([s], s.name, { type: s.type });
    return i3.set(s, r2), y4(r2, s, e, i3, n3), r2;
  }
  if (s instanceof Blob) {
    const r2 = new Blob([s], { type: s.type });
    return i3.set(s, r2), y4(r2, s, e, i3, n3), r2;
  }
  if (s instanceof Error) {
    const r2 = new s.constructor();
    return i3.set(s, r2), r2.message = s.message, r2.name = s.name, r2.stack = s.stack, r2.cause = s.cause, y4(r2, s, e, i3, n3), r2;
  }
  if (typeof s == "object" && ee3(s)) {
    const r2 = Object.create(Object.getPrototypeOf(s));
    return i3.set(s, r2), y4(r2, s, e, i3, n3), r2;
  }
  return s;
}
function y4(s, t, e = s, i3, n3) {
  const a2 = [...Object.keys(t), ...rt(t)];
  for (let r2 = 0; r2 < a2.length; r2++) {
    const c3 = a2[r2], o2 = Object.getOwnPropertyDescriptor(s, c3);
    (o2 == null || o2.writable) && (s[c3] = $3(t[c3], c3, e, i3, n3));
  }
}
function ee3(s) {
  switch (nt2(s)) {
    case ht3:
    case Bt3:
    case Gt2:
    case zt2:
    case ot2:
    case Lt3:
    case Zt2:
    case Tt3:
    case Xt3:
    case Yt3:
    case Qt3:
    case Mt3:
    case ct2:
    case Jt3:
    case Ut2:
    case xt3:
    case at2:
    case Ft3:
    case kt4:
    case Wt3:
    case Kt3:
    case Vt3:
      return true;
    default:
      return false;
  }
}
function se3(s, t) {
  return te2(s, (e, i3, n3, a2) => {
    const r2 = t == null ? void 0 : t(e, i3, n3, a2);
    if (r2 != null) return r2;
    if (typeof s == "object") switch (Object.prototype.toString.call(s)) {
      case ct2:
      case at2:
      case ot2: {
        const c3 = new s.constructor(s == null ? void 0 : s.valueOf());
        return y4(c3, s), c3;
      }
      case ht3: {
        const c3 = {};
        return y4(c3, s), c3.length = s.length, c3[Symbol.iterator] = s[Symbol.iterator], c3;
      }
      default:
        return;
    }
  });
}
function pt3(s) {
  return se3(s);
}
function dt3(s) {
  return s !== null && typeof s == "object" && nt2(s) === "[object Arguments]";
}
function ie3(s) {
  return W2(s);
}
function re3(s) {
  var _a;
  if (typeof s != "object" || s == null) return false;
  if (Object.getPrototypeOf(s) === null) return true;
  if (Object.prototype.toString.call(s) !== "[object Object]") {
    const e = s[Symbol.toStringTag];
    return e == null || !((_a = Object.getOwnPropertyDescriptor(s, Symbol.toStringTag)) == null ? void 0 : _a.writable) ? false : s.toString() === `[object ${e}]`;
  }
  let t = s;
  for (; Object.getPrototypeOf(t) !== null; ) t = Object.getPrototypeOf(t);
  return Object.getPrototypeOf(s) === t;
}
function ne3(s, ...t) {
  const e = t.slice(0, -1), i3 = t[t.length - 1];
  let n3 = s;
  for (let a2 = 0; a2 < e.length; a2++) {
    const r2 = e[a2];
    n3 = F3(n3, r2, i3, /* @__PURE__ */ new Map());
  }
  return n3;
}
function F3(s, t, e, i3) {
  if (k4(s) && (s = Object(s)), t == null || typeof t != "object") return s;
  if (i3.has(t)) return _t3(i3.get(t));
  if (i3.set(t, s), Array.isArray(t)) {
    t = t.slice();
    for (let a2 = 0; a2 < t.length; a2++) t[a2] = t[a2] ?? void 0;
  }
  const n3 = [...Object.keys(t), ...rt(t)];
  for (let a2 = 0; a2 < n3.length; a2++) {
    const r2 = n3[a2];
    let c3 = t[r2], o2 = s[r2];
    if (dt3(c3) && (c3 = { ...c3 }), dt3(o2) && (o2 = { ...o2 }), typeof Buffer < "u" && Buffer.isBuffer(c3) && (c3 = pt3(c3)), Array.isArray(c3)) if (typeof o2 == "object" && o2 != null) {
      const w3 = [], v5 = Reflect.ownKeys(o2);
      for (let P4 = 0; P4 < v5.length; P4++) {
        const p4 = v5[P4];
        w3[p4] = o2[p4];
      }
      o2 = w3;
    } else o2 = [];
    const m2 = e(o2, c3, r2, s, t, i3);
    m2 != null ? s[r2] = m2 : Array.isArray(c3) || it3(o2) && it3(c3) ? s[r2] = F3(o2, c3, e, i3) : o2 == null && re3(c3) ? s[r2] = F3({}, c3, e, i3) : o2 == null && ie3(c3) ? s[r2] = pt3(c3) : (o2 === void 0 || c3 !== void 0) && (s[r2] = c3);
  }
  return s;
}
function ae3(s, ...t) {
  return ne3(s, ...t, Rt3);
}
var ce3 = Object.defineProperty;
var oe2 = Object.defineProperties;
var he3 = Object.getOwnPropertyDescriptors;
var ut3 = Object.getOwnPropertySymbols;
var pe3 = Object.prototype.hasOwnProperty;
var de3 = Object.prototype.propertyIsEnumerable;
var lt2 = (s, t, e) => t in s ? ce3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var L2 = (s, t) => {
  for (var e in t || (t = {})) pe3.call(t, e) && lt2(s, e, t[e]);
  if (ut3) for (var e of ut3(t)) de3.call(t, e) && lt2(s, e, t[e]);
  return s;
};
var ue3 = (s, t) => oe2(s, he3(t));
function d2(s, t, e) {
  var i3;
  const n3 = Ne(s);
  return ((i3 = t.rpcMap) == null ? void 0 : i3[n3.reference]) || `${st}?chainId=${n3.namespace}:${n3.reference}&projectId=${e}`;
}
function b3(s) {
  return s.includes(":") ? s.split(":")[1] : s;
}
function ft3(s) {
  return s.map((t) => `${t.split(":")[0]}:${t.split(":")[1]}`);
}
function le3(s, t) {
  const e = Object.keys(t.namespaces).filter((n3) => n3.includes(s));
  if (!e.length) return [];
  const i3 = [];
  return e.forEach((n3) => {
    const a2 = t.namespaces[n3].accounts;
    i3.push(...a2);
  }), i3;
}
function M3(s = {}, t = {}) {
  const e = mt3(s), i3 = mt3(t);
  return ae3(e, i3);
}
function mt3(s) {
  var t, e, i3, n3, a2;
  const r2 = {};
  if (!Oe(s)) return r2;
  for (const [c3, o2] of Object.entries(s)) {
    const m2 = yn(c3) ? [c3] : o2.chains, w3 = o2.methods || [], v5 = o2.events || [], P4 = o2.rpcMap || {}, p4 = yo(c3);
    r2[p4] = ue3(L2(L2({}, r2[p4]), o2), { chains: ot(m2, (t = r2[p4]) == null ? void 0 : t.chains), methods: ot(w3, (e = r2[p4]) == null ? void 0 : e.methods), events: ot(v5, (i3 = r2[p4]) == null ? void 0 : i3.events) }), (Oe(P4) || Oe(((n3 = r2[p4]) == null ? void 0 : n3.rpcMap) || {})) && (r2[p4].rpcMap = L2(L2({}, P4), (a2 = r2[p4]) == null ? void 0 : a2.rpcMap));
  }
  return r2;
}
function vt(s) {
  return s.includes(":") ? s.split(":")[2] : s;
}
function gt3(s) {
  const t = {};
  for (const [e, i3] of Object.entries(s)) {
    const n3 = i3.methods || [], a2 = i3.events || [], r2 = i3.accounts || [], c3 = yn(e) ? [e] : i3.chains ? i3.chains : ft3(i3.accounts);
    t[e] = { chains: c3, methods: n3, events: a2, accounts: r2 };
  }
  return t;
}
function K3(s) {
  return typeof s == "number" ? s : s.includes("0x") ? parseInt(s, 16) : (s = s.includes(":") ? s.split(":")[1] : s, isNaN(Number(s)) ? s : Number(s));
}
var Pt3 = {};
var h3 = (s) => Pt3[s];
var V4 = (s, t) => {
  Pt3[s] = t;
};
var fe2 = Object.defineProperty;
var me3 = (s, t, e) => t in s ? fe2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var O3 = (s, t, e) => me3(s, typeof t != "symbol" ? t + "" : t, e);
var ve2 = class {
  constructor(t) {
    O3(this, "name", "polkadot"), O3(this, "client"), O3(this, "httpProviders"), O3(this, "events"), O3(this, "namespace"), O3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n3 = b3(e);
      t[n3] = this.createHttpProvider(n3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var ge3 = Object.defineProperty;
var Pe3 = Object.defineProperties;
var we3 = Object.getOwnPropertyDescriptors;
var wt3 = Object.getOwnPropertySymbols;
var ye3 = Object.prototype.hasOwnProperty;
var be3 = Object.prototype.propertyIsEnumerable;
var X2 = (s, t, e) => t in s ? ge3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var yt3 = (s, t) => {
  for (var e in t || (t = {})) ye3.call(t, e) && X2(s, e, t[e]);
  if (wt3) for (var e of wt3(t)) be3.call(t, e) && X2(s, e, t[e]);
  return s;
};
var bt2 = (s, t) => Pe3(s, we3(t));
var A3 = (s, t, e) => X2(s, typeof t != "symbol" ? t + "" : t, e);
var Ie3 = class {
  constructor(t) {
    A3(this, "name", "eip155"), A3(this, "client"), A3(this, "chainId"), A3(this, "namespace"), A3(this, "httpProviders"), A3(this, "events"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.httpProviders = this.createHttpProviders(), this.chainId = parseInt(this.getDefaultChain());
  }
  async request(t) {
    switch (t.request.method) {
      case "eth_requestAccounts":
        return this.getAccounts();
      case "eth_accounts":
        return this.getAccounts();
      case "wallet_switchEthereumChain":
        return await this.handleSwitchChain(t);
      case "eth_chainId":
        return parseInt(this.getDefaultChain());
      case "wallet_getCapabilities":
        return await this.getCapabilities(t);
      case "wallet_getCallsStatus":
        return await this.getCallStatus(t);
    }
    return this.namespace.methods.includes(t.request.method) ? await this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(parseInt(t), e), this.chainId = parseInt(t), this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId.toString();
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n3 = parseInt(b3(e));
      t[n3] = this.createHttpProvider(n3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  getHttpProvider() {
    const t = this.chainId, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  async handleSwitchChain(t) {
    var e, i3;
    let n3 = t.request.params ? (e = t.request.params[0]) == null ? void 0 : e.chainId : "0x0";
    n3 = n3.startsWith("0x") ? n3 : `0x${n3}`;
    const a2 = parseInt(n3, 16);
    if (this.isChainApproved(a2)) this.setDefaultChain(`${a2}`);
    else if (this.namespace.methods.includes("wallet_switchEthereumChain")) await this.client.request({ topic: t.topic, request: { method: t.request.method, params: [{ chainId: n3 }] }, chainId: (i3 = this.namespace.chains) == null ? void 0 : i3[0] }), this.setDefaultChain(`${a2}`);
    else throw new Error(`Failed to switch to chain 'eip155:${a2}'. The chain is not approved or the wallet does not support 'wallet_switchEthereumChain' method.`);
    return null;
  }
  isChainApproved(t) {
    return this.namespace.chains.includes(`${this.name}:${t}`);
  }
  async getCapabilities(t) {
    var e, i3, n3, a2, r2;
    const c3 = (i3 = (e = t.request) == null ? void 0 : e.params) == null ? void 0 : i3[0], o2 = ((a2 = (n3 = t.request) == null ? void 0 : n3.params) == null ? void 0 : a2[1]) || [], m2 = `${c3}${o2.join(",")}`;
    if (!c3) throw new Error("Missing address parameter in `wallet_getCapabilities` request");
    const w3 = this.client.session.get(t.topic), v5 = ((r2 = w3 == null ? void 0 : w3.sessionProperties) == null ? void 0 : r2.capabilities) || {};
    if (v5 != null && v5[m2]) return v5 == null ? void 0 : v5[m2];
    const P4 = await this.client.request(t);
    try {
      await this.client.session.update(t.topic, { sessionProperties: bt2(yt3({}, w3.sessionProperties || {}), { capabilities: bt2(yt3({}, v5 || {}), { [m2]: P4 }) }) });
    } catch (p4) {
      console.warn("Failed to update session with capabilities", p4);
    }
    return P4;
  }
  async getCallStatus(t) {
    var e, i3;
    const n3 = this.client.session.get(t.topic), a2 = (e = n3.sessionProperties) == null ? void 0 : e.bundler_name;
    if (a2) {
      const c3 = this.getBundlerUrl(t.chainId, a2);
      try {
        return await this.getUserOperationReceipt(c3, t);
      } catch (o2) {
        console.warn("Failed to fetch call status from bundler", o2, c3);
      }
    }
    const r2 = (i3 = n3.sessionProperties) == null ? void 0 : i3.bundler_url;
    if (r2) try {
      return await this.getUserOperationReceipt(r2, t);
    } catch (c3) {
      console.warn("Failed to fetch call status from custom bundler", c3, r2);
    }
    if (this.namespace.methods.includes(t.request.method)) return await this.client.request(t);
    throw new Error("Fetching call status not approved by the wallet.");
  }
  async getUserOperationReceipt(t, e) {
    var i3;
    const n3 = new URL(t), a2 = await fetch(n3, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(formatJsonRpcRequest("eth_getUserOperationReceipt", [(i3 = e.request.params) == null ? void 0 : i3[0]])) });
    if (!a2.ok) throw new Error(`Failed to fetch user operation receipt - ${a2.status}`);
    return await a2.json();
  }
  getBundlerUrl(t, e) {
    return `${jt3}?projectId=${this.client.core.projectId}&chainId=${t}&bundler=${e}`;
  }
};
var $e3 = Object.defineProperty;
var Oe3 = (s, t, e) => t in s ? $e3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var C4 = (s, t, e) => Oe3(s, typeof t != "symbol" ? t + "" : t, e);
var Ae2 = class {
  constructor(t) {
    C4(this, "name", "solana"), C4(this, "client"), C4(this, "httpProviders"), C4(this, "events"), C4(this, "namespace"), C4(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n3 = b3(e);
      t[n3] = this.createHttpProvider(n3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var Ce3 = Object.defineProperty;
var He3 = (s, t, e) => t in s ? Ce3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var H2 = (s, t, e) => He3(s, typeof t != "symbol" ? t + "" : t, e);
var Ee4 = class {
  constructor(t) {
    H2(this, "name", "cosmos"), H2(this, "client"), H2(this, "httpProviders"), H2(this, "events"), H2(this, "namespace"), H2(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n3 = b3(e);
      t[n3] = this.createHttpProvider(n3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var Ne2 = Object.defineProperty;
var Se3 = (s, t, e) => t in s ? Ne2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var E4 = (s, t, e) => Se3(s, typeof t != "symbol" ? t + "" : t, e);
var De3 = class {
  constructor(t) {
    E4(this, "name", "algorand"), E4(this, "client"), E4(this, "httpProviders"), E4(this, "events"), E4(this, "namespace"), E4(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (!this.httpProviders[t]) {
      const i3 = e || d2(`${this.name}:${t}`, this.namespace, this.client.core.projectId);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      t[e] = this.createHttpProvider(e, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    return typeof i3 > "u" ? void 0 : new o(new f2(i3, h3("disableProviderPing")));
  }
};
var qe3 = Object.defineProperty;
var je3 = (s, t, e) => t in s ? qe3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var N2 = (s, t, e) => je3(s, typeof t != "symbol" ? t + "" : t, e);
var Re = class {
  constructor(t) {
    N2(this, "name", "cip34"), N2(this, "client"), N2(this, "httpProviders"), N2(this, "events"), N2(this, "namespace"), N2(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      const i3 = this.getCardanoRPCUrl(e), n3 = b3(e);
      t[n3] = this.createHttpProvider(n3, i3);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  getCardanoRPCUrl(t) {
    const e = this.namespace.rpcMap;
    if (e) return e[t];
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || this.getCardanoRPCUrl(t);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var _e4 = Object.defineProperty;
var Ue3 = (s, t, e) => t in s ? _e4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var S3 = (s, t, e) => Ue3(s, typeof t != "symbol" ? t + "" : t, e);
var Fe3 = class {
  constructor(t) {
    S3(this, "name", "elrond"), S3(this, "client"), S3(this, "httpProviders"), S3(this, "events"), S3(this, "namespace"), S3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n3 = b3(e);
      t[n3] = this.createHttpProvider(n3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var Le3 = Object.defineProperty;
var Me4 = (s, t, e) => t in s ? Le3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var D = (s, t, e) => Me4(s, typeof t != "symbol" ? t + "" : t, e);
var xe2 = class {
  constructor(t) {
    D(this, "name", "multiversx"), D(this, "client"), D(this, "httpProviders"), D(this, "events"), D(this, "namespace"), D(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      const n3 = b3(e);
      t[n3] = this.createHttpProvider(n3, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var Be3 = Object.defineProperty;
var Ge4 = (s, t, e) => t in s ? Be3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var q2 = (s, t, e) => Ge4(s, typeof t != "symbol" ? t + "" : t, e);
var Je3 = class {
  constructor(t) {
    q2(this, "name", "near"), q2(this, "client"), q2(this, "httpProviders"), q2(this, "events"), q2(this, "namespace"), q2(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const i3 = e || d2(`${this.name}:${t}`, this.namespace);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      var i3;
      t[e] = this.createHttpProvider(e, (i3 = this.namespace.rpcMap) == null ? void 0 : i3[e]);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace);
    return typeof i3 > "u" ? void 0 : new o(new f2(i3, h3("disableProviderPing")));
  }
};
var ze3 = Object.defineProperty;
var ke4 = (s, t, e) => t in s ? ze3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var j = (s, t, e) => ke4(s, typeof t != "symbol" ? t + "" : t, e);
var We4 = class {
  constructor(t) {
    j(this, "name", "tezos"), j(this, "client"), j(this, "httpProviders"), j(this, "events"), j(this, "namespace"), j(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace = Object.assign(this.namespace, t);
  }
  requestAccounts() {
    return this.getAccounts();
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider().request(t.request);
  }
  setDefaultChain(t, e) {
    if (this.chainId = t, !this.httpProviders[t]) {
      const i3 = e || d2(`${this.name}:${t}`, this.namespace);
      if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
      this.setHttpProvider(t, i3);
    }
    this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]) || [] : [];
  }
  createHttpProviders() {
    const t = {};
    return this.namespace.chains.forEach((e) => {
      t[e] = this.createHttpProvider(e);
    }), t;
  }
  getHttpProvider() {
    const t = `${this.name}:${this.chainId}`, e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace);
    return typeof i3 > "u" ? void 0 : new o(new f2(i3));
  }
};
var Ke4 = Object.defineProperty;
var Ve3 = (s, t, e) => t in s ? Ke4(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var R3 = (s, t, e) => Ve3(s, typeof t != "symbol" ? t + "" : t, e);
var Xe3 = class {
  constructor(t) {
    R3(this, "name", I2), R3(this, "client"), R3(this, "httpProviders"), R3(this, "events"), R3(this, "namespace"), R3(this, "chainId"), this.namespace = t.namespace, this.events = h3("events"), this.client = h3("client"), this.chainId = this.getDefaultChain(), this.httpProviders = this.createHttpProviders();
  }
  updateNamespace(t) {
    this.namespace.chains = [...new Set((this.namespace.chains || []).concat(t.chains || []))], this.namespace.accounts = [...new Set((this.namespace.accounts || []).concat(t.accounts || []))], this.namespace.methods = [...new Set((this.namespace.methods || []).concat(t.methods || []))], this.namespace.events = [...new Set((this.namespace.events || []).concat(t.events || []))], this.httpProviders = this.createHttpProviders();
  }
  requestAccounts() {
    return this.getAccounts();
  }
  request(t) {
    return this.namespace.methods.includes(t.request.method) ? this.client.request(t) : this.getHttpProvider(t.chainId).request(t.request);
  }
  setDefaultChain(t, e) {
    this.httpProviders[t] || this.setHttpProvider(t, e), this.chainId = t, this.events.emit(u2.DEFAULT_CHAIN_CHANGED, `${this.name}:${t}`);
  }
  getDefaultChain() {
    if (this.chainId) return this.chainId;
    if (this.namespace.defaultChain) return this.namespace.defaultChain;
    const t = this.namespace.chains[0];
    if (!t) throw new Error("ChainId not found");
    return t.split(":")[1];
  }
  getAccounts() {
    const t = this.namespace.accounts;
    return t ? [...new Set(t.filter((e) => e.split(":")[1] === this.chainId.toString()).map((e) => e.split(":")[2]))] : [];
  }
  createHttpProviders() {
    var t, e;
    const i3 = {};
    return (e = (t = this.namespace) == null ? void 0 : t.accounts) == null || e.forEach((n3) => {
      const a2 = Ne(n3);
      i3[`${a2.namespace}:${a2.reference}`] = this.createHttpProvider(n3);
    }), i3;
  }
  getHttpProvider(t) {
    const e = this.httpProviders[t];
    if (typeof e > "u") throw new Error(`JSON-RPC provider for ${t} not found`);
    return e;
  }
  setHttpProvider(t, e) {
    const i3 = this.createHttpProvider(t, e);
    i3 && (this.httpProviders[t] = i3);
  }
  createHttpProvider(t, e) {
    const i3 = e || d2(t, this.namespace, this.client.core.projectId);
    if (!i3) throw new Error(`No RPC url provided for chainId: ${t}`);
    return new o(new f2(i3, h3("disableProviderPing")));
  }
};
var Ye3 = Object.defineProperty;
var Qe4 = Object.defineProperties;
var Ze4 = Object.getOwnPropertyDescriptors;
var It3 = Object.getOwnPropertySymbols;
var Te2 = Object.prototype.hasOwnProperty;
var ts2 = Object.prototype.propertyIsEnumerable;
var Y3 = (s, t, e) => t in s ? Ye3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var x = (s, t) => {
  for (var e in t || (t = {})) Te2.call(t, e) && Y3(s, e, t[e]);
  if (It3) for (var e of It3(t)) ts2.call(t, e) && Y3(s, e, t[e]);
  return s;
};
var Q2 = (s, t) => Qe4(s, Ze4(t));
var l3 = (s, t, e) => Y3(s, typeof t != "symbol" ? t + "" : t, e);
var B2 = class _B {
  constructor(t) {
    l3(this, "client"), l3(this, "namespaces"), l3(this, "optionalNamespaces"), l3(this, "sessionProperties"), l3(this, "scopedProperties"), l3(this, "events", new import_events7.default()), l3(this, "rpcProviders", {}), l3(this, "session"), l3(this, "providerOpts"), l3(this, "logger"), l3(this, "uri"), l3(this, "disableProviderPing", false), this.providerOpts = t, this.logger = typeof (t == null ? void 0 : t.logger) < "u" && typeof (t == null ? void 0 : t.logger) != "string" ? t.logger : (0, import_pino.default)(k({ level: (t == null ? void 0 : t.logger) || et2 })), this.disableProviderPing = (t == null ? void 0 : t.disableProviderPing) || false;
  }
  static async init(t) {
    const e = new _B(t);
    return await e.initialize(), e;
  }
  async request(t, e, i3) {
    const [n3, a2] = this.validateChain(e);
    if (!this.session) throw new Error("Please call connect() before request()");
    return await this.getProvider(n3).request({ request: x({}, t), chainId: `${n3}:${a2}`, topic: this.session.topic, expiry: i3 });
  }
  sendAsync(t, e, i3, n3) {
    const a2 = (/* @__PURE__ */ new Date()).getTime();
    this.request(t, i3, n3).then((r2) => e(null, formatJsonRpcResult(a2, r2))).catch((r2) => e(r2, void 0));
  }
  async enable() {
    if (!this.client) throw new Error("Sign Client not initialized");
    return this.session || await this.connect({ namespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties }), await this.requestAccounts();
  }
  async disconnect() {
    var t;
    if (!this.session) throw new Error("Please call connect() before enable()");
    await this.client.disconnect({ topic: (t = this.session) == null ? void 0 : t.topic, reason: Nt("USER_DISCONNECTED") }), await this.cleanup();
  }
  async connect(t) {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (this.setNamespaces(t), await this.cleanupPendingPairings(), !t.skipPairing) return await this.pair(t.pairingTopic);
  }
  async authenticate(t, e) {
    if (!this.client) throw new Error("Sign Client not initialized");
    this.setNamespaces(t), await this.cleanupPendingPairings();
    const { uri: i3, response: n3 } = await this.client.authenticate(t, e);
    i3 && (this.uri = i3, this.events.emit("display_uri", i3));
    const a2 = await n3();
    if (this.session = a2.session, this.session) {
      const r2 = gt3(this.session.namespaces);
      this.namespaces = M3(this.namespaces, r2), await this.persist("namespaces", this.namespaces), this.onConnect();
    }
    return a2;
  }
  on(t, e) {
    this.events.on(t, e);
  }
  once(t, e) {
    this.events.once(t, e);
  }
  removeListener(t, e) {
    this.events.removeListener(t, e);
  }
  off(t, e) {
    this.events.off(t, e);
  }
  get isWalletConnect() {
    return true;
  }
  async pair(t) {
    const { uri: e, approval: i3 } = await this.client.connect({ pairingTopic: t, requiredNamespaces: this.namespaces, optionalNamespaces: this.optionalNamespaces, sessionProperties: this.sessionProperties, scopedProperties: this.scopedProperties });
    e && (this.uri = e, this.events.emit("display_uri", e));
    const n3 = await i3();
    this.session = n3;
    const a2 = gt3(n3.namespaces);
    return this.namespaces = M3(this.namespaces, a2), await this.persist("namespaces", this.namespaces), await this.persist("optionalNamespaces", this.optionalNamespaces), this.onConnect(), this.session;
  }
  setDefaultChain(t, e) {
    try {
      if (!this.session) return;
      const [i3, n3] = this.validateChain(t), a2 = this.getProvider(i3);
      a2.name === I2 ? a2.setDefaultChain(`${i3}:${n3}`, e) : a2.setDefaultChain(n3, e);
    } catch (i3) {
      if (!/Please call connect/.test(i3.message)) throw i3;
    }
  }
  async cleanupPendingPairings(t = {}) {
    this.logger.info("Cleaning up inactive pairings...");
    const e = this.client.pairing.getAll();
    if (se(e)) {
      for (const i3 of e) t.deletePairings ? this.client.core.expirer.set(i3.topic, 0) : await this.client.core.relayer.subscriber.unsubscribe(i3.topic);
      this.logger.info(`Inactive pairings cleared: ${e.length}`);
    }
  }
  abortPairingAttempt() {
    this.logger.warn("abortPairingAttempt is deprecated. This is now a no-op.");
  }
  async checkStorage() {
    this.namespaces = await this.getFromStore("namespaces") || {}, this.optionalNamespaces = await this.getFromStore("optionalNamespaces") || {}, this.session && this.createProviders();
  }
  async initialize() {
    this.logger.trace("Initialized"), await this.createClient(), await this.checkStorage(), this.registerEventListeners();
  }
  async createClient() {
    var t, e;
    if (this.client = this.providerOpts.client || await Ee3.init({ core: this.providerOpts.core, logger: this.providerOpts.logger || et2, relayUrl: this.providerOpts.relayUrl || St4, projectId: this.providerOpts.projectId, metadata: this.providerOpts.metadata, storageOptions: this.providerOpts.storageOptions, storage: this.providerOpts.storage, name: this.providerOpts.name, customStoragePrefix: this.providerOpts.customStoragePrefix, telemetryEnabled: this.providerOpts.telemetryEnabled }), this.providerOpts.session) try {
      this.session = this.client.session.get(this.providerOpts.session.topic);
    } catch (i3) {
      throw this.logger.error("Failed to get session", i3), new Error(`The provided session: ${(e = (t = this.providerOpts) == null ? void 0 : t.session) == null ? void 0 : e.topic} doesn't exist in the Sign client`);
    }
    else {
      const i3 = this.client.session.getAll();
      this.session = i3[0];
    }
    this.logger.trace("SignClient Initialized");
  }
  createProviders() {
    if (!this.client) throw new Error("Sign Client not initialized");
    if (!this.session) throw new Error("Session not initialized. Please call connect() before enable()");
    const t = [...new Set(Object.keys(this.session.namespaces).map((e) => yo(e)))];
    V4("client", this.client), V4("events", this.events), V4("disableProviderPing", this.disableProviderPing), t.forEach((e) => {
      if (!this.session) return;
      const i3 = le3(e, this.session), n3 = ft3(i3), a2 = M3(this.namespaces, this.optionalNamespaces), r2 = Q2(x({}, a2[e]), { accounts: i3, chains: n3 });
      switch (e) {
        case "eip155":
          this.rpcProviders[e] = new Ie3({ namespace: r2 });
          break;
        case "algorand":
          this.rpcProviders[e] = new De3({ namespace: r2 });
          break;
        case "solana":
          this.rpcProviders[e] = new Ae2({ namespace: r2 });
          break;
        case "cosmos":
          this.rpcProviders[e] = new Ee4({ namespace: r2 });
          break;
        case "polkadot":
          this.rpcProviders[e] = new ve2({ namespace: r2 });
          break;
        case "cip34":
          this.rpcProviders[e] = new Re({ namespace: r2 });
          break;
        case "elrond":
          this.rpcProviders[e] = new Fe3({ namespace: r2 });
          break;
        case "multiversx":
          this.rpcProviders[e] = new xe2({ namespace: r2 });
          break;
        case "near":
          this.rpcProviders[e] = new Je3({ namespace: r2 });
          break;
        case "tezos":
          this.rpcProviders[e] = new We4({ namespace: r2 });
          break;
        default:
          this.rpcProviders[I2] ? this.rpcProviders[I2].updateNamespace(r2) : this.rpcProviders[I2] = new Xe3({ namespace: r2 });
      }
    });
  }
  registerEventListeners() {
    if (typeof this.client > "u") throw new Error("Sign Client is not initialized");
    this.client.on("session_ping", (t) => {
      var e;
      const { topic: i3 } = t;
      i3 === ((e = this.session) == null ? void 0 : e.topic) && this.events.emit("session_ping", t);
    }), this.client.on("session_event", (t) => {
      var e;
      const { params: i3, topic: n3 } = t;
      if (n3 !== ((e = this.session) == null ? void 0 : e.topic)) return;
      const { event: a2 } = i3;
      if (a2.name === "accountsChanged") {
        const r2 = a2.data;
        r2 && se(r2) && this.events.emit("accountsChanged", r2.map(vt));
      } else if (a2.name === "chainChanged") {
        const r2 = i3.chainId, c3 = i3.event.data, o2 = yo(r2), m2 = K3(r2) !== K3(c3) ? `${o2}:${K3(c3)}` : r2;
        this.onChainChanged(m2);
      } else this.events.emit(a2.name, a2.data);
      this.events.emit("session_event", t);
    }), this.client.on("session_update", ({ topic: t, params: e }) => {
      var i3, n3;
      if (t !== ((i3 = this.session) == null ? void 0 : i3.topic)) return;
      const { namespaces: a2 } = e, r2 = (n3 = this.client) == null ? void 0 : n3.session.get(t);
      this.session = Q2(x({}, r2), { namespaces: a2 }), this.onSessionUpdate(), this.events.emit("session_update", { topic: t, params: e });
    }), this.client.on("session_delete", async (t) => {
      var e;
      t.topic === ((e = this.session) == null ? void 0 : e.topic) && (await this.cleanup(), this.events.emit("session_delete", t), this.events.emit("disconnect", Q2(x({}, Nt("USER_DISCONNECTED")), { data: t.topic })));
    }), this.on(u2.DEFAULT_CHAIN_CHANGED, (t) => {
      this.onChainChanged(t, true);
    });
  }
  getProvider(t) {
    return this.rpcProviders[t] || this.rpcProviders[I2];
  }
  onSessionUpdate() {
    Object.keys(this.rpcProviders).forEach((t) => {
      var e;
      this.getProvider(t).updateNamespace((e = this.session) == null ? void 0 : e.namespaces[t]);
    });
  }
  setNamespaces(t) {
    const { namespaces: e = {}, optionalNamespaces: i3 = {}, sessionProperties: n3, scopedProperties: a2 } = t;
    this.optionalNamespaces = M3(e, i3), this.sessionProperties = n3, this.scopedProperties = a2;
  }
  validateChain(t) {
    const [e, i3] = (t == null ? void 0 : t.split(":")) || ["", ""];
    if (!this.namespaces || !Object.keys(this.namespaces).length) return [e, i3];
    if (e && !Object.keys(this.namespaces || {}).map((r2) => yo(r2)).includes(e)) throw new Error(`Namespace '${e}' is not configured. Please call connect() first with namespace config.`);
    if (e && i3) return [e, i3];
    const n3 = yo(Object.keys(this.namespaces)[0]), a2 = this.rpcProviders[n3].getDefaultChain();
    return [n3, a2];
  }
  async requestAccounts() {
    const [t] = this.validateChain();
    return await this.getProvider(t).requestAccounts();
  }
  async onChainChanged(t, e = false) {
    if (!this.namespaces) return;
    const [i3, n3] = this.validateChain(t);
    if (!n3) return;
    this.updateNamespaceChain(i3, n3), this.events.emit("chainChanged", n3);
    const a2 = this.getProvider(i3).getDefaultChain();
    e || this.getProvider(i3).setDefaultChain(n3), this.emitAccountsChangedOnChainChange({ namespace: i3, previousChainId: a2, newChainId: t }), await this.persist("namespaces", this.namespaces);
  }
  emitAccountsChangedOnChainChange({ namespace: t, previousChainId: e, newChainId: i3 }) {
    var n3, a2;
    try {
      if (e === i3) return;
      const r2 = (a2 = (n3 = this.session) == null ? void 0 : n3.namespaces[t]) == null ? void 0 : a2.accounts;
      if (!r2) return;
      const c3 = r2.filter((o2) => o2.includes(`${i3}:`)).map(vt);
      if (!se(c3)) return;
      this.events.emit("accountsChanged", c3);
    } catch (r2) {
      this.logger.warn("Failed to emit accountsChanged on chain change", r2);
    }
  }
  updateNamespaceChain(t, e) {
    if (!this.namespaces) return;
    const i3 = this.namespaces[t] ? t : `${t}:${e}`, n3 = { chains: [], methods: [], events: [], defaultChain: e };
    this.namespaces[i3] ? this.namespaces[i3] && (this.namespaces[i3].defaultChain = e) : this.namespaces[i3] = n3;
  }
  onConnect() {
    this.createProviders(), this.events.emit("connect", { session: this.session });
  }
  async cleanup() {
    this.namespaces = void 0, this.optionalNamespaces = void 0, this.sessionProperties = void 0, await this.deleteFromStore("namespaces"), await this.deleteFromStore("optionalNamespaces"), await this.deleteFromStore("sessionProperties"), this.session = void 0, await this.cleanupPendingPairings({ deletePairings: true }), await this.cleanupStorage();
  }
  async persist(t, e) {
    var i3;
    const n3 = ((i3 = this.session) == null ? void 0 : i3.topic) || "";
    await this.client.core.storage.setItem(`${U3}/${t}${n3}`, e);
  }
  async getFromStore(t) {
    var e;
    const i3 = ((e = this.session) == null ? void 0 : e.topic) || "";
    return await this.client.core.storage.getItem(`${U3}/${t}${i3}`);
  }
  async deleteFromStore(t) {
    var e;
    const i3 = ((e = this.session) == null ? void 0 : e.topic) || "";
    await this.client.core.storage.removeItem(`${U3}/${t}${i3}`);
  }
  async cleanupStorage() {
    var t;
    try {
      if (((t = this.client) == null ? void 0 : t.session.length) > 0) return;
      const e = await this.client.core.storage.getKeys();
      for (const i3 of e) i3.startsWith(U3) && await this.client.core.storage.removeItem(i3);
    } catch (e) {
      this.logger.warn("Failed to cleanup storage", e);
    }
  }
};
var es2 = B2;

// node_modules/@walletconnect/ethereum-provider/dist/index.es.js
var $4 = "wc";
var k5 = "ethereum_provider";
var q3 = `${$4}@2:${k5}:`;
var U4 = "https://rpc.walletconnect.org/v1/";
var f6 = ["eth_sendTransaction", "personal_sign"];
var A4 = ["eth_accounts", "eth_requestAccounts", "eth_sendRawTransaction", "eth_sign", "eth_signTransaction", "eth_signTypedData", "eth_signTypedData_v3", "eth_signTypedData_v4", "eth_sendTransaction", "personal_sign", "wallet_switchEthereumChain", "wallet_addEthereumChain", "wallet_getPermissions", "wallet_requestPermissions", "wallet_registerOnboarding", "wallet_watchAsset", "wallet_scanQRCode", "wallet_sendCalls", "wallet_getCapabilities", "wallet_getCallsStatus", "wallet_showCallsStatus"];
var C5 = ["chainChanged", "accountsChanged"];
var P3 = ["chainChanged", "accountsChanged", "message", "disconnect", "connect"];
var D2 = async () => {
  const { createAppKit: s } = await import("./core-XKCU2DCM.js");
  return s;
};
var z2 = Object.defineProperty;
var L3 = Object.defineProperties;
var K4 = Object.getOwnPropertyDescriptors;
var M4 = Object.getOwnPropertySymbols;
var Q3 = Object.prototype.hasOwnProperty;
var V5 = Object.prototype.propertyIsEnumerable;
var _ = (s, t, e) => t in s ? z2(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var v4 = (s, t) => {
  for (var e in t || (t = {})) Q3.call(t, e) && _(s, e, t[e]);
  if (M4) for (var e of M4(t)) V5.call(t, e) && _(s, e, t[e]);
  return s;
};
var w2 = (s, t) => L3(s, K4(t));
var p3 = (s, t, e) => _(s, typeof t != "symbol" ? t + "" : t, e);
function I3(s) {
  return Number(s[0].split(":")[1]);
}
function E5(s) {
  return `0x${s.toString(16)}`;
}
function G3(s) {
  const { chains: t, optionalChains: e, methods: n3, optionalMethods: i3, events: a2, optionalEvents: o2, rpcMap: u3 } = s;
  if (!se(t)) throw new Error("Invalid chains");
  const c3 = { chains: t, methods: n3 || f6, events: a2 || C5, rpcMap: v4({}, t.length ? { [I3(t)]: u3[I3(t)] } : {}) }, l4 = a2 == null ? void 0 : a2.filter((d3) => !C5.includes(d3)), r2 = n3 == null ? void 0 : n3.filter((d3) => !f6.includes(d3));
  if (!e && !o2 && !i3 && !(l4 != null && l4.length) && !(r2 != null && r2.length)) return { required: t.length ? c3 : void 0 };
  const m2 = (l4 == null ? void 0 : l4.length) && (r2 == null ? void 0 : r2.length) || !e, h4 = { chains: [...new Set(m2 ? c3.chains.concat(e || []) : e)], methods: [...new Set(c3.methods.concat(i3 != null && i3.length ? i3 : A4))], events: [...new Set(c3.events.concat(o2 != null && o2.length ? o2 : P3))], rpcMap: u3 };
  return { required: t.length ? c3 : void 0, optional: e.length ? h4 : void 0 };
}
var b4 = class _b {
  constructor() {
    p3(this, "events", new import_events8.EventEmitter()), p3(this, "namespace", "eip155"), p3(this, "accounts", []), p3(this, "signer"), p3(this, "chainId", 1), p3(this, "modal"), p3(this, "rpc"), p3(this, "STORAGE_KEY", q3), p3(this, "on", (t, e) => (this.events.on(t, e), this)), p3(this, "once", (t, e) => (this.events.once(t, e), this)), p3(this, "removeListener", (t, e) => (this.events.removeListener(t, e), this)), p3(this, "off", (t, e) => (this.events.off(t, e), this)), p3(this, "parseAccount", (t) => this.isCompatibleChainId(t) ? this.parseAccountId(t).address : t), this.signer = {}, this.rpc = {};
  }
  static async init(t) {
    const e = new _b();
    return await e.initialize(t), e;
  }
  async request(t, e) {
    return await this.signer.request(t, this.formatChainId(this.chainId), e);
  }
  sendAsync(t, e, n3) {
    this.signer.sendAsync(t, e, this.formatChainId(this.chainId), n3);
  }
  get connected() {
    return this.signer.client ? this.signer.client.core.relayer.connected : false;
  }
  get connecting() {
    return this.signer.client ? this.signer.client.core.relayer.connecting : false;
  }
  async enable() {
    return this.session || await this.connect(), await this.request({ method: "eth_requestAccounts" });
  }
  async connect(t) {
    var e;
    if (!this.signer.client) throw new Error("Provider not initialized. Call init() first");
    this.loadConnectOpts(t);
    const { required: n3, optional: i3 } = G3(this.rpc);
    try {
      const a2 = await new Promise(async (u3, c3) => {
        var l4, r2;
        this.rpc.showQrModal && ((l4 = this.modal) == null || l4.open(), (r2 = this.modal) == null || r2.subscribeState((h4) => {
          !h4.open && !this.signer.session && (this.signer.abortPairingAttempt(), c3(new Error("Connection request reset. Please try again.")));
        }));
        const m2 = t != null && t.scopedProperties ? { [this.namespace]: t.scopedProperties } : void 0;
        await this.signer.connect(w2(v4({ namespaces: v4({}, n3 && { [this.namespace]: n3 }) }, i3 && { optionalNamespaces: { [this.namespace]: i3 } }), { pairingTopic: t == null ? void 0 : t.pairingTopic, scopedProperties: m2 })).then((h4) => {
          u3(h4);
        }).catch((h4) => {
          var d3;
          (d3 = this.modal) == null || d3.showErrorMessage("Unable to connect"), c3(new Error(h4.message));
        });
      });
      if (!a2) return;
      const o2 = Ko(a2.namespaces, [this.namespace]);
      this.setChainIds(this.rpc.chains.length ? this.rpc.chains : o2), this.setAccounts(o2), this.events.emit("connect", { chainId: E5(this.chainId) });
    } catch (a2) {
      throw this.signer.logger.error(a2), a2;
    } finally {
      (e = this.modal) == null || e.close();
    }
  }
  async authenticate(t, e) {
    var n3;
    if (!this.signer.client) throw new Error("Provider not initialized. Call init() first");
    this.loadConnectOpts({ chains: t == null ? void 0 : t.chains });
    try {
      const i3 = await new Promise(async (o2, u3) => {
        var c3, l4;
        this.rpc.showQrModal && ((c3 = this.modal) == null || c3.open(), (l4 = this.modal) == null || l4.subscribeState((r2) => {
          !r2.open && !this.signer.session && (this.signer.abortPairingAttempt(), u3(new Error("Connection request reset. Please try again.")));
        })), await this.signer.authenticate(w2(v4({}, t), { chains: this.rpc.chains }), e).then((r2) => {
          o2(r2);
        }).catch((r2) => {
          var m2;
          (m2 = this.modal) == null || m2.showErrorMessage("Unable to connect"), u3(new Error(r2.message));
        });
      }), a2 = i3.session;
      if (a2) {
        const o2 = Ko(a2.namespaces, [this.namespace]);
        this.setChainIds(this.rpc.chains.length ? this.rpc.chains : o2), this.setAccounts(o2), this.events.emit("connect", { chainId: E5(this.chainId) });
      }
      return i3;
    } catch (i3) {
      throw this.signer.logger.error(i3), i3;
    } finally {
      (n3 = this.modal) == null || n3.close();
    }
  }
  async disconnect() {
    this.session && await this.signer.disconnect(), this.reset();
  }
  get isWalletConnect() {
    return true;
  }
  get session() {
    return this.signer.session;
  }
  registerEventListeners() {
    this.signer.on("session_event", (t) => {
      const { params: e } = t, { event: n3 } = e;
      n3.name === "accountsChanged" ? (this.accounts = this.parseAccounts(n3.data), this.events.emit("accountsChanged", this.accounts)) : n3.name === "chainChanged" ? this.setChainId(this.formatChainId(n3.data)) : this.events.emit(n3.name, n3.data), this.events.emit("session_event", t);
    }), this.signer.on("accountsChanged", (t) => {
      this.accounts = this.parseAccounts(t), this.events.emit("accountsChanged", this.accounts);
    }), this.signer.on("chainChanged", (t) => {
      const e = parseInt(t);
      this.chainId = e, this.events.emit("chainChanged", E5(this.chainId)), this.persist();
    }), this.signer.on("session_update", (t) => {
      this.events.emit("session_update", t);
    }), this.signer.on("session_delete", (t) => {
      this.reset(), this.events.emit("session_delete", t), this.events.emit("disconnect", w2(v4({}, Nt("USER_DISCONNECTED")), { data: t.topic, name: "USER_DISCONNECTED" }));
    }), this.signer.on("display_uri", (t) => {
      this.events.emit("display_uri", t);
    });
  }
  switchEthereumChain(t) {
    this.request({ method: "wallet_switchEthereumChain", params: [{ chainId: t.toString(16) }] });
  }
  isCompatibleChainId(t) {
    return typeof t == "string" ? t.startsWith(`${this.namespace}:`) : false;
  }
  formatChainId(t) {
    return `${this.namespace}:${t}`;
  }
  parseChainId(t) {
    return Number(t.split(":")[1]);
  }
  setChainIds(t) {
    const e = t.filter((n3) => this.isCompatibleChainId(n3)).map((n3) => this.parseChainId(n3));
    e.length && (this.chainId = e[0], this.events.emit("chainChanged", E5(this.chainId)), this.persist());
  }
  setChainId(t) {
    if (this.isCompatibleChainId(t)) {
      const e = this.parseChainId(t);
      this.chainId = e, this.switchEthereumChain(e);
    }
  }
  parseAccountId(t) {
    const [e, n3, i3] = t.split(":");
    return { chainId: `${e}:${n3}`, address: i3 };
  }
  setAccounts(t) {
    this.accounts = t.filter((e) => this.parseChainId(this.parseAccountId(e).chainId) === this.chainId).map((e) => this.parseAccountId(e).address), this.events.emit("accountsChanged", this.accounts);
  }
  getRpcConfig(t) {
    var e, n3;
    const i3 = (e = t == null ? void 0 : t.chains) != null ? e : [], a2 = (n3 = t == null ? void 0 : t.optionalChains) != null ? n3 : [], o2 = i3.concat(a2);
    if (!o2.length) throw new Error("No chains specified in either `chains` or `optionalChains`");
    const u3 = i3.length ? (t == null ? void 0 : t.methods) || f6 : [], c3 = i3.length ? (t == null ? void 0 : t.events) || C5 : [], l4 = (t == null ? void 0 : t.optionalMethods) || [], r2 = (t == null ? void 0 : t.optionalEvents) || [], m2 = (t == null ? void 0 : t.rpcMap) || this.buildRpcMap(o2, t.projectId), h4 = (t == null ? void 0 : t.qrModalOptions) || void 0;
    return { chains: i3 == null ? void 0 : i3.map((d3) => this.formatChainId(d3)), optionalChains: a2.map((d3) => this.formatChainId(d3)), methods: u3, events: c3, optionalMethods: l4, optionalEvents: r2, rpcMap: m2, showQrModal: !!(t != null && t.showQrModal), qrModalOptions: h4, projectId: t.projectId, metadata: t.metadata };
  }
  buildRpcMap(t, e) {
    const n3 = {};
    return t.forEach((i3) => {
      n3[i3] = this.getRpcUrl(i3, e);
    }), n3;
  }
  async initialize(t) {
    if (this.rpc = this.getRpcConfig(t), this.chainId = this.rpc.chains.length ? I3(this.rpc.chains) : I3(this.rpc.optionalChains), this.signer = await es2.init({ projectId: this.rpc.projectId, metadata: this.rpc.metadata, disableProviderPing: t.disableProviderPing, relayUrl: t.relayUrl, storage: t.storage, storageOptions: t.storageOptions, customStoragePrefix: t.customStoragePrefix, telemetryEnabled: t.telemetryEnabled, logger: t.logger }), this.registerEventListeners(), await this.loadPersistedSession(), this.rpc.showQrModal) {
      let e;
      try {
        const n3 = await D2(), { convertWCMToAppKitOptions: i3 } = await Promise.resolve().then(function() {
          return nt3;
        }), a2 = i3(w2(v4({}, this.rpc.qrModalOptions), { chains: [.../* @__PURE__ */ new Set([...this.rpc.chains, ...this.rpc.optionalChains])], metadata: this.rpc.metadata, projectId: this.rpc.projectId }));
        if (!a2.networks.length) throw new Error("No networks found for WalletConnect·");
        e = n3(w2(v4({}, a2), { universalProvider: this.signer, manualWCControl: true }));
      } catch (n3) {
        throw console.warn(n3), new Error("To use QR modal, please install @reown/appkit package");
      }
      if (e) try {
        this.modal = e;
      } catch (n3) {
        throw this.signer.logger.error(n3), new Error("Could not generate WalletConnectModal Instance");
      }
    }
  }
  loadConnectOpts(t) {
    if (!t) return;
    const { chains: e, optionalChains: n3, rpcMap: i3 } = t;
    e && se(e) && (this.rpc.chains = e.map((a2) => this.formatChainId(a2)), e.forEach((a2) => {
      this.rpc.rpcMap[a2] = (i3 == null ? void 0 : i3[a2]) || this.getRpcUrl(a2);
    })), n3 && se(n3) && (this.rpc.optionalChains = [], this.rpc.optionalChains = n3 == null ? void 0 : n3.map((a2) => this.formatChainId(a2)), n3.forEach((a2) => {
      this.rpc.rpcMap[a2] = (i3 == null ? void 0 : i3[a2]) || this.getRpcUrl(a2);
    }));
  }
  getRpcUrl(t, e) {
    var n3;
    return ((n3 = this.rpc.rpcMap) == null ? void 0 : n3[t]) || `${U4}?chainId=eip155:${t}&projectId=${e || this.rpc.projectId}`;
  }
  async loadPersistedSession() {
    if (this.session) try {
      const t = await this.signer.client.core.storage.getItem(`${this.STORAGE_KEY}/chainId`), e = this.session.namespaces[`${this.namespace}:${t}`] ? this.session.namespaces[`${this.namespace}:${t}`] : this.session.namespaces[this.namespace];
      this.setChainIds(t ? [this.formatChainId(t)] : e == null ? void 0 : e.accounts), this.setAccounts(e == null ? void 0 : e.accounts);
    } catch (t) {
      this.signer.logger.error("Failed to load persisted session, clearing state..."), this.signer.logger.error(t), await this.disconnect().catch((e) => this.signer.logger.warn(e));
    }
  }
  reset() {
    this.chainId = 1, this.accounts = [];
  }
  persist() {
    this.session && this.signer.client.core.storage.setItem(`${this.STORAGE_KEY}/chainId`, this.chainId);
  }
  parseAccounts(t) {
    return typeof t == "string" || t instanceof String ? [this.parseAccount(t)] : t.map((e) => this.parseAccount(e));
  }
};
var Y4 = b4;
var H3 = Object.defineProperty;
var B3 = Object.defineProperties;
var F4 = Object.getOwnPropertyDescriptors;
var S4 = Object.getOwnPropertySymbols;
var X3 = Object.prototype.hasOwnProperty;
var J3 = Object.prototype.propertyIsEnumerable;
var T2 = (s, t, e) => t in s ? H3(s, t, { enumerable: true, configurable: true, writable: true, value: e }) : s[t] = e;
var R4 = (s, t) => {
  for (var e in t || (t = {})) X3.call(t, e) && T2(s, e, t[e]);
  if (S4) for (var e of S4(t)) J3.call(t, e) && T2(s, e, t[e]);
  return s;
};
var Z2 = (s, t) => B3(s, F4(t));
function tt3(s) {
  if (s) return { "--w3m-font-family": s["--wcm-font-family"], "--w3m-accent": s["--wcm-accent-color"], "--w3m-color-mix": s["--wcm-background-color"], "--w3m-z-index": s["--wcm-z-index"] ? Number(s["--wcm-z-index"]) : void 0, "--w3m-qr-color": s["--wcm-accent-color"], "--w3m-font-size-master": s["--wcm-text-medium-regular-size"], "--w3m-border-radius-master": s["--wcm-container-border-radius"], "--w3m-color-mix-strength": 0 };
}
var et3 = (s) => {
  const [t, e] = s.split(":");
  return W3({ id: e, caipNetworkId: s, chainNamespace: t, name: "", nativeCurrency: { name: "", symbol: "", decimals: 8 }, rpcUrls: { default: { http: ["https://rpc.walletconnect.org/v1"] } } });
};
function st2(s) {
  var t, e, n3, i3, a2, o2, u3;
  const c3 = (t = s.chains) == null ? void 0 : t.map(et3).filter(Boolean);
  if (c3.length === 0) throw new Error("At least one chain must be specified");
  const l4 = c3.find((m2) => {
    var h4;
    return m2.id === ((h4 = s.defaultChain) == null ? void 0 : h4.id);
  }), r2 = { projectId: s.projectId, networks: c3, themeMode: s.themeMode, themeVariables: tt3(s.themeVariables), chainImages: s.chainImages, connectorImages: s.walletImages, defaultNetwork: l4, metadata: Z2(R4({}, s.metadata), { name: ((e = s.metadata) == null ? void 0 : e.name) || "WalletConnect", description: ((n3 = s.metadata) == null ? void 0 : n3.description) || "Connect to WalletConnect-compatible wallets", url: ((i3 = s.metadata) == null ? void 0 : i3.url) || "https://walletconnect.org", icons: ((a2 = s.metadata) == null ? void 0 : a2.icons) || ["https://walletconnect.org/walletconnect-logo.png"] }), showWallets: true, featuredWalletIds: s.explorerRecommendedWalletIds === "NONE" ? [] : Array.isArray(s.explorerRecommendedWalletIds) ? s.explorerRecommendedWalletIds : [], excludeWalletIds: s.explorerExcludedWalletIds === "ALL" ? [] : Array.isArray(s.explorerExcludedWalletIds) ? s.explorerExcludedWalletIds : [], enableEIP6963: false, enableInjected: false, enableCoinbase: true, enableWalletConnect: true, features: { email: false, socials: false } };
  if ((o2 = s.mobileWallets) != null && o2.length || (u3 = s.desktopWallets) != null && u3.length) {
    const m2 = [...(s.mobileWallets || []).map((g) => ({ id: g.id, name: g.name, links: g.links })), ...(s.desktopWallets || []).map((g) => ({ id: g.id, name: g.name, links: { native: g.links.native, universal: g.links.universal } }))], h4 = [...r2.featuredWalletIds || [], ...r2.excludeWalletIds || []], d3 = m2.filter((g) => !h4.includes(g.id));
    d3.length && (r2.customWallets = d3);
  }
  return r2;
}
function W3(s) {
  return R4({ formatters: void 0, fees: void 0, serializers: void 0 }, s);
}
var nt3 = Object.freeze({ __proto__: null, convertWCMToAppKitOptions: st2, defineChain: W3 });
export {
  Y4 as EthereumProvider,
  P3 as OPTIONAL_EVENTS,
  A4 as OPTIONAL_METHODS,
  C5 as REQUIRED_EVENTS,
  f6 as REQUIRED_METHODS,
  b4 as default
};
/*! Bundled license information:

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@walletconnect/utils/dist/index.es.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=index.es-ZJDKQQYA.js.map
